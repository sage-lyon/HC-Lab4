// (c) 1992-2021 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
// Generated by Intel(R) FPGA SDK for OpenCL(TM), Version 2022.1.0 Build 96.2 Pro Edition, Copyright (c) 2021 Intel Corporation

/////////////////////////////////////////////////////////////////
// MODULE matrix_multi_st_v3_6031e0_4370fa_sys
/////////////////////////////////////////////////////////////////
module matrix_multi_st_v3_6031e0_4370fa_sys
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic [63:0] device_exception_bus,
   output logic kernel_irq,
   // AVM avm_mem_gmem_0_DDR_port_0_0_rw
   output logic avm_mem_gmem_0_DDR_port_0_0_rw_enable,
   output logic avm_mem_gmem_0_DDR_port_0_0_rw_read,
   output logic avm_mem_gmem_0_DDR_port_0_0_rw_write,
   output logic [31:0] avm_mem_gmem_0_DDR_port_0_0_rw_address,
   output logic [511:0] avm_mem_gmem_0_DDR_port_0_0_rw_writedata,
   output logic [63:0] avm_mem_gmem_0_DDR_port_0_0_rw_byteenable,
   input logic avm_mem_gmem_0_DDR_port_0_0_rw_waitrequest,
   input logic [511:0] avm_mem_gmem_0_DDR_port_0_0_rw_readdata,
   input logic avm_mem_gmem_0_DDR_port_0_0_rw_readdatavalid,
   output logic [4:0] avm_mem_gmem_0_DDR_port_0_0_rw_burstcount,
   input logic avm_mem_gmem_0_DDR_port_0_0_rw_writeack,
   // AVM avm_mem_gmem_0_DDR_port_1_0_rw
   output logic avm_mem_gmem_0_DDR_port_1_0_rw_enable,
   output logic avm_mem_gmem_0_DDR_port_1_0_rw_read,
   output logic avm_mem_gmem_0_DDR_port_1_0_rw_write,
   output logic [31:0] avm_mem_gmem_0_DDR_port_1_0_rw_address,
   output logic [511:0] avm_mem_gmem_0_DDR_port_1_0_rw_writedata,
   output logic [63:0] avm_mem_gmem_0_DDR_port_1_0_rw_byteenable,
   input logic avm_mem_gmem_0_DDR_port_1_0_rw_waitrequest,
   input logic [511:0] avm_mem_gmem_0_DDR_port_1_0_rw_readdata,
   input logic avm_mem_gmem_0_DDR_port_1_0_rw_readdatavalid,
   output logic [4:0] avm_mem_gmem_0_DDR_port_1_0_rw_burstcount,
   input logic avm_mem_gmem_0_DDR_port_1_0_rw_writeack,
   // AVS cra_ring_root_avs
   input logic cra_ring_root_avs_enable,
   input logic cra_ring_root_avs_read,
   input logic cra_ring_root_avs_write,
   input logic [7:0] cra_ring_root_avs_address,
   input logic [63:0] cra_ring_root_avs_writedata,
   input logic [7:0] cra_ring_root_avs_byteenable,
   output logic cra_ring_root_avs_waitrequest,
   output logic [63:0] cra_ring_root_avs_readdata,
   output logic cra_ring_root_avs_readdatavalid
);
   logic cra_ring_node_avm_wire_0_enable;
   logic cra_ring_node_avm_wire_0_read;
   logic cra_ring_node_avm_wire_0_write;
   logic [4:0] cra_ring_node_avm_wire_0_address;
   logic [63:0] cra_ring_node_avm_wire_0_writedata;
   logic [7:0] cra_ring_node_avm_wire_0_byteenable;
   logic [63:0] cra_ring_node_avm_wire_0_readdata;
   logic cra_ring_node_avm_wire_0_readdatavalid;
   logic cra_ring_node_avm_wire_0_burstcount;
   logic cra_ring_node_avm_wire_1_enable;
   logic cra_ring_node_avm_wire_1_read;
   logic cra_ring_node_avm_wire_1_write;
   logic [5:0] cra_ring_node_avm_wire_1_address;
   logic [63:0] cra_ring_node_avm_wire_1_writedata;
   logic [7:0] cra_ring_node_avm_wire_1_byteenable;
   logic [63:0] cra_ring_node_avm_wire_1_readdata;
   logic cra_ring_node_avm_wire_1_readdatavalid;
   logic cra_ring_node_avm_wire_1_burstcount;
   logic [1:0] kernel_irqs;
   logic gmem_avm_kernel_rd_enable [5];
   logic gmem_avm_kernel_rd_read [5];
   logic gmem_avm_kernel_rd_write [5];
   logic [32:0] gmem_avm_kernel_rd_address [5];
   logic [511:0] gmem_avm_kernel_rd_writedata [5];
   logic [63:0] gmem_avm_kernel_rd_byteenable [5];
   logic gmem_avm_kernel_rd_waitrequest [5];
   logic [511:0] gmem_avm_kernel_rd_readdata [5];
   logic gmem_avm_kernel_rd_readdatavalid [5];
   logic [4:0] gmem_avm_kernel_rd_burstcount [5];
   logic gmem_avm_kernel_rd_writeack [5];
   logic gmem_avm_kernel_wr_enable [2];
   logic gmem_avm_kernel_wr_read [2];
   logic gmem_avm_kernel_wr_write [2];
   logic [32:0] gmem_avm_kernel_wr_address [2];
   logic [511:0] gmem_avm_kernel_wr_writedata [2];
   logic [63:0] gmem_avm_kernel_wr_byteenable [2];
   logic gmem_avm_kernel_wr_waitrequest [2];
   logic [511:0] gmem_avm_kernel_wr_readdata [2];
   logic gmem_avm_kernel_wr_readdatavalid [2];
   logic [4:0] gmem_avm_kernel_wr_burstcount [2];
   logic gmem_avm_kernel_wr_writeack [2];
   logic gmem_ic_avm_enable [2];
   logic gmem_ic_avm_read [2];
   logic gmem_ic_avm_write [2];
   logic [31:0] gmem_ic_avm_address [2];
   logic [511:0] gmem_ic_avm_writedata [2];
   logic [63:0] gmem_ic_avm_byteenable [2];
   logic gmem_ic_avm_waitrequest [2];
   logic [511:0] gmem_ic_avm_readdata [2];
   logic gmem_ic_avm_readdatavalid [2];
   logic [4:0] gmem_ic_avm_burstcount [2];
   logic gmem_ic_avm_writeack [2];

   // INST k1_ZTS13MMstv3_cplusd_std_ic_inst of k1_ZTS13MMstv3_cplusd_std_ic_partition_wrapper
   k1_ZTS13MMstv3_cplusd_std_ic_partition_wrapper k1_ZTS13MMstv3_cplusd_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_k1_ZTS13MMstv3_cplusd(kernel_irqs[0]),
      // AVS avs_k1_ZTS13MMstv3_cplusd_cra
      .avs_k1_ZTS13MMstv3_cplusd_cra_enable(cra_ring_node_avm_wire_0_enable),
      .avs_k1_ZTS13MMstv3_cplusd_cra_read(cra_ring_node_avm_wire_0_read),
      .avs_k1_ZTS13MMstv3_cplusd_cra_write(cra_ring_node_avm_wire_0_write),
      .avs_k1_ZTS13MMstv3_cplusd_cra_address(cra_ring_node_avm_wire_0_address),
      .avs_k1_ZTS13MMstv3_cplusd_cra_writedata(cra_ring_node_avm_wire_0_writedata),
      .avs_k1_ZTS13MMstv3_cplusd_cra_byteenable(cra_ring_node_avm_wire_0_byteenable),
      .avs_k1_ZTS13MMstv3_cplusd_cra_readdata(cra_ring_node_avm_wire_0_readdata),
      .avs_k1_ZTS13MMstv3_cplusd_cra_readdatavalid(cra_ring_node_avm_wire_0_readdatavalid),
      // AVM k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd
      .k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_enable(gmem_avm_kernel_wr_enable[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_read(gmem_avm_kernel_wr_read[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_write(gmem_avm_kernel_wr_write[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_address(gmem_avm_kernel_wr_address[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_writedata(gmem_avm_kernel_wr_writedata[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_byteenable(gmem_avm_kernel_wr_byteenable[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_waitrequest(gmem_avm_kernel_wr_waitrequest[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_readdata(gmem_avm_kernel_wr_readdata[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_readdatavalid(gmem_avm_kernel_wr_readdatavalid[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_burstcount(gmem_avm_kernel_wr_burstcount[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_writeack(gmem_avm_kernel_wr_writeack[0]),
      // AVM k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_enable(gmem_avm_kernel_rd_enable[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_read(gmem_avm_kernel_rd_read[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_write(gmem_avm_kernel_rd_write[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_address(gmem_avm_kernel_rd_address[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writedata(gmem_avm_kernel_rd_writedata[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_byteenable(gmem_avm_kernel_rd_byteenable[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_waitrequest(gmem_avm_kernel_rd_waitrequest[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdata(gmem_avm_kernel_rd_readdata[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdatavalid(gmem_avm_kernel_rd_readdatavalid[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_burstcount(gmem_avm_kernel_rd_burstcount[0]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writeack(gmem_avm_kernel_rd_writeack[0]),
      // AVM k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_enable(gmem_avm_kernel_rd_enable[1]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_read(gmem_avm_kernel_rd_read[1]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_write(gmem_avm_kernel_rd_write[1]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_address(gmem_avm_kernel_rd_address[1]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writedata(gmem_avm_kernel_rd_writedata[1]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_byteenable(gmem_avm_kernel_rd_byteenable[1]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_waitrequest(gmem_avm_kernel_rd_waitrequest[1]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdata(gmem_avm_kernel_rd_readdata[1]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdatavalid(gmem_avm_kernel_rd_readdatavalid[1]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_burstcount(gmem_avm_kernel_rd_burstcount[1]),
      .k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writeack(gmem_avm_kernel_rd_writeack[1])
   );

   // INST k0_ZTS6MMstv3_std_ic_inst of k0_ZTS6MMstv3_std_ic_partition_wrapper
   k0_ZTS6MMstv3_std_ic_partition_wrapper k0_ZTS6MMstv3_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_k0_ZTS6MMstv3(kernel_irqs[1]),
      // AVS avs_k0_ZTS6MMstv3_cra
      .avs_k0_ZTS6MMstv3_cra_enable(cra_ring_node_avm_wire_1_enable),
      .avs_k0_ZTS6MMstv3_cra_read(cra_ring_node_avm_wire_1_read),
      .avs_k0_ZTS6MMstv3_cra_write(cra_ring_node_avm_wire_1_write),
      .avs_k0_ZTS6MMstv3_cra_address(cra_ring_node_avm_wire_1_address),
      .avs_k0_ZTS6MMstv3_cra_writedata(cra_ring_node_avm_wire_1_writedata),
      .avs_k0_ZTS6MMstv3_cra_byteenable(cra_ring_node_avm_wire_1_byteenable),
      .avs_k0_ZTS6MMstv3_cra_readdata(cra_ring_node_avm_wire_1_readdata),
      .avs_k0_ZTS6MMstv3_cra_readdatavalid(cra_ring_node_avm_wire_1_readdatavalid),
      // AVM k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3
      .k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_enable(gmem_avm_kernel_wr_enable[1]),
      .k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_read(gmem_avm_kernel_wr_read[1]),
      .k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_write(gmem_avm_kernel_wr_write[1]),
      .k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_address(gmem_avm_kernel_wr_address[1]),
      .k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_writedata(gmem_avm_kernel_wr_writedata[1]),
      .k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_byteenable(gmem_avm_kernel_wr_byteenable[1]),
      .k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_waitrequest(gmem_avm_kernel_wr_waitrequest[1]),
      .k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_readdata(gmem_avm_kernel_wr_readdata[1]),
      .k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_readdatavalid(gmem_avm_kernel_wr_readdatavalid[1]),
      .k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_burstcount(gmem_avm_kernel_wr_burstcount[1]),
      .k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_writeack(gmem_avm_kernel_wr_writeack[1]),
      // AVM k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_enable(gmem_avm_kernel_rd_enable[2]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_read(gmem_avm_kernel_rd_read[2]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_write(gmem_avm_kernel_rd_write[2]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_address(gmem_avm_kernel_rd_address[2]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writedata(gmem_avm_kernel_rd_writedata[2]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_byteenable(gmem_avm_kernel_rd_byteenable[2]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_waitrequest(gmem_avm_kernel_rd_waitrequest[2]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdata(gmem_avm_kernel_rd_readdata[2]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdatavalid(gmem_avm_kernel_rd_readdatavalid[2]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_burstcount(gmem_avm_kernel_rd_burstcount[2]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writeack(gmem_avm_kernel_rd_writeack[2]),
      // AVM k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_enable(gmem_avm_kernel_rd_enable[3]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_read(gmem_avm_kernel_rd_read[3]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_write(gmem_avm_kernel_rd_write[3]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_address(gmem_avm_kernel_rd_address[3]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writedata(gmem_avm_kernel_rd_writedata[3]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_byteenable(gmem_avm_kernel_rd_byteenable[3]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_waitrequest(gmem_avm_kernel_rd_waitrequest[3]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdata(gmem_avm_kernel_rd_readdata[3]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdatavalid(gmem_avm_kernel_rd_readdatavalid[3]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_burstcount(gmem_avm_kernel_rd_burstcount[3]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writeack(gmem_avm_kernel_rd_writeack[3]),
      // AVM k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_enable(gmem_avm_kernel_rd_enable[4]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_read(gmem_avm_kernel_rd_read[4]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_write(gmem_avm_kernel_rd_write[4]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_address(gmem_avm_kernel_rd_address[4]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writedata(gmem_avm_kernel_rd_writedata[4]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_byteenable(gmem_avm_kernel_rd_byteenable[4]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_waitrequest(gmem_avm_kernel_rd_waitrequest[4]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdata(gmem_avm_kernel_rd_readdata[4]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdatavalid(gmem_avm_kernel_rd_readdatavalid[4]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_burstcount(gmem_avm_kernel_rd_burstcount[4]),
      .k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writeack(gmem_avm_kernel_rd_writeack[4])
   );

   assign kernel_irq = |kernel_irqs;
   // INST lsu_ic_top_gmem of lsu_ic_top
   lsu_ic_top
   #(
      .AWIDTH(33),
      .MWIDTH_BYTES(64),
      .BURST_CNT_W(5),
      .NUM_RD_PORT(5),
      .NUM_WR_PORT(2),
      .NUM_DIMM(2),
      .ENABLE_MULTIPLE_WR_RING(1),
      .ENABLE_LAST_WAIT(0),
      .HYPER_PIPELINE(0),
      .ENABLE_BSP_WAITREQUEST_ALLOWANCE(0),
      .ENABLE_BSP_AVMM_WRITE_ACK(0),
      .WRITE_ACK_FIFO_DEPTH(1024),
      .AVM_WRITE_DATA_LATENESS(0),
      .AVM_READ_DATA_LATENESS(0),
      .WIDE_DATA_SLICING(0),
      .ROOT_FIFO_STALL_IN_EARLINESS(0),
      .ROOT_WFIFO_VALID_IN_EARLINESS(0),
      .ALLOW_HIGH_SPEED_FIFO_USAGE(0),
      .PIPELINE_RD_RETURN(0),
      .NUM_AVM_OUTPUT_PIPE_STAGES(1),
      .ROOT_FIFO_DEPTH(512),
      .RETURN_DATA_FIFO_DEPTH(512),
      .MAX_REQUESTS_PER_LSU(4),
      .NUM_MEM_SYSTEMS(1),
      .NUM_BANKS_PER_MEM_SYSTEM({2}),
      .NUM_BANKS_W_PER_MEM_SYSTEM({1}),
      .PERMUTE_BIT_LSB_PER_MEM_SYSTEM({10}),
      .BANK_BIT_LSB_PER_MEM_SYSTEM({32}),
      .ENABLE_BANK_INTERLEAVING({1}),
      .NUM_REORDER_PER_MEM_SYSTEM({2}),
      .ENABLE_SWDIMM(0),
      .ROOT_PORT_MAP('{'{1,0}}),
      .ROOT_ARB_BALANCED_RW(0),
      .PENDING_RESPONSE_COUNTER_WIDTH(10),
      .SYNCHRONIZE_RESET(1)
   )
   lsu_ic_top_gmem
   (
      .clk(clock),
      .resetn(resetn),
      .i_rd_request(gmem_avm_kernel_rd_read),
      .i_rd_address(gmem_avm_kernel_rd_address),
      .i_rd_burstcount(gmem_avm_kernel_rd_burstcount),
      .o_rd_waitrequest(gmem_avm_kernel_rd_waitrequest),
      .o_avm_readdata(gmem_avm_kernel_rd_readdata),
      .o_avm_readdatavalid(gmem_avm_kernel_rd_readdatavalid),
      .i_wr_byteenable(gmem_avm_kernel_wr_byteenable),
      .i_wr_address(gmem_avm_kernel_wr_address),
      .i_wr_request(gmem_avm_kernel_wr_write),
      .i_wr_burstcount(gmem_avm_kernel_wr_burstcount),
      .i_wr_writedata(gmem_avm_kernel_wr_writedata),
      .o_wr_waitrequest(gmem_avm_kernel_wr_waitrequest),
      .o_avm_writeack(gmem_avm_kernel_wr_writeack),
      .i_avm_waitrequest(gmem_ic_avm_waitrequest),
      .i_avm_write_ack(gmem_ic_avm_writeack),
      .i_avm_readdata(gmem_ic_avm_readdata),
      .i_avm_readdatavalid(gmem_ic_avm_readdatavalid),
      .o_avm_byteenable(gmem_ic_avm_byteenable),
      .o_avm_address(gmem_ic_avm_address),
      .o_avm_read(gmem_ic_avm_read),
      .o_avm_write(gmem_ic_avm_write),
      .o_avm_burstcount(gmem_ic_avm_burstcount),
      .o_avm_writedata(gmem_ic_avm_writedata)
   );

   assign avm_mem_gmem_0_DDR_port_0_0_rw_read = gmem_ic_avm_read[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_write = gmem_ic_avm_write[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_burstcount = gmem_ic_avm_burstcount[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_address = gmem_ic_avm_address[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_writedata = gmem_ic_avm_writedata[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_byteenable = gmem_ic_avm_byteenable[0];
   assign gmem_ic_avm_waitrequest[0] = avm_mem_gmem_0_DDR_port_0_0_rw_waitrequest;
   assign gmem_ic_avm_readdata[0] = avm_mem_gmem_0_DDR_port_0_0_rw_readdata;
   assign gmem_ic_avm_readdatavalid[0] = avm_mem_gmem_0_DDR_port_0_0_rw_readdatavalid;
   assign avm_mem_gmem_0_DDR_port_1_0_rw_read = gmem_ic_avm_read[1];
   assign avm_mem_gmem_0_DDR_port_1_0_rw_write = gmem_ic_avm_write[1];
   assign avm_mem_gmem_0_DDR_port_1_0_rw_burstcount = gmem_ic_avm_burstcount[1];
   assign avm_mem_gmem_0_DDR_port_1_0_rw_address = gmem_ic_avm_address[1];
   assign avm_mem_gmem_0_DDR_port_1_0_rw_writedata = gmem_ic_avm_writedata[1];
   assign avm_mem_gmem_0_DDR_port_1_0_rw_byteenable = gmem_ic_avm_byteenable[1];
   assign gmem_ic_avm_waitrequest[1] = avm_mem_gmem_0_DDR_port_1_0_rw_waitrequest;
   assign gmem_ic_avm_readdata[1] = avm_mem_gmem_0_DDR_port_1_0_rw_readdata;
   assign gmem_ic_avm_readdatavalid[1] = avm_mem_gmem_0_DDR_port_1_0_rw_readdatavalid;
   // INST cra_ring_wrapper_inst of cra_ring_wrapper
   cra_ring_wrapper cra_ring_wrapper_inst
   (
      .clock(clock),
      .resetn(resetn),
      // AVS cra_ring_root_avs
      .cra_ring_root_avs_enable(cra_ring_root_avs_enable),
      .cra_ring_root_avs_read(cra_ring_root_avs_read),
      .cra_ring_root_avs_write(cra_ring_root_avs_write),
      .cra_ring_root_avs_address(cra_ring_root_avs_address),
      .cra_ring_root_avs_writedata(cra_ring_root_avs_writedata),
      .cra_ring_root_avs_byteenable(cra_ring_root_avs_byteenable),
      .cra_ring_root_avs_waitrequest(cra_ring_root_avs_waitrequest),
      .cra_ring_root_avs_readdata(cra_ring_root_avs_readdata),
      .cra_ring_root_avs_readdatavalid(cra_ring_root_avs_readdatavalid),
      // AVM cra_ring_avm_0
      .cra_ring_avm_0_enable(cra_ring_node_avm_wire_0_enable),
      .cra_ring_avm_0_read(cra_ring_node_avm_wire_0_read),
      .cra_ring_avm_0_write(cra_ring_node_avm_wire_0_write),
      .cra_ring_avm_0_address(cra_ring_node_avm_wire_0_address),
      .cra_ring_avm_0_writedata(cra_ring_node_avm_wire_0_writedata),
      .cra_ring_avm_0_byteenable(cra_ring_node_avm_wire_0_byteenable),
      .cra_ring_avm_0_readdata(cra_ring_node_avm_wire_0_readdata),
      .cra_ring_avm_0_readdatavalid(cra_ring_node_avm_wire_0_readdatavalid),
      .cra_ring_avm_0_burstcount(cra_ring_node_avm_wire_0_burstcount),
      // AVM cra_ring_avm_1
      .cra_ring_avm_1_enable(cra_ring_node_avm_wire_1_enable),
      .cra_ring_avm_1_read(cra_ring_node_avm_wire_1_read),
      .cra_ring_avm_1_write(cra_ring_node_avm_wire_1_write),
      .cra_ring_avm_1_address(cra_ring_node_avm_wire_1_address),
      .cra_ring_avm_1_writedata(cra_ring_node_avm_wire_1_writedata),
      .cra_ring_avm_1_byteenable(cra_ring_node_avm_wire_1_byteenable),
      .cra_ring_avm_1_readdata(cra_ring_node_avm_wire_1_readdata),
      .cra_ring_avm_1_readdatavalid(cra_ring_node_avm_wire_1_readdatavalid),
      .cra_ring_avm_1_burstcount(cra_ring_node_avm_wire_1_burstcount)
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE k1_ZTS13MMstv3_cplusd_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module k1_ZTS13MMstv3_cplusd_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_k1_ZTS13MMstv3_cplusd,
   // AVS avs_k1_ZTS13MMstv3_cplusd_cra
   input logic avs_k1_ZTS13MMstv3_cplusd_cra_enable,
   input logic avs_k1_ZTS13MMstv3_cplusd_cra_read,
   input logic avs_k1_ZTS13MMstv3_cplusd_cra_write,
   input logic [4:0] avs_k1_ZTS13MMstv3_cplusd_cra_address,
   input logic [63:0] avs_k1_ZTS13MMstv3_cplusd_cra_writedata,
   input logic [7:0] avs_k1_ZTS13MMstv3_cplusd_cra_byteenable,
   output logic [63:0] avs_k1_ZTS13MMstv3_cplusd_cra_readdata,
   output logic avs_k1_ZTS13MMstv3_cplusd_cra_readdatavalid,
   // AVM k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd
   output logic k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_enable,
   output logic k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_read,
   output logic k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_write,
   output logic [32:0] k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_address,
   output logic [511:0] k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_writedata,
   output logic [63:0] k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_byteenable,
   input logic k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_waitrequest,
   input logic [511:0] k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_readdata,
   input logic k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_readdatavalid,
   output logic [4:0] k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_burstcount,
   input logic k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_writeack,
   // AVM k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd
   output logic k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_enable,
   output logic k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_read,
   output logic k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_write,
   output logic [32:0] k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_address,
   output logic [511:0] k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writedata,
   output logic [63:0] k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_byteenable,
   input logic k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_waitrequest,
   input logic [511:0] k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdata,
   input logic k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdatavalid,
   output logic [4:0] k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_burstcount,
   input logic k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writeack,
   // AVM k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd
   output logic k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_enable,
   output logic k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_read,
   output logic k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_write,
   output logic [32:0] k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_address,
   output logic [511:0] k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writedata,
   output logic [63:0] k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_byteenable,
   input logic k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_waitrequest,
   input logic [511:0] k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdata,
   input logic k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdatavalid,
   output logic [4:0] k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_burstcount,
   input logic k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writeack
);
   logic k1_ZTS13MMstv3_cplusd_start;
   logic [0:0] k1_ZTS13MMstv3_cplusd_start_chain;
   logic [0:0] k1_ZTS13MMstv3_cplusd_start_kernel_copy;
   logic [0:0] k1_ZTS13MMstv3_cplusd_start_task_fd;
   logic [0:0] k1_ZTS13MMstv3_cplusd_start_finish_element;
   logic k1_ZTS13MMstv3_cplusd_finish_sig;
   logic [0:0] k1_ZTS13MMstv3_cplusd_finish_kernel_copy;
   logic [0:0] k1_ZTS13MMstv3_cplusd_finish_chain;
   logic [63:0] k1_ZTS13MMstv3_cplusd_global_size [2:0];
   logic [31:0] k1_ZTS13MMstv3_cplusd_num_groups [2:0];
   logic [31:0] k1_ZTS13MMstv3_cplusd_local_size [2:0];
   logic [63:0] k1_ZTS13MMstv3_cplusd_global_offset [2:0];
   logic [31:0] k1_ZTS13MMstv3_cplusd_work_dim;
   logic [31:0] k1_ZTS13MMstv3_cplusd_wg_size;
   logic [0:0] k1_ZTS13MMstv3_cplusd_wg_disp_stall_in;
   logic [0:0] k1_ZTS13MMstv3_cplusd_wg_disp_stall_in_lookahead;
   logic [0:0] k1_ZTS13MMstv3_cplusd_wg_disp_valid_out;
   logic k1_ZTS13MMstv3_cplusd_wg_disp_start_out;
   logic [31:0] k1_ZTS13MMstv3_cplusd_wg_disp_group_id_out [2:0];
   logic [31:0] k1_ZTS13MMstv3_cplusd_wg_disp_global_id_base_out [2:0];
   logic k1_ZTS13MMstv3_cplusd_wg_disp_dispatched_all_groups;
   logic [63:0] k1_ZTS13MMstv3_cplusd_global_id [1][2:0];
   logic [31:0] k1_ZTS13MMstv3_cplusd_local_id [1][2:0];
   logic [31:0] k1_ZTS13MMstv3_cplusd_group_id [1][2:0];
   logic [0:0] k1_ZTS13MMstv3_cplusd_pending_write;
   logic [0:0] k1_ZTS13MMstv3_cplusd_lsu_active;
   logic [0:0] k1_ZTS13MMstv3_cplusd_valid_in;
   logic [0:0] k1_ZTS13MMstv3_cplusd_valid_out;
   logic [0:0] k1_ZTS13MMstv3_cplusd_stall_in;
   logic [0:0] k1_ZTS13MMstv3_cplusd_stall_out;
   logic k1_ZTS13MMstv3_cplusd_cra_pending_write;
   logic k1_ZTS13MMstv3_cplusd_cra_lsu_active;
   logic k1_ZTS13MMstv3_cplusd_cra_valid_in;
   logic [895:0] k1_ZTS13MMstv3_cplusd_kernel_arguments;

   assign k1_ZTS13MMstv3_cplusd_start_chain[0] = k1_ZTS13MMstv3_cplusd_start;
   assign k1_ZTS13MMstv3_cplusd_finish_chain[0] = 1'b1;
   assign k1_ZTS13MMstv3_cplusd_cra_pending_write = |k1_ZTS13MMstv3_cplusd_pending_write;
   assign k1_ZTS13MMstv3_cplusd_cra_lsu_active = |k1_ZTS13MMstv3_cplusd_lsu_active;
   assign k1_ZTS13MMstv3_cplusd_cra_valid_in = |k1_ZTS13MMstv3_cplusd_valid_in;
   assign k1_ZTS13MMstv3_cplusd_stall_in = 0;
   // INST k1_ZTS13MMstv3_cplusd_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   k1_ZTS13MMstv3_cplusd_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(k1_ZTS13MMstv3_cplusd_start),
      .num_groups(k1_ZTS13MMstv3_cplusd_num_groups),
      .local_size(k1_ZTS13MMstv3_cplusd_local_size),
      .stall_in(k1_ZTS13MMstv3_cplusd_wg_disp_stall_in),
      .stall_in_lookahead(k1_ZTS13MMstv3_cplusd_wg_disp_stall_in_lookahead),
      .valid_out(k1_ZTS13MMstv3_cplusd_wg_disp_valid_out),
      .group_id_out(k1_ZTS13MMstv3_cplusd_wg_disp_group_id_out),
      .global_id_base_out(k1_ZTS13MMstv3_cplusd_wg_disp_global_id_base_out),
      .start_out(k1_ZTS13MMstv3_cplusd_wg_disp_start_out),
      .dispatched_all_groups(k1_ZTS13MMstv3_cplusd_wg_disp_dispatched_all_groups)
   );

   // INST k1_ZTS13MMstv3_cplusd_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(19),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   k1_ZTS13MMstv3_cplusd_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(k1_ZTS13MMstv3_cplusd_start),
      .wg_size(k1_ZTS13MMstv3_cplusd_wg_size),
      .wg_dispatch_valid_out(k1_ZTS13MMstv3_cplusd_wg_disp_valid_out),
      .wg_dispatch_stall_in(k1_ZTS13MMstv3_cplusd_wg_disp_stall_in),
      .dispatched_all_groups(k1_ZTS13MMstv3_cplusd_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(k1_ZTS13MMstv3_cplusd_valid_out),
      .kernel_copy_stall_in(k1_ZTS13MMstv3_cplusd_stall_in),
      .pending_writes(k1_ZTS13MMstv3_cplusd_cra_pending_write),
      .finish(k1_ZTS13MMstv3_cplusd_finish_sig)
   );

   // INST k1_ZTS13MMstv3_cplusd_cra_agent_inst of k1_ZTS13MMstv3_cplusd_function_cra_agent
   k1_ZTS13MMstv3_cplusd_function_cra_agent k1_ZTS13MMstv3_cplusd_cra_agent_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(k1_ZTS13MMstv3_cplusd_start),
      .finish(k1_ZTS13MMstv3_cplusd_finish_sig),
      .global_offset_0(k1_ZTS13MMstv3_cplusd_global_offset[0]),
      .global_offset_1(k1_ZTS13MMstv3_cplusd_global_offset[1]),
      .global_offset_2(k1_ZTS13MMstv3_cplusd_global_offset[2]),
      .work_dim(k1_ZTS13MMstv3_cplusd_work_dim),
      .has_a_lsu_active(k1_ZTS13MMstv3_cplusd_cra_lsu_active),
      .has_a_write_pending(k1_ZTS13MMstv3_cplusd_cra_pending_write),
      .valid_in(k1_ZTS13MMstv3_cplusd_cra_valid_in),
      .global_size_0(k1_ZTS13MMstv3_cplusd_global_size[0]),
      .global_size_1(k1_ZTS13MMstv3_cplusd_global_size[1]),
      .global_size_2(k1_ZTS13MMstv3_cplusd_global_size[2]),
      .num_groups_0(k1_ZTS13MMstv3_cplusd_num_groups[0]),
      .num_groups_1(k1_ZTS13MMstv3_cplusd_num_groups[1]),
      .num_groups_2(k1_ZTS13MMstv3_cplusd_num_groups[2]),
      .local_size_0(k1_ZTS13MMstv3_cplusd_local_size[0]),
      .local_size_1(k1_ZTS13MMstv3_cplusd_local_size[1]),
      .local_size_2(k1_ZTS13MMstv3_cplusd_local_size[2]),
      .workgroup_size(k1_ZTS13MMstv3_cplusd_wg_size),
      .kernel_arguments(k1_ZTS13MMstv3_cplusd_kernel_arguments),
      .cra_irq(cra_irq_k1_ZTS13MMstv3_cplusd),
      // AVS avs_cra
      .avs_cra_enable(avs_k1_ZTS13MMstv3_cplusd_cra_enable),
      .avs_cra_read(avs_k1_ZTS13MMstv3_cplusd_cra_read),
      .avs_cra_write(avs_k1_ZTS13MMstv3_cplusd_cra_write),
      .avs_cra_address(avs_k1_ZTS13MMstv3_cplusd_cra_address),
      .avs_cra_writedata(avs_k1_ZTS13MMstv3_cplusd_cra_writedata),
      .avs_cra_byteenable(avs_k1_ZTS13MMstv3_cplusd_cra_byteenable),
      .avs_cra_readdata(avs_k1_ZTS13MMstv3_cplusd_cra_readdata),
      .avs_cra_readdatavalid(avs_k1_ZTS13MMstv3_cplusd_cra_readdatavalid)
   );

   // INST k1_ZTS13MMstv3_cplusd_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(32),
      .LOCAL_WIDTH_Y(32),
      .LOCAL_WIDTH_Z(32),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(1),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0),
      .USE_GLOBAL_WORK_OFFSET(1)
   )
   k1_ZTS13MMstv3_cplusd_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(k1_ZTS13MMstv3_cplusd_wg_disp_start_out),
      .valid_in(k1_ZTS13MMstv3_cplusd_wg_disp_valid_out[0]),
      .stall_out(k1_ZTS13MMstv3_cplusd_wg_disp_stall_in[0]),
      .stall_out_lookahead(k1_ZTS13MMstv3_cplusd_wg_disp_stall_in_lookahead[0]),
      .stall_in(k1_ZTS13MMstv3_cplusd_stall_out[0]),
      .valid_out(k1_ZTS13MMstv3_cplusd_valid_in[0]),
      .group_id_in(k1_ZTS13MMstv3_cplusd_wg_disp_group_id_out),
      .global_id_base_in(k1_ZTS13MMstv3_cplusd_wg_disp_global_id_base_out),
      .local_size(k1_ZTS13MMstv3_cplusd_local_size),
      .global_size(k1_ZTS13MMstv3_cplusd_global_size),
      .global_work_offset(k1_ZTS13MMstv3_cplusd_global_offset),
      .local_id(k1_ZTS13MMstv3_cplusd_local_id[0]),
      .global_id(k1_ZTS13MMstv3_cplusd_global_id[0]),
      .group_id(k1_ZTS13MMstv3_cplusd_group_id[0])
   );

   // INST k1_ZTS13MMstv3_cplusd_inst_0 of k1_ZTS13MMstv3_cplusd_top_wrapper_0
   k1_ZTS13MMstv3_cplusd_top_wrapper_0 k1_ZTS13MMstv3_cplusd_inst_0
   (
      .start(k1_ZTS13MMstv3_cplusd_start_kernel_copy[0]),
      .kernel_arguments(k1_ZTS13MMstv3_cplusd_kernel_arguments),
      .work_dim(k1_ZTS13MMstv3_cplusd_work_dim),
      .global_offset(k1_ZTS13MMstv3_cplusd_global_offset),
      .kernel_valid_out(k1_ZTS13MMstv3_cplusd_valid_out[0]),
      .has_a_write_pending(k1_ZTS13MMstv3_cplusd_pending_write[0]),
      .has_a_lsu_active(k1_ZTS13MMstv3_cplusd_lsu_active[0]),
      .global_id(k1_ZTS13MMstv3_cplusd_global_id[0]),
      .local_id(k1_ZTS13MMstv3_cplusd_local_id[0]),
      .group_id(k1_ZTS13MMstv3_cplusd_group_id[0]),
      .global_size(k1_ZTS13MMstv3_cplusd_global_size),
      .local_size(k1_ZTS13MMstv3_cplusd_local_size),
      .num_groups(k1_ZTS13MMstv3_cplusd_num_groups),
      .workgroup_size(k1_ZTS13MMstv3_cplusd_wg_size),
      .kernel_stall_out(k1_ZTS13MMstv3_cplusd_stall_out[0]),
      .kernel_valid_in(k1_ZTS13MMstv3_cplusd_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memdep_k1_ZTS13MMstv3_cplusd
      .avm_memdep_k1_ZTS13MMstv3_cplusd_enable(k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_enable),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_read(k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_read),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_write(k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_write),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_address(k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_address),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_writedata(k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_writedata),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_byteenable(k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_byteenable),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_waitrequest(k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_waitrequest),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_readdata(k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_readdata),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_readdatavalid(k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_readdatavalid),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_burstcount(k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_burstcount),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_writeack(k1_ZTS13MMstv3_cplusd_0_avm_memdep_k1_ZTS13MMstv3_cplusd_writeack),
      // AVM avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_enable(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_enable),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_read(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_read),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_write(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_write),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_address(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_address),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writedata(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writedata),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_byteenable(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_byteenable),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_waitrequest(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_waitrequest),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdata(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdata),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdatavalid(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdatavalid),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_burstcount(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_burstcount),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writeack(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writeack),
      // AVM avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_enable(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_enable),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_read(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_read),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_write(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_write),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_address(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_address),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writedata(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writedata),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_byteenable(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_byteenable),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_waitrequest(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_waitrequest),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdata(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdata),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdatavalid(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdatavalid),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_burstcount(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_burstcount),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writeack(k1_ZTS13MMstv3_cplusd_0_avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writeack)
   );

   // INST k1_ZTS13MMstv3_cplusd_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   k1_ZTS13MMstv3_cplusd_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(k1_ZTS13MMstv3_cplusd_start_chain[0]),
      .start_kernel(k1_ZTS13MMstv3_cplusd_start_kernel_copy[0]),
      .start_finish_detector(k1_ZTS13MMstv3_cplusd_start_task_fd[0]),
      .start_finish_chain_element(k1_ZTS13MMstv3_cplusd_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE k0_ZTS6MMstv3_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module k0_ZTS6MMstv3_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_k0_ZTS6MMstv3,
   // AVS avs_k0_ZTS6MMstv3_cra
   input logic avs_k0_ZTS6MMstv3_cra_enable,
   input logic avs_k0_ZTS6MMstv3_cra_read,
   input logic avs_k0_ZTS6MMstv3_cra_write,
   input logic [5:0] avs_k0_ZTS6MMstv3_cra_address,
   input logic [63:0] avs_k0_ZTS6MMstv3_cra_writedata,
   input logic [7:0] avs_k0_ZTS6MMstv3_cra_byteenable,
   output logic [63:0] avs_k0_ZTS6MMstv3_cra_readdata,
   output logic avs_k0_ZTS6MMstv3_cra_readdatavalid,
   // AVM k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3
   output logic k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_enable,
   output logic k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_read,
   output logic k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_write,
   output logic [32:0] k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_address,
   output logic [511:0] k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_writedata,
   output logic [63:0] k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_byteenable,
   input logic k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_waitrequest,
   input logic [511:0] k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_readdata,
   input logic k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_readdatavalid,
   output logic [4:0] k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_burstcount,
   input logic k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_writeack,
   // AVM k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3
   output logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_enable,
   output logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_read,
   output logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_write,
   output logic [32:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_address,
   output logic [511:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writedata,
   output logic [63:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_byteenable,
   input logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_waitrequest,
   input logic [511:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdata,
   input logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdatavalid,
   output logic [4:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_burstcount,
   input logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writeack,
   // AVM k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3
   output logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_enable,
   output logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_read,
   output logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_write,
   output logic [32:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_address,
   output logic [511:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writedata,
   output logic [63:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_byteenable,
   input logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_waitrequest,
   input logic [511:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdata,
   input logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdatavalid,
   output logic [4:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_burstcount,
   input logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writeack,
   // AVM k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3
   output logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_enable,
   output logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_read,
   output logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_write,
   output logic [32:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_address,
   output logic [511:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writedata,
   output logic [63:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_byteenable,
   input logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_waitrequest,
   input logic [511:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdata,
   input logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdatavalid,
   output logic [4:0] k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_burstcount,
   input logic k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writeack
);
   logic k0_ZTS6MMstv3_start;
   logic [0:0] k0_ZTS6MMstv3_start_chain;
   logic [0:0] k0_ZTS6MMstv3_start_kernel_copy;
   logic [0:0] k0_ZTS6MMstv3_start_task_fd;
   logic [0:0] k0_ZTS6MMstv3_start_finish_element;
   logic k0_ZTS6MMstv3_finish_sig;
   logic [0:0] k0_ZTS6MMstv3_finish_kernel_copy;
   logic [0:0] k0_ZTS6MMstv3_finish_chain;
   logic [63:0] k0_ZTS6MMstv3_global_size [2:0];
   logic [31:0] k0_ZTS6MMstv3_num_groups [2:0];
   logic [31:0] k0_ZTS6MMstv3_local_size [2:0];
   logic [63:0] k0_ZTS6MMstv3_global_offset [2:0];
   logic [31:0] k0_ZTS6MMstv3_work_dim;
   logic [31:0] k0_ZTS6MMstv3_wg_size;
   logic [0:0] k0_ZTS6MMstv3_wg_disp_stall_in;
   logic [0:0] k0_ZTS6MMstv3_wg_disp_stall_in_lookahead;
   logic [0:0] k0_ZTS6MMstv3_wg_disp_valid_out;
   logic k0_ZTS6MMstv3_wg_disp_start_out;
   logic [31:0] k0_ZTS6MMstv3_wg_disp_group_id_out [2:0];
   logic [31:0] k0_ZTS6MMstv3_wg_disp_global_id_base_out [2:0];
   logic k0_ZTS6MMstv3_wg_disp_dispatched_all_groups;
   logic [63:0] k0_ZTS6MMstv3_global_id [1][2:0];
   logic [31:0] k0_ZTS6MMstv3_local_id [1][2:0];
   logic [31:0] k0_ZTS6MMstv3_group_id [1][2:0];
   logic [0:0] k0_ZTS6MMstv3_pending_write;
   logic [0:0] k0_ZTS6MMstv3_lsu_active;
   logic [0:0] k0_ZTS6MMstv3_valid_in;
   logic [0:0] k0_ZTS6MMstv3_valid_out;
   logic [0:0] k0_ZTS6MMstv3_stall_in;
   logic [0:0] k0_ZTS6MMstv3_stall_out;
   logic k0_ZTS6MMstv3_cra_pending_write;
   logic k0_ZTS6MMstv3_cra_lsu_active;
   logic k0_ZTS6MMstv3_cra_valid_in;
   logic [1343:0] k0_ZTS6MMstv3_kernel_arguments;

   assign k0_ZTS6MMstv3_start_chain[0] = k0_ZTS6MMstv3_start;
   assign k0_ZTS6MMstv3_finish_chain[0] = 1'b1;
   assign k0_ZTS6MMstv3_cra_pending_write = |k0_ZTS6MMstv3_pending_write;
   assign k0_ZTS6MMstv3_cra_lsu_active = |k0_ZTS6MMstv3_lsu_active;
   assign k0_ZTS6MMstv3_cra_valid_in = |k0_ZTS6MMstv3_valid_in;
   assign k0_ZTS6MMstv3_stall_in = 0;
   // INST k0_ZTS6MMstv3_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   k0_ZTS6MMstv3_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(k0_ZTS6MMstv3_start),
      .num_groups(k0_ZTS6MMstv3_num_groups),
      .local_size(k0_ZTS6MMstv3_local_size),
      .stall_in(k0_ZTS6MMstv3_wg_disp_stall_in),
      .stall_in_lookahead(k0_ZTS6MMstv3_wg_disp_stall_in_lookahead),
      .valid_out(k0_ZTS6MMstv3_wg_disp_valid_out),
      .group_id_out(k0_ZTS6MMstv3_wg_disp_group_id_out),
      .global_id_base_out(k0_ZTS6MMstv3_wg_disp_global_id_base_out),
      .start_out(k0_ZTS6MMstv3_wg_disp_start_out),
      .dispatched_all_groups(k0_ZTS6MMstv3_wg_disp_dispatched_all_groups)
   );

   // INST k0_ZTS6MMstv3_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(19),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   k0_ZTS6MMstv3_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(k0_ZTS6MMstv3_start),
      .wg_size(k0_ZTS6MMstv3_wg_size),
      .wg_dispatch_valid_out(k0_ZTS6MMstv3_wg_disp_valid_out),
      .wg_dispatch_stall_in(k0_ZTS6MMstv3_wg_disp_stall_in),
      .dispatched_all_groups(k0_ZTS6MMstv3_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(k0_ZTS6MMstv3_valid_out),
      .kernel_copy_stall_in(k0_ZTS6MMstv3_stall_in),
      .pending_writes(k0_ZTS6MMstv3_cra_pending_write),
      .finish(k0_ZTS6MMstv3_finish_sig)
   );

   // INST k0_ZTS6MMstv3_cra_agent_inst of k0_ZTS6MMstv3_function_cra_agent
   k0_ZTS6MMstv3_function_cra_agent k0_ZTS6MMstv3_cra_agent_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(k0_ZTS6MMstv3_start),
      .finish(k0_ZTS6MMstv3_finish_sig),
      .global_offset_0(k0_ZTS6MMstv3_global_offset[0]),
      .global_offset_1(k0_ZTS6MMstv3_global_offset[1]),
      .global_offset_2(k0_ZTS6MMstv3_global_offset[2]),
      .work_dim(k0_ZTS6MMstv3_work_dim),
      .has_a_lsu_active(k0_ZTS6MMstv3_cra_lsu_active),
      .has_a_write_pending(k0_ZTS6MMstv3_cra_pending_write),
      .valid_in(k0_ZTS6MMstv3_cra_valid_in),
      .global_size_0(k0_ZTS6MMstv3_global_size[0]),
      .global_size_1(k0_ZTS6MMstv3_global_size[1]),
      .global_size_2(k0_ZTS6MMstv3_global_size[2]),
      .num_groups_0(k0_ZTS6MMstv3_num_groups[0]),
      .num_groups_1(k0_ZTS6MMstv3_num_groups[1]),
      .num_groups_2(k0_ZTS6MMstv3_num_groups[2]),
      .local_size_0(k0_ZTS6MMstv3_local_size[0]),
      .local_size_1(k0_ZTS6MMstv3_local_size[1]),
      .local_size_2(k0_ZTS6MMstv3_local_size[2]),
      .workgroup_size(k0_ZTS6MMstv3_wg_size),
      .kernel_arguments(k0_ZTS6MMstv3_kernel_arguments),
      .cra_irq(cra_irq_k0_ZTS6MMstv3),
      // AVS avs_cra
      .avs_cra_enable(avs_k0_ZTS6MMstv3_cra_enable),
      .avs_cra_read(avs_k0_ZTS6MMstv3_cra_read),
      .avs_cra_write(avs_k0_ZTS6MMstv3_cra_write),
      .avs_cra_address(avs_k0_ZTS6MMstv3_cra_address),
      .avs_cra_writedata(avs_k0_ZTS6MMstv3_cra_writedata),
      .avs_cra_byteenable(avs_k0_ZTS6MMstv3_cra_byteenable),
      .avs_cra_readdata(avs_k0_ZTS6MMstv3_cra_readdata),
      .avs_cra_readdatavalid(avs_k0_ZTS6MMstv3_cra_readdatavalid)
   );

   // INST k0_ZTS6MMstv3_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(1),
      .LOCAL_WIDTH_Y(1),
      .LOCAL_WIDTH_Z(1),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(1),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0),
      .USE_GLOBAL_WORK_OFFSET(1)
   )
   k0_ZTS6MMstv3_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(k0_ZTS6MMstv3_wg_disp_start_out),
      .valid_in(k0_ZTS6MMstv3_wg_disp_valid_out[0]),
      .stall_out(k0_ZTS6MMstv3_wg_disp_stall_in[0]),
      .stall_out_lookahead(k0_ZTS6MMstv3_wg_disp_stall_in_lookahead[0]),
      .stall_in(k0_ZTS6MMstv3_stall_out[0]),
      .valid_out(k0_ZTS6MMstv3_valid_in[0]),
      .group_id_in(k0_ZTS6MMstv3_wg_disp_group_id_out),
      .global_id_base_in(k0_ZTS6MMstv3_wg_disp_global_id_base_out),
      .local_size(k0_ZTS6MMstv3_local_size),
      .global_size(k0_ZTS6MMstv3_global_size),
      .global_work_offset(k0_ZTS6MMstv3_global_offset),
      .local_id(k0_ZTS6MMstv3_local_id[0]),
      .global_id(k0_ZTS6MMstv3_global_id[0]),
      .group_id(k0_ZTS6MMstv3_group_id[0])
   );

   // INST k0_ZTS6MMstv3_inst_0 of k0_ZTS6MMstv3_top_wrapper_0
   k0_ZTS6MMstv3_top_wrapper_0 k0_ZTS6MMstv3_inst_0
   (
      .start(k0_ZTS6MMstv3_start_kernel_copy[0]),
      .kernel_arguments(k0_ZTS6MMstv3_kernel_arguments),
      .work_dim(k0_ZTS6MMstv3_work_dim),
      .global_offset(k0_ZTS6MMstv3_global_offset),
      .kernel_valid_out(k0_ZTS6MMstv3_valid_out[0]),
      .has_a_write_pending(k0_ZTS6MMstv3_pending_write[0]),
      .has_a_lsu_active(k0_ZTS6MMstv3_lsu_active[0]),
      .global_id(k0_ZTS6MMstv3_global_id[0]),
      .local_id(k0_ZTS6MMstv3_local_id[0]),
      .group_id(k0_ZTS6MMstv3_group_id[0]),
      .global_size(k0_ZTS6MMstv3_global_size),
      .local_size(k0_ZTS6MMstv3_local_size),
      .num_groups(k0_ZTS6MMstv3_num_groups),
      .workgroup_size(k0_ZTS6MMstv3_wg_size),
      .kernel_stall_out(k0_ZTS6MMstv3_stall_out[0]),
      .kernel_valid_in(k0_ZTS6MMstv3_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memdep_18_k0_ZTS6MMstv3
      .avm_memdep_18_k0_ZTS6MMstv3_enable(k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_enable),
      .avm_memdep_18_k0_ZTS6MMstv3_read(k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_read),
      .avm_memdep_18_k0_ZTS6MMstv3_write(k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_write),
      .avm_memdep_18_k0_ZTS6MMstv3_address(k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_address),
      .avm_memdep_18_k0_ZTS6MMstv3_writedata(k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_writedata),
      .avm_memdep_18_k0_ZTS6MMstv3_byteenable(k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_byteenable),
      .avm_memdep_18_k0_ZTS6MMstv3_waitrequest(k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_waitrequest),
      .avm_memdep_18_k0_ZTS6MMstv3_readdata(k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_readdata),
      .avm_memdep_18_k0_ZTS6MMstv3_readdatavalid(k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_readdatavalid),
      .avm_memdep_18_k0_ZTS6MMstv3_burstcount(k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_burstcount),
      .avm_memdep_18_k0_ZTS6MMstv3_writeack(k0_ZTS6MMstv3_0_avm_memdep_18_k0_ZTS6MMstv3_writeack),
      // AVM avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_enable(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_enable),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_read(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_read),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_write(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_write),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_address(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_address),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writedata(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writedata),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_byteenable(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_byteenable),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_waitrequest(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_waitrequest),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdata(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdata),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdatavalid(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdatavalid),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_burstcount(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_burstcount),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writeack(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writeack),
      // AVM avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_enable(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_enable),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_read(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_read),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_write(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_write),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_address(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_address),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writedata(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writedata),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_byteenable(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_byteenable),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_waitrequest(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_waitrequest),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdata(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdata),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdatavalid(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdatavalid),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_burstcount(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_burstcount),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writeack(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writeack),
      // AVM avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_enable(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_enable),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_read(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_read),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_write(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_write),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_address(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_address),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writedata(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writedata),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_byteenable(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_byteenable),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_waitrequest(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_waitrequest),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdata(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdata),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdatavalid(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdatavalid),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_burstcount(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_burstcount),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writeack(k0_ZTS6MMstv3_0_avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writeack)
   );

   // INST k0_ZTS6MMstv3_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   k0_ZTS6MMstv3_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(k0_ZTS6MMstv3_start_chain[0]),
      .start_kernel(k0_ZTS6MMstv3_start_kernel_copy[0]),
      .start_finish_detector(k0_ZTS6MMstv3_start_task_fd[0]),
      .start_finish_chain_element(k0_ZTS6MMstv3_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE k1_ZTS13MMstv3_cplusd_top_wrapper_0
/////////////////////////////////////////////////////////////////
module k1_ZTS13MMstv3_cplusd_top_wrapper_0
(
   input logic start,
   input logic [895:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [63:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [63:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [63:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_memdep_k1_ZTS13MMstv3_cplusd
   output logic avm_memdep_k1_ZTS13MMstv3_cplusd_enable,
   output logic avm_memdep_k1_ZTS13MMstv3_cplusd_read,
   output logic avm_memdep_k1_ZTS13MMstv3_cplusd_write,
   output logic [32:0] avm_memdep_k1_ZTS13MMstv3_cplusd_address,
   output logic [511:0] avm_memdep_k1_ZTS13MMstv3_cplusd_writedata,
   output logic [63:0] avm_memdep_k1_ZTS13MMstv3_cplusd_byteenable,
   input logic avm_memdep_k1_ZTS13MMstv3_cplusd_waitrequest,
   input logic [511:0] avm_memdep_k1_ZTS13MMstv3_cplusd_readdata,
   input logic avm_memdep_k1_ZTS13MMstv3_cplusd_readdatavalid,
   output logic [4:0] avm_memdep_k1_ZTS13MMstv3_cplusd_burstcount,
   input logic avm_memdep_k1_ZTS13MMstv3_cplusd_writeack,
   // AVM avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd
   output logic avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_enable,
   output logic avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_read,
   output logic avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_write,
   output logic [32:0] avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_address,
   output logic [511:0] avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writedata,
   output logic [63:0] avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_byteenable,
   input logic avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_waitrequest,
   input logic [511:0] avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdata,
   input logic avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdatavalid,
   output logic [4:0] avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_burstcount,
   input logic avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writeack,
   // AVM avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd
   output logic avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_enable,
   output logic avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_read,
   output logic avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_write,
   output logic [32:0] avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_address,
   output logic [511:0] avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writedata,
   output logic [63:0] avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_byteenable,
   input logic avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_waitrequest,
   input logic [511:0] avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdata,
   input logic avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdatavalid,
   output logic [4:0] avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_burstcount,
   input logic avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writeack
);
   logic lmem_invalid_single_bit;

   // INST kernel of k1_ZTS13MMstv3_cplusd_function_wrapper
   k1_ZTS13MMstv3_cplusd_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memdep_k1_ZTS13MMstv3_cplusd
      .avm_memdep_k1_ZTS13MMstv3_cplusd_enable(avm_memdep_k1_ZTS13MMstv3_cplusd_enable),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_read(avm_memdep_k1_ZTS13MMstv3_cplusd_read),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_write(avm_memdep_k1_ZTS13MMstv3_cplusd_write),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_address(avm_memdep_k1_ZTS13MMstv3_cplusd_address),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_writedata(avm_memdep_k1_ZTS13MMstv3_cplusd_writedata),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_byteenable(avm_memdep_k1_ZTS13MMstv3_cplusd_byteenable),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_waitrequest(avm_memdep_k1_ZTS13MMstv3_cplusd_waitrequest),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_readdata(avm_memdep_k1_ZTS13MMstv3_cplusd_readdata),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_readdatavalid(avm_memdep_k1_ZTS13MMstv3_cplusd_readdatavalid),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_burstcount(avm_memdep_k1_ZTS13MMstv3_cplusd_burstcount),
      .avm_memdep_k1_ZTS13MMstv3_cplusd_writeack(avm_memdep_k1_ZTS13MMstv3_cplusd_writeack),
      // AVM avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_enable(avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_enable),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_read(avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_read),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_write(avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_write),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_address(avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_address),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writedata(avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writedata),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_byteenable(avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_byteenable),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_waitrequest(avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_waitrequest),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdata(avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdata),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdatavalid(avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_readdatavalid),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_burstcount(avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_burstcount),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writeack(avm_unnamed_k1_ZTS13MMstv3_cplusd7_k1_ZTS13MMstv3_cplusd_writeack),
      // AVM avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_enable(avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_enable),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_read(avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_read),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_write(avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_write),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_address(avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_address),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writedata(avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writedata),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_byteenable(avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_byteenable),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_waitrequest(avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_waitrequest),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdata(avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdata),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdatavalid(avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_readdatavalid),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_burstcount(avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_burstcount),
      .avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writeack(avm_unnamed_k1_ZTS13MMstv3_cplusd8_k1_ZTS13MMstv3_cplusd_writeack)
   );

   assign lmem_invalid_single_bit = 'b0;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE k0_ZTS6MMstv3_top_wrapper_0
/////////////////////////////////////////////////////////////////
module k0_ZTS6MMstv3_top_wrapper_0
(
   input logic start,
   input logic [1343:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [63:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [63:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [63:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_memdep_18_k0_ZTS6MMstv3
   output logic avm_memdep_18_k0_ZTS6MMstv3_enable,
   output logic avm_memdep_18_k0_ZTS6MMstv3_read,
   output logic avm_memdep_18_k0_ZTS6MMstv3_write,
   output logic [32:0] avm_memdep_18_k0_ZTS6MMstv3_address,
   output logic [511:0] avm_memdep_18_k0_ZTS6MMstv3_writedata,
   output logic [63:0] avm_memdep_18_k0_ZTS6MMstv3_byteenable,
   input logic avm_memdep_18_k0_ZTS6MMstv3_waitrequest,
   input logic [511:0] avm_memdep_18_k0_ZTS6MMstv3_readdata,
   input logic avm_memdep_18_k0_ZTS6MMstv3_readdatavalid,
   output logic [4:0] avm_memdep_18_k0_ZTS6MMstv3_burstcount,
   input logic avm_memdep_18_k0_ZTS6MMstv3_writeack,
   // AVM avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3
   output logic avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_enable,
   output logic avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_read,
   output logic avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_write,
   output logic [32:0] avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_address,
   output logic [511:0] avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writedata,
   output logic [63:0] avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_byteenable,
   input logic avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_waitrequest,
   input logic [511:0] avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdata,
   input logic avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdatavalid,
   output logic [4:0] avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_burstcount,
   input logic avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writeack,
   // AVM avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3
   output logic avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_enable,
   output logic avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_read,
   output logic avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_write,
   output logic [32:0] avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_address,
   output logic [511:0] avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writedata,
   output logic [63:0] avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_byteenable,
   input logic avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_waitrequest,
   input logic [511:0] avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdata,
   input logic avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdatavalid,
   output logic [4:0] avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_burstcount,
   input logic avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writeack,
   // AVM avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3
   output logic avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_enable,
   output logic avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_read,
   output logic avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_write,
   output logic [32:0] avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_address,
   output logic [511:0] avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writedata,
   output logic [63:0] avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_byteenable,
   input logic avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_waitrequest,
   input logic [511:0] avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdata,
   input logic avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdatavalid,
   output logic [4:0] avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_burstcount,
   input logic avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writeack
);
   genvar __i;
   genvar __j;
   genvar __k;
   genvar __l;
   logic lmem_invalid_single_bit;
   logic [2:0] lmem_invalid_aspaces;
   logic local_avm_aspace64_enable [1][2];
   logic local_avm_aspace64_read [1][2];
   logic local_avm_aspace64_write [1][2];
   logic [31:0] local_avm_aspace64_address [1][2];
   logic [511:0] local_avm_aspace64_writedata [1][2];
   logic [63:0] local_avm_aspace64_byteenable [1][2];
   logic local_avm_aspace64_waitrequest [1][2];
   logic [511:0] local_avm_aspace64_readdata [1][2];
   logic local_avm_aspace64_readdatavalid [1][2];
   logic local_avm_aspace64_burstcount [1][2];
   logic local_avm_aspace64_writeack [1][2];
   logic local_avm_aspace65_enable [1][2];
   logic local_avm_aspace65_read [1][2];
   logic local_avm_aspace65_write [1][2];
   logic [31:0] local_avm_aspace65_address [1][2];
   logic [511:0] local_avm_aspace65_writedata [1][2];
   logic [63:0] local_avm_aspace65_byteenable [1][2];
   logic local_avm_aspace65_waitrequest [1][2];
   logic [511:0] local_avm_aspace65_readdata [1][2];
   logic local_avm_aspace65_readdatavalid [1][2];
   logic local_avm_aspace65_burstcount [1][2];
   logic local_avm_aspace65_writeack [1][2];
   logic local_avm_aspace66_enable [1][4];
   logic local_avm_aspace66_read [1][4];
   logic local_avm_aspace66_write [1][4];
   logic [31:0] local_avm_aspace66_address [1][4];
   logic [511:0] local_avm_aspace66_writedata [1][4];
   logic [63:0] local_avm_aspace66_byteenable [1][4];
   logic local_avm_aspace66_waitrequest [1][4];
   logic [511:0] local_avm_aspace66_readdata [1][4];
   logic local_avm_aspace66_readdatavalid [1][4];
   logic local_avm_aspace66_burstcount [1][4];
   logic local_avm_aspace66_writeack [1][4];

   // INST kernel of k0_ZTS6MMstv3_function_wrapper
   k0_ZTS6MMstv3_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_memdep_18_k0_ZTS6MMstv3
      .avm_memdep_18_k0_ZTS6MMstv3_enable(avm_memdep_18_k0_ZTS6MMstv3_enable),
      .avm_memdep_18_k0_ZTS6MMstv3_read(avm_memdep_18_k0_ZTS6MMstv3_read),
      .avm_memdep_18_k0_ZTS6MMstv3_write(avm_memdep_18_k0_ZTS6MMstv3_write),
      .avm_memdep_18_k0_ZTS6MMstv3_address(avm_memdep_18_k0_ZTS6MMstv3_address),
      .avm_memdep_18_k0_ZTS6MMstv3_writedata(avm_memdep_18_k0_ZTS6MMstv3_writedata),
      .avm_memdep_18_k0_ZTS6MMstv3_byteenable(avm_memdep_18_k0_ZTS6MMstv3_byteenable),
      .avm_memdep_18_k0_ZTS6MMstv3_waitrequest(avm_memdep_18_k0_ZTS6MMstv3_waitrequest),
      .avm_memdep_18_k0_ZTS6MMstv3_readdata(avm_memdep_18_k0_ZTS6MMstv3_readdata),
      .avm_memdep_18_k0_ZTS6MMstv3_readdatavalid(avm_memdep_18_k0_ZTS6MMstv3_readdatavalid),
      .avm_memdep_18_k0_ZTS6MMstv3_burstcount(avm_memdep_18_k0_ZTS6MMstv3_burstcount),
      .avm_memdep_18_k0_ZTS6MMstv3_writeack(avm_memdep_18_k0_ZTS6MMstv3_writeack),
      // AVM avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_enable(avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_enable),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_read(avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_read),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_write(avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_write),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_address(avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_address),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writedata(avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writedata),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_byteenable(avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_byteenable),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_waitrequest(avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_waitrequest),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdata(avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdata),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdatavalid(avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_readdatavalid),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_burstcount(avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_burstcount),
      .avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writeack(avm_unnamed_k0_ZTS6MMstv318_k0_ZTS6MMstv3_writeack),
      // AVM avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_enable(avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_enable),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_read(avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_read),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_write(avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_write),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_address(avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_address),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writedata(avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writedata),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_byteenable(avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_byteenable),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_waitrequest(avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_waitrequest),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdata(avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdata),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdatavalid(avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_readdatavalid),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_burstcount(avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_burstcount),
      .avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writeack(avm_unnamed_k0_ZTS6MMstv319_k0_ZTS6MMstv3_writeack),
      // AVM avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_enable(avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_enable),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_read(avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_read),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_write(avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_write),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_address(avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_address),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writedata(avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writedata),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_byteenable(avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_byteenable),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_waitrequest(avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_waitrequest),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdata(avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdata),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdatavalid(avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_readdatavalid),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_burstcount(avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_burstcount),
      .avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writeack(avm_unnamed_k0_ZTS6MMstv320_k0_ZTS6MMstv3_writeack),
      // AVM avm_memdep_k0_ZTS6MMstv3
      .avm_memdep_k0_ZTS6MMstv3_enable(local_avm_aspace64_enable[0][0]),
      .avm_memdep_k0_ZTS6MMstv3_read(local_avm_aspace64_read[0][0]),
      .avm_memdep_k0_ZTS6MMstv3_write(local_avm_aspace64_write[0][0]),
      .avm_memdep_k0_ZTS6MMstv3_address(local_avm_aspace64_address[0][0]),
      .avm_memdep_k0_ZTS6MMstv3_writedata(local_avm_aspace64_writedata[0][0]),
      .avm_memdep_k0_ZTS6MMstv3_byteenable(local_avm_aspace64_byteenable[0][0]),
      .avm_memdep_k0_ZTS6MMstv3_waitrequest(local_avm_aspace64_waitrequest[0][0]),
      .avm_memdep_k0_ZTS6MMstv3_readdata(local_avm_aspace64_readdata[0][0]),
      .avm_memdep_k0_ZTS6MMstv3_readdatavalid(local_avm_aspace64_readdatavalid[0][0]),
      .avm_memdep_k0_ZTS6MMstv3_burstcount(local_avm_aspace64_burstcount[0][0]),
      .avm_memdep_k0_ZTS6MMstv3_writeack(local_avm_aspace64_writeack[0][0]),
      // AVM avm_unnamed_k0_ZTS6MMstv325_k0_ZTS6MMstv3
      .avm_unnamed_k0_ZTS6MMstv325_k0_ZTS6MMstv3_enable(local_avm_aspace64_enable[0][1]),
      .avm_unnamed_k0_ZTS6MMstv325_k0_ZTS6MMstv3_read(local_avm_aspace64_read[0][1]),
      .avm_unnamed_k0_ZTS6MMstv325_k0_ZTS6MMstv3_write(local_avm_aspace64_write[0][1]),
      .avm_unnamed_k0_ZTS6MMstv325_k0_ZTS6MMstv3_address(local_avm_aspace64_address[0][1]),
      .avm_unnamed_k0_ZTS6MMstv325_k0_ZTS6MMstv3_writedata(local_avm_aspace64_writedata[0][1]),
      .avm_unnamed_k0_ZTS6MMstv325_k0_ZTS6MMstv3_byteenable(local_avm_aspace64_byteenable[0][1]),
      .avm_unnamed_k0_ZTS6MMstv325_k0_ZTS6MMstv3_waitrequest(local_avm_aspace64_waitrequest[0][1]),
      .avm_unnamed_k0_ZTS6MMstv325_k0_ZTS6MMstv3_readdata(local_avm_aspace64_readdata[0][1]),
      .avm_unnamed_k0_ZTS6MMstv325_k0_ZTS6MMstv3_readdatavalid(local_avm_aspace64_readdatavalid[0][1]),
      .avm_unnamed_k0_ZTS6MMstv325_k0_ZTS6MMstv3_burstcount(local_avm_aspace64_burstcount[0][1]),
      .avm_unnamed_k0_ZTS6MMstv325_k0_ZTS6MMstv3_writeack(local_avm_aspace64_writeack[0][1]),
      // AVM avm_memdep_1_k0_ZTS6MMstv3
      .avm_memdep_1_k0_ZTS6MMstv3_enable(local_avm_aspace65_enable[0][0]),
      .avm_memdep_1_k0_ZTS6MMstv3_read(local_avm_aspace65_read[0][0]),
      .avm_memdep_1_k0_ZTS6MMstv3_write(local_avm_aspace65_write[0][0]),
      .avm_memdep_1_k0_ZTS6MMstv3_address(local_avm_aspace65_address[0][0]),
      .avm_memdep_1_k0_ZTS6MMstv3_writedata(local_avm_aspace65_writedata[0][0]),
      .avm_memdep_1_k0_ZTS6MMstv3_byteenable(local_avm_aspace65_byteenable[0][0]),
      .avm_memdep_1_k0_ZTS6MMstv3_waitrequest(local_avm_aspace65_waitrequest[0][0]),
      .avm_memdep_1_k0_ZTS6MMstv3_readdata(local_avm_aspace65_readdata[0][0]),
      .avm_memdep_1_k0_ZTS6MMstv3_readdatavalid(local_avm_aspace65_readdatavalid[0][0]),
      .avm_memdep_1_k0_ZTS6MMstv3_burstcount(local_avm_aspace65_burstcount[0][0]),
      .avm_memdep_1_k0_ZTS6MMstv3_writeack(local_avm_aspace65_writeack[0][0]),
      // AVM avm_unnamed_k0_ZTS6MMstv327_k0_ZTS6MMstv3
      .avm_unnamed_k0_ZTS6MMstv327_k0_ZTS6MMstv3_enable(local_avm_aspace65_enable[0][1]),
      .avm_unnamed_k0_ZTS6MMstv327_k0_ZTS6MMstv3_read(local_avm_aspace65_read[0][1]),
      .avm_unnamed_k0_ZTS6MMstv327_k0_ZTS6MMstv3_write(local_avm_aspace65_write[0][1]),
      .avm_unnamed_k0_ZTS6MMstv327_k0_ZTS6MMstv3_address(local_avm_aspace65_address[0][1]),
      .avm_unnamed_k0_ZTS6MMstv327_k0_ZTS6MMstv3_writedata(local_avm_aspace65_writedata[0][1]),
      .avm_unnamed_k0_ZTS6MMstv327_k0_ZTS6MMstv3_byteenable(local_avm_aspace65_byteenable[0][1]),
      .avm_unnamed_k0_ZTS6MMstv327_k0_ZTS6MMstv3_waitrequest(local_avm_aspace65_waitrequest[0][1]),
      .avm_unnamed_k0_ZTS6MMstv327_k0_ZTS6MMstv3_readdata(local_avm_aspace65_readdata[0][1]),
      .avm_unnamed_k0_ZTS6MMstv327_k0_ZTS6MMstv3_readdatavalid(local_avm_aspace65_readdatavalid[0][1]),
      .avm_unnamed_k0_ZTS6MMstv327_k0_ZTS6MMstv3_burstcount(local_avm_aspace65_burstcount[0][1]),
      .avm_unnamed_k0_ZTS6MMstv327_k0_ZTS6MMstv3_writeack(local_avm_aspace65_writeack[0][1]),
      // AVM avm_memdep_11_k0_ZTS6MMstv3
      .avm_memdep_11_k0_ZTS6MMstv3_enable(local_avm_aspace66_enable[0][0]),
      .avm_memdep_11_k0_ZTS6MMstv3_read(local_avm_aspace66_read[0][0]),
      .avm_memdep_11_k0_ZTS6MMstv3_write(local_avm_aspace66_write[0][0]),
      .avm_memdep_11_k0_ZTS6MMstv3_address(local_avm_aspace66_address[0][0]),
      .avm_memdep_11_k0_ZTS6MMstv3_writedata(local_avm_aspace66_writedata[0][0]),
      .avm_memdep_11_k0_ZTS6MMstv3_byteenable(local_avm_aspace66_byteenable[0][0]),
      .avm_memdep_11_k0_ZTS6MMstv3_waitrequest(local_avm_aspace66_waitrequest[0][0]),
      .avm_memdep_11_k0_ZTS6MMstv3_readdata(local_avm_aspace66_readdata[0][0]),
      .avm_memdep_11_k0_ZTS6MMstv3_readdatavalid(local_avm_aspace66_readdatavalid[0][0]),
      .avm_memdep_11_k0_ZTS6MMstv3_burstcount(local_avm_aspace66_burstcount[0][0]),
      .avm_memdep_11_k0_ZTS6MMstv3_writeack(local_avm_aspace66_writeack[0][0]),
      // AVM avm_memdep_2_k0_ZTS6MMstv3
      .avm_memdep_2_k0_ZTS6MMstv3_enable(local_avm_aspace66_enable[0][1]),
      .avm_memdep_2_k0_ZTS6MMstv3_read(local_avm_aspace66_read[0][1]),
      .avm_memdep_2_k0_ZTS6MMstv3_write(local_avm_aspace66_write[0][1]),
      .avm_memdep_2_k0_ZTS6MMstv3_address(local_avm_aspace66_address[0][1]),
      .avm_memdep_2_k0_ZTS6MMstv3_writedata(local_avm_aspace66_writedata[0][1]),
      .avm_memdep_2_k0_ZTS6MMstv3_byteenable(local_avm_aspace66_byteenable[0][1]),
      .avm_memdep_2_k0_ZTS6MMstv3_waitrequest(local_avm_aspace66_waitrequest[0][1]),
      .avm_memdep_2_k0_ZTS6MMstv3_readdata(local_avm_aspace66_readdata[0][1]),
      .avm_memdep_2_k0_ZTS6MMstv3_readdatavalid(local_avm_aspace66_readdatavalid[0][1]),
      .avm_memdep_2_k0_ZTS6MMstv3_burstcount(local_avm_aspace66_burstcount[0][1]),
      .avm_memdep_2_k0_ZTS6MMstv3_writeack(local_avm_aspace66_writeack[0][1]),
      // AVM avm_unnamed_k0_ZTS6MMstv329_k0_ZTS6MMstv3
      .avm_unnamed_k0_ZTS6MMstv329_k0_ZTS6MMstv3_enable(local_avm_aspace66_enable[0][2]),
      .avm_unnamed_k0_ZTS6MMstv329_k0_ZTS6MMstv3_read(local_avm_aspace66_read[0][2]),
      .avm_unnamed_k0_ZTS6MMstv329_k0_ZTS6MMstv3_write(local_avm_aspace66_write[0][2]),
      .avm_unnamed_k0_ZTS6MMstv329_k0_ZTS6MMstv3_address(local_avm_aspace66_address[0][2]),
      .avm_unnamed_k0_ZTS6MMstv329_k0_ZTS6MMstv3_writedata(local_avm_aspace66_writedata[0][2]),
      .avm_unnamed_k0_ZTS6MMstv329_k0_ZTS6MMstv3_byteenable(local_avm_aspace66_byteenable[0][2]),
      .avm_unnamed_k0_ZTS6MMstv329_k0_ZTS6MMstv3_waitrequest(local_avm_aspace66_waitrequest[0][2]),
      .avm_unnamed_k0_ZTS6MMstv329_k0_ZTS6MMstv3_readdata(local_avm_aspace66_readdata[0][2]),
      .avm_unnamed_k0_ZTS6MMstv329_k0_ZTS6MMstv3_readdatavalid(local_avm_aspace66_readdatavalid[0][2]),
      .avm_unnamed_k0_ZTS6MMstv329_k0_ZTS6MMstv3_burstcount(local_avm_aspace66_burstcount[0][2]),
      .avm_unnamed_k0_ZTS6MMstv329_k0_ZTS6MMstv3_writeack(local_avm_aspace66_writeack[0][2]),
      // AVM avm_unnamed_k0_ZTS6MMstv332_k0_ZTS6MMstv3
      .avm_unnamed_k0_ZTS6MMstv332_k0_ZTS6MMstv3_enable(local_avm_aspace66_enable[0][3]),
      .avm_unnamed_k0_ZTS6MMstv332_k0_ZTS6MMstv3_read(local_avm_aspace66_read[0][3]),
      .avm_unnamed_k0_ZTS6MMstv332_k0_ZTS6MMstv3_write(local_avm_aspace66_write[0][3]),
      .avm_unnamed_k0_ZTS6MMstv332_k0_ZTS6MMstv3_address(local_avm_aspace66_address[0][3]),
      .avm_unnamed_k0_ZTS6MMstv332_k0_ZTS6MMstv3_writedata(local_avm_aspace66_writedata[0][3]),
      .avm_unnamed_k0_ZTS6MMstv332_k0_ZTS6MMstv3_byteenable(local_avm_aspace66_byteenable[0][3]),
      .avm_unnamed_k0_ZTS6MMstv332_k0_ZTS6MMstv3_waitrequest(local_avm_aspace66_waitrequest[0][3]),
      .avm_unnamed_k0_ZTS6MMstv332_k0_ZTS6MMstv3_readdata(local_avm_aspace66_readdata[0][3]),
      .avm_unnamed_k0_ZTS6MMstv332_k0_ZTS6MMstv3_readdatavalid(local_avm_aspace66_readdatavalid[0][3]),
      .avm_unnamed_k0_ZTS6MMstv332_k0_ZTS6MMstv3_burstcount(local_avm_aspace66_burstcount[0][3]),
      .avm_unnamed_k0_ZTS6MMstv332_k0_ZTS6MMstv3_writeack(local_avm_aspace66_writeack[0][3])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace64
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [4:0] local_icm_arb_address [1][2];
      logic [511:0] local_icm_arb_writedata [1][2];
      logic [63:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [511:0] local_icm_rrp_data [1][2];
      logic invalid_access_grps;

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 2; __j = __j + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(512),
               .WRITEDATA_W(512),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(64)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace64_enable[__i][__j]),
               .avm_read(local_avm_aspace64_read[__i][__j]),
               .avm_write(local_avm_aspace64_write[__i][__j]),
               .avm_address(local_avm_aspace64_address[__i][__j]),
               .avm_writedata(local_avm_aspace64_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace64_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace64_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace64_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace64_readdatavalid[__i][__j]),
               .avm_burstcount(local_avm_aspace64_burstcount[__i][__j]),
               .avm_writeack(local_avm_aspace64_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 16; __j = __j + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic port_address [1:2];
            logic [511:0] port_writedata [1:2];
            logic [63:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [511:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(512),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __j = 0; __j < 2; __j = __j + 1 )
         begin:router
            logic b_arb_request [16];
            logic b_arb_enable [16];
            logic b_arb_read [16];
            logic b_arb_write [16];
            logic b_arb_burstcount [16];
            logic b_arb_address [16];
            logic [511:0] b_arb_writedata [16];
            logic [63:0] b_arb_byteenable [16];
            logic b_arb_stall [16];
            logic b_wrp_ack [16];
            logic b_rrp_datavalid [16];
            logic [511:0] b_rrp_data [16];
            logic [15:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(512),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(5),
               .BYTEENA_W(64),
               .NUM_BANKS(16)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__i][__j][4:1] == 4'b0000);
            assign bank_select[1] = (local_icm_arb_address[__i][__j][4:1] == 4'b0001);
            assign bank_select[2] = (local_icm_arb_address[__i][__j][4:1] == 4'b0010);
            assign bank_select[3] = (local_icm_arb_address[__i][__j][4:1] == 4'b0011);
            assign bank_select[4] = (local_icm_arb_address[__i][__j][4:1] == 4'b0100);
            assign bank_select[5] = (local_icm_arb_address[__i][__j][4:1] == 4'b0101);
            assign bank_select[6] = (local_icm_arb_address[__i][__j][4:1] == 4'b0110);
            assign bank_select[7] = (local_icm_arb_address[__i][__j][4:1] == 4'b0111);
            assign bank_select[8] = (local_icm_arb_address[__i][__j][4:1] == 4'b1000);
            assign bank_select[9] = (local_icm_arb_address[__i][__j][4:1] == 4'b1001);
            assign bank_select[10] = (local_icm_arb_address[__i][__j][4:1] == 4'b1010);
            assign bank_select[11] = (local_icm_arb_address[__i][__j][4:1] == 4'b1011);
            assign bank_select[12] = (local_icm_arb_address[__i][__j][4:1] == 4'b1100);
            assign bank_select[13] = (local_icm_arb_address[__i][__j][4:1] == 4'b1101);
            assign bank_select[14] = (local_icm_arb_address[__i][__j][4:1] == 4'b1110);
            assign bank_select[15] = (local_icm_arb_address[__i][__j][4:1] == 4'b1111);
         end

         assign invalid_access_grps = 'b0;
         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[0].b_arb_read[2];
            assign icm_in_arb_write[0] = router[0].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[0].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[2];
            assign router[0].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[0].b_arb_read[3];
            assign icm_in_arb_write[0] = router[0].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[0].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[3];
            assign router[0].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank4
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[4];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[4];
            assign icm_in_arb_read[0] = router[0].b_arb_read[4];
            assign icm_in_arb_write[0] = router[0].b_arb_write[4];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[4];
            assign icm_in_arb_address[0] = router[0].b_arb_address[4];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[4];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[4];
            assign router[0].b_arb_stall[4] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[4] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[4] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[4] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[4].port_enable[1] = icm_out_arb_enable;
            assign bank[4].port_read[1] = icm_out_arb_read;
            assign bank[4].port_write[1] = icm_out_arb_write;
            assign bank[4].port_address[1] = icm_out_arb_address;
            assign bank[4].port_writedata[1] = icm_out_arb_writedata;
            assign bank[4].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[4].port_waitrequest[1];
            assign icm_out_rrp_data = bank[4].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[4].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank5
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[5];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[5];
            assign icm_in_arb_read[0] = router[0].b_arb_read[5];
            assign icm_in_arb_write[0] = router[0].b_arb_write[5];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[5];
            assign icm_in_arb_address[0] = router[0].b_arb_address[5];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[5];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[5];
            assign router[0].b_arb_stall[5] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[5] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[5] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[5] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[5].port_enable[1] = icm_out_arb_enable;
            assign bank[5].port_read[1] = icm_out_arb_read;
            assign bank[5].port_write[1] = icm_out_arb_write;
            assign bank[5].port_address[1] = icm_out_arb_address;
            assign bank[5].port_writedata[1] = icm_out_arb_writedata;
            assign bank[5].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[5].port_waitrequest[1];
            assign icm_out_rrp_data = bank[5].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[5].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank6
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[6];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[6];
            assign icm_in_arb_read[0] = router[0].b_arb_read[6];
            assign icm_in_arb_write[0] = router[0].b_arb_write[6];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[6];
            assign icm_in_arb_address[0] = router[0].b_arb_address[6];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[6];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[6];
            assign router[0].b_arb_stall[6] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[6] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[6] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[6] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[6].port_enable[1] = icm_out_arb_enable;
            assign bank[6].port_read[1] = icm_out_arb_read;
            assign bank[6].port_write[1] = icm_out_arb_write;
            assign bank[6].port_address[1] = icm_out_arb_address;
            assign bank[6].port_writedata[1] = icm_out_arb_writedata;
            assign bank[6].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[6].port_waitrequest[1];
            assign icm_out_rrp_data = bank[6].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[6].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank7
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[7];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[7];
            assign icm_in_arb_read[0] = router[0].b_arb_read[7];
            assign icm_in_arb_write[0] = router[0].b_arb_write[7];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[7];
            assign icm_in_arb_address[0] = router[0].b_arb_address[7];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[7];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[7];
            assign router[0].b_arb_stall[7] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[7] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[7] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[7] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[7].port_enable[1] = icm_out_arb_enable;
            assign bank[7].port_read[1] = icm_out_arb_read;
            assign bank[7].port_write[1] = icm_out_arb_write;
            assign bank[7].port_address[1] = icm_out_arb_address;
            assign bank[7].port_writedata[1] = icm_out_arb_writedata;
            assign bank[7].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[7].port_waitrequest[1];
            assign icm_out_rrp_data = bank[7].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[7].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank8
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[8];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[8];
            assign icm_in_arb_read[0] = router[0].b_arb_read[8];
            assign icm_in_arb_write[0] = router[0].b_arb_write[8];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[8];
            assign icm_in_arb_address[0] = router[0].b_arb_address[8];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[8];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[8];
            assign router[0].b_arb_stall[8] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[8] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[8] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[8] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[8].port_enable[1] = icm_out_arb_enable;
            assign bank[8].port_read[1] = icm_out_arb_read;
            assign bank[8].port_write[1] = icm_out_arb_write;
            assign bank[8].port_address[1] = icm_out_arb_address;
            assign bank[8].port_writedata[1] = icm_out_arb_writedata;
            assign bank[8].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[8].port_waitrequest[1];
            assign icm_out_rrp_data = bank[8].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[8].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank9
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[9];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[9];
            assign icm_in_arb_read[0] = router[0].b_arb_read[9];
            assign icm_in_arb_write[0] = router[0].b_arb_write[9];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[9];
            assign icm_in_arb_address[0] = router[0].b_arb_address[9];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[9];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[9];
            assign router[0].b_arb_stall[9] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[9] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[9] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[9] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[9].port_enable[1] = icm_out_arb_enable;
            assign bank[9].port_read[1] = icm_out_arb_read;
            assign bank[9].port_write[1] = icm_out_arb_write;
            assign bank[9].port_address[1] = icm_out_arb_address;
            assign bank[9].port_writedata[1] = icm_out_arb_writedata;
            assign bank[9].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[9].port_waitrequest[1];
            assign icm_out_rrp_data = bank[9].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[9].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank10
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[10];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[10];
            assign icm_in_arb_read[0] = router[0].b_arb_read[10];
            assign icm_in_arb_write[0] = router[0].b_arb_write[10];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[10];
            assign icm_in_arb_address[0] = router[0].b_arb_address[10];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[10];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[10];
            assign router[0].b_arb_stall[10] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[10] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[10] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[10] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[10].port_enable[1] = icm_out_arb_enable;
            assign bank[10].port_read[1] = icm_out_arb_read;
            assign bank[10].port_write[1] = icm_out_arb_write;
            assign bank[10].port_address[1] = icm_out_arb_address;
            assign bank[10].port_writedata[1] = icm_out_arb_writedata;
            assign bank[10].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[10].port_waitrequest[1];
            assign icm_out_rrp_data = bank[10].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[10].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank11
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[11];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[11];
            assign icm_in_arb_read[0] = router[0].b_arb_read[11];
            assign icm_in_arb_write[0] = router[0].b_arb_write[11];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[11];
            assign icm_in_arb_address[0] = router[0].b_arb_address[11];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[11];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[11];
            assign router[0].b_arb_stall[11] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[11] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[11] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[11] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[11].port_enable[1] = icm_out_arb_enable;
            assign bank[11].port_read[1] = icm_out_arb_read;
            assign bank[11].port_write[1] = icm_out_arb_write;
            assign bank[11].port_address[1] = icm_out_arb_address;
            assign bank[11].port_writedata[1] = icm_out_arb_writedata;
            assign bank[11].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[11].port_waitrequest[1];
            assign icm_out_rrp_data = bank[11].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[11].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank12
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[12];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[12];
            assign icm_in_arb_read[0] = router[0].b_arb_read[12];
            assign icm_in_arb_write[0] = router[0].b_arb_write[12];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[12];
            assign icm_in_arb_address[0] = router[0].b_arb_address[12];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[12];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[12];
            assign router[0].b_arb_stall[12] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[12] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[12] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[12] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[12].port_enable[1] = icm_out_arb_enable;
            assign bank[12].port_read[1] = icm_out_arb_read;
            assign bank[12].port_write[1] = icm_out_arb_write;
            assign bank[12].port_address[1] = icm_out_arb_address;
            assign bank[12].port_writedata[1] = icm_out_arb_writedata;
            assign bank[12].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[12].port_waitrequest[1];
            assign icm_out_rrp_data = bank[12].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[12].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank13
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[13];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[13];
            assign icm_in_arb_read[0] = router[0].b_arb_read[13];
            assign icm_in_arb_write[0] = router[0].b_arb_write[13];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[13];
            assign icm_in_arb_address[0] = router[0].b_arb_address[13];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[13];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[13];
            assign router[0].b_arb_stall[13] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[13] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[13] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[13] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[13].port_enable[1] = icm_out_arb_enable;
            assign bank[13].port_read[1] = icm_out_arb_read;
            assign bank[13].port_write[1] = icm_out_arb_write;
            assign bank[13].port_address[1] = icm_out_arb_address;
            assign bank[13].port_writedata[1] = icm_out_arb_writedata;
            assign bank[13].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[13].port_waitrequest[1];
            assign icm_out_rrp_data = bank[13].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[13].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank14
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[14];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[14];
            assign icm_in_arb_read[0] = router[0].b_arb_read[14];
            assign icm_in_arb_write[0] = router[0].b_arb_write[14];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[14];
            assign icm_in_arb_address[0] = router[0].b_arb_address[14];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[14];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[14];
            assign router[0].b_arb_stall[14] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[14] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[14] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[14] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[14].port_enable[1] = icm_out_arb_enable;
            assign bank[14].port_read[1] = icm_out_arb_read;
            assign bank[14].port_write[1] = icm_out_arb_write;
            assign bank[14].port_address[1] = icm_out_arb_address;
            assign bank[14].port_writedata[1] = icm_out_arb_writedata;
            assign bank[14].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[14].port_waitrequest[1];
            assign icm_out_rrp_data = bank[14].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[14].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank15
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[15];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[15];
            assign icm_in_arb_read[0] = router[0].b_arb_read[15];
            assign icm_in_arb_write[0] = router[0].b_arb_write[15];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[15];
            assign icm_in_arb_address[0] = router[0].b_arb_address[15];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[15];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[15];
            assign router[0].b_arb_stall[15] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[15] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[15] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[15] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[15].port_enable[1] = icm_out_arb_enable;
            assign bank[15].port_read[1] = icm_out_arb_read;
            assign bank[15].port_write[1] = icm_out_arb_write;
            assign bank[15].port_address[1] = icm_out_arb_address;
            assign bank[15].port_writedata[1] = icm_out_arb_writedata;
            assign bank[15].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[15].port_waitrequest[1];
            assign icm_out_rrp_data = bank[15].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[15].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[1].b_arb_read[2];
            assign icm_in_arb_write[0] = router[1].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[1].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[2];
            assign router[1].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank4
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[4];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[4];
            assign icm_in_arb_read[0] = router[1].b_arb_read[4];
            assign icm_in_arb_write[0] = router[1].b_arb_write[4];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[4];
            assign icm_in_arb_address[0] = router[1].b_arb_address[4];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[4];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[4];
            assign router[1].b_arb_stall[4] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[4] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[4] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[4] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[4].port_enable[2] = icm_out_arb_enable;
            assign bank[4].port_read[2] = icm_out_arb_read;
            assign bank[4].port_write[2] = icm_out_arb_write;
            assign bank[4].port_address[2] = icm_out_arb_address;
            assign bank[4].port_writedata[2] = icm_out_arb_writedata;
            assign bank[4].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[4].port_waitrequest[2];
            assign icm_out_rrp_data = bank[4].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[4].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank5
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[5];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[5];
            assign icm_in_arb_read[0] = router[1].b_arb_read[5];
            assign icm_in_arb_write[0] = router[1].b_arb_write[5];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[5];
            assign icm_in_arb_address[0] = router[1].b_arb_address[5];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[5];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[5];
            assign router[1].b_arb_stall[5] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[5] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[5] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[5] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[5].port_enable[2] = icm_out_arb_enable;
            assign bank[5].port_read[2] = icm_out_arb_read;
            assign bank[5].port_write[2] = icm_out_arb_write;
            assign bank[5].port_address[2] = icm_out_arb_address;
            assign bank[5].port_writedata[2] = icm_out_arb_writedata;
            assign bank[5].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[5].port_waitrequest[2];
            assign icm_out_rrp_data = bank[5].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[5].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank6
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[6];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[6];
            assign icm_in_arb_read[0] = router[1].b_arb_read[6];
            assign icm_in_arb_write[0] = router[1].b_arb_write[6];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[6];
            assign icm_in_arb_address[0] = router[1].b_arb_address[6];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[6];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[6];
            assign router[1].b_arb_stall[6] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[6] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[6] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[6] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[6].port_enable[2] = icm_out_arb_enable;
            assign bank[6].port_read[2] = icm_out_arb_read;
            assign bank[6].port_write[2] = icm_out_arb_write;
            assign bank[6].port_address[2] = icm_out_arb_address;
            assign bank[6].port_writedata[2] = icm_out_arb_writedata;
            assign bank[6].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[6].port_waitrequest[2];
            assign icm_out_rrp_data = bank[6].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[6].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank7
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[7];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[7];
            assign icm_in_arb_read[0] = router[1].b_arb_read[7];
            assign icm_in_arb_write[0] = router[1].b_arb_write[7];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[7];
            assign icm_in_arb_address[0] = router[1].b_arb_address[7];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[7];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[7];
            assign router[1].b_arb_stall[7] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[7] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[7] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[7] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[7].port_enable[2] = icm_out_arb_enable;
            assign bank[7].port_read[2] = icm_out_arb_read;
            assign bank[7].port_write[2] = icm_out_arb_write;
            assign bank[7].port_address[2] = icm_out_arb_address;
            assign bank[7].port_writedata[2] = icm_out_arb_writedata;
            assign bank[7].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[7].port_waitrequest[2];
            assign icm_out_rrp_data = bank[7].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[7].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank8
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[8];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[8];
            assign icm_in_arb_read[0] = router[1].b_arb_read[8];
            assign icm_in_arb_write[0] = router[1].b_arb_write[8];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[8];
            assign icm_in_arb_address[0] = router[1].b_arb_address[8];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[8];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[8];
            assign router[1].b_arb_stall[8] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[8] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[8] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[8] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[8].port_enable[2] = icm_out_arb_enable;
            assign bank[8].port_read[2] = icm_out_arb_read;
            assign bank[8].port_write[2] = icm_out_arb_write;
            assign bank[8].port_address[2] = icm_out_arb_address;
            assign bank[8].port_writedata[2] = icm_out_arb_writedata;
            assign bank[8].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[8].port_waitrequest[2];
            assign icm_out_rrp_data = bank[8].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[8].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank9
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[9];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[9];
            assign icm_in_arb_read[0] = router[1].b_arb_read[9];
            assign icm_in_arb_write[0] = router[1].b_arb_write[9];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[9];
            assign icm_in_arb_address[0] = router[1].b_arb_address[9];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[9];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[9];
            assign router[1].b_arb_stall[9] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[9] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[9] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[9] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[9].port_enable[2] = icm_out_arb_enable;
            assign bank[9].port_read[2] = icm_out_arb_read;
            assign bank[9].port_write[2] = icm_out_arb_write;
            assign bank[9].port_address[2] = icm_out_arb_address;
            assign bank[9].port_writedata[2] = icm_out_arb_writedata;
            assign bank[9].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[9].port_waitrequest[2];
            assign icm_out_rrp_data = bank[9].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[9].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank10
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[10];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[10];
            assign icm_in_arb_read[0] = router[1].b_arb_read[10];
            assign icm_in_arb_write[0] = router[1].b_arb_write[10];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[10];
            assign icm_in_arb_address[0] = router[1].b_arb_address[10];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[10];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[10];
            assign router[1].b_arb_stall[10] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[10] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[10] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[10] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[10].port_enable[2] = icm_out_arb_enable;
            assign bank[10].port_read[2] = icm_out_arb_read;
            assign bank[10].port_write[2] = icm_out_arb_write;
            assign bank[10].port_address[2] = icm_out_arb_address;
            assign bank[10].port_writedata[2] = icm_out_arb_writedata;
            assign bank[10].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[10].port_waitrequest[2];
            assign icm_out_rrp_data = bank[10].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[10].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank11
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[11];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[11];
            assign icm_in_arb_read[0] = router[1].b_arb_read[11];
            assign icm_in_arb_write[0] = router[1].b_arb_write[11];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[11];
            assign icm_in_arb_address[0] = router[1].b_arb_address[11];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[11];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[11];
            assign router[1].b_arb_stall[11] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[11] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[11] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[11] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[11].port_enable[2] = icm_out_arb_enable;
            assign bank[11].port_read[2] = icm_out_arb_read;
            assign bank[11].port_write[2] = icm_out_arb_write;
            assign bank[11].port_address[2] = icm_out_arb_address;
            assign bank[11].port_writedata[2] = icm_out_arb_writedata;
            assign bank[11].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[11].port_waitrequest[2];
            assign icm_out_rrp_data = bank[11].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[11].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank12
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[12];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[12];
            assign icm_in_arb_read[0] = router[1].b_arb_read[12];
            assign icm_in_arb_write[0] = router[1].b_arb_write[12];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[12];
            assign icm_in_arb_address[0] = router[1].b_arb_address[12];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[12];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[12];
            assign router[1].b_arb_stall[12] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[12] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[12] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[12] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[12].port_enable[2] = icm_out_arb_enable;
            assign bank[12].port_read[2] = icm_out_arb_read;
            assign bank[12].port_write[2] = icm_out_arb_write;
            assign bank[12].port_address[2] = icm_out_arb_address;
            assign bank[12].port_writedata[2] = icm_out_arb_writedata;
            assign bank[12].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[12].port_waitrequest[2];
            assign icm_out_rrp_data = bank[12].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[12].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank13
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[13];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[13];
            assign icm_in_arb_read[0] = router[1].b_arb_read[13];
            assign icm_in_arb_write[0] = router[1].b_arb_write[13];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[13];
            assign icm_in_arb_address[0] = router[1].b_arb_address[13];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[13];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[13];
            assign router[1].b_arb_stall[13] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[13] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[13] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[13] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[13].port_enable[2] = icm_out_arb_enable;
            assign bank[13].port_read[2] = icm_out_arb_read;
            assign bank[13].port_write[2] = icm_out_arb_write;
            assign bank[13].port_address[2] = icm_out_arb_address;
            assign bank[13].port_writedata[2] = icm_out_arb_writedata;
            assign bank[13].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[13].port_waitrequest[2];
            assign icm_out_rrp_data = bank[13].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[13].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank14
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[14];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[14];
            assign icm_in_arb_read[0] = router[1].b_arb_read[14];
            assign icm_in_arb_write[0] = router[1].b_arb_write[14];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[14];
            assign icm_in_arb_address[0] = router[1].b_arb_address[14];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[14];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[14];
            assign router[1].b_arb_stall[14] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[14] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[14] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[14] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[14].port_enable[2] = icm_out_arb_enable;
            assign bank[14].port_read[2] = icm_out_arb_read;
            assign bank[14].port_write[2] = icm_out_arb_write;
            assign bank[14].port_address[2] = icm_out_arb_address;
            assign bank[14].port_writedata[2] = icm_out_arb_writedata;
            assign bank[14].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[14].port_waitrequest[2];
            assign icm_out_rrp_data = bank[14].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[14].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank15
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[15];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[15];
            assign icm_in_arb_read[0] = router[1].b_arb_read[15];
            assign icm_in_arb_write[0] = router[1].b_arb_write[15];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[15];
            assign icm_in_arb_address[0] = router[1].b_arb_address[15];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[15];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[15];
            assign router[1].b_arb_stall[15] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[15] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[15] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[15] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[15].port_enable[2] = icm_out_arb_enable;
            assign bank[15].port_read[2] = icm_out_arb_read;
            assign bank[15].port_write[2] = icm_out_arb_write;
            assign bank[15].port_address[2] = icm_out_arb_address;
            assign bank[15].port_writedata[2] = icm_out_arb_writedata;
            assign bank[15].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[15].port_waitrequest[2];
            assign icm_out_rrp_data = bank[15].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[15].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[0] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace65
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [4:0] local_icm_arb_address [1][2];
      logic [511:0] local_icm_arb_writedata [1][2];
      logic [63:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [511:0] local_icm_rrp_data [1][2];
      logic invalid_access_grps;

      for( __j = 0; __j < 1; __j = __j + 1 )
      begin:local_mem_group
         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(512),
               .WRITEDATA_W(512),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(64)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace65_enable[__j][__k]),
               .avm_read(local_avm_aspace65_read[__j][__k]),
               .avm_write(local_avm_aspace65_write[__j][__k]),
               .avm_address(local_avm_aspace65_address[__j][__k]),
               .avm_writedata(local_avm_aspace65_writedata[__j][__k]),
               .avm_byteenable(local_avm_aspace65_byteenable[__j][__k]),
               .avm_waitrequest(local_avm_aspace65_waitrequest[__j][__k]),
               .avm_readdata(local_avm_aspace65_readdata[__j][__k]),
               .avm_readdatavalid(local_avm_aspace65_readdatavalid[__j][__k]),
               .avm_burstcount(local_avm_aspace65_burstcount[__j][__k]),
               .avm_writeack(local_avm_aspace65_writeack[__j][__k]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__j][__k]),
               .ic_arb_enable(local_icm_arb_enable[__j][__k]),
               .ic_arb_read(local_icm_arb_read[__j][__k]),
               .ic_arb_write(local_icm_arb_write[__j][__k]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .ic_arb_address(local_icm_arb_address[__j][__k]),
               .ic_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .ic_arb_stall(local_icm_arb_stall[__j][__k]),
               .ic_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .ic_rrp_data(local_icm_rrp_data[__j][__k])
            );

         end

         for( __k = 0; __k < 16; __k = __k + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic port_address [1:2];
            logic [511:0] port_writedata [1:2];
            logic [63:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [511:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(512),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:router
            logic b_arb_request [16];
            logic b_arb_enable [16];
            logic b_arb_read [16];
            logic b_arb_write [16];
            logic b_arb_burstcount [16];
            logic b_arb_address [16];
            logic [511:0] b_arb_writedata [16];
            logic [63:0] b_arb_byteenable [16];
            logic b_arb_stall [16];
            logic b_wrp_ack [16];
            logic b_rrp_datavalid [16];
            logic [511:0] b_rrp_data [16];
            logic [15:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(512),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(5),
               .BYTEENA_W(64),
               .NUM_BANKS(16)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__j][__k]),
               .m_arb_enable(local_icm_arb_enable[__j][__k]),
               .m_arb_read(local_icm_arb_read[__j][__k]),
               .m_arb_write(local_icm_arb_write[__j][__k]),
               .m_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .m_arb_address(local_icm_arb_address[__j][__k]),
               .m_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .m_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .m_arb_stall(local_icm_arb_stall[__j][__k]),
               .m_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .m_rrp_data(local_icm_rrp_data[__j][__k]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__j][__k][4:1] == 4'b0000);
            assign bank_select[1] = (local_icm_arb_address[__j][__k][4:1] == 4'b0001);
            assign bank_select[2] = (local_icm_arb_address[__j][__k][4:1] == 4'b0010);
            assign bank_select[3] = (local_icm_arb_address[__j][__k][4:1] == 4'b0011);
            assign bank_select[4] = (local_icm_arb_address[__j][__k][4:1] == 4'b0100);
            assign bank_select[5] = (local_icm_arb_address[__j][__k][4:1] == 4'b0101);
            assign bank_select[6] = (local_icm_arb_address[__j][__k][4:1] == 4'b0110);
            assign bank_select[7] = (local_icm_arb_address[__j][__k][4:1] == 4'b0111);
            assign bank_select[8] = (local_icm_arb_address[__j][__k][4:1] == 4'b1000);
            assign bank_select[9] = (local_icm_arb_address[__j][__k][4:1] == 4'b1001);
            assign bank_select[10] = (local_icm_arb_address[__j][__k][4:1] == 4'b1010);
            assign bank_select[11] = (local_icm_arb_address[__j][__k][4:1] == 4'b1011);
            assign bank_select[12] = (local_icm_arb_address[__j][__k][4:1] == 4'b1100);
            assign bank_select[13] = (local_icm_arb_address[__j][__k][4:1] == 4'b1101);
            assign bank_select[14] = (local_icm_arb_address[__j][__k][4:1] == 4'b1110);
            assign bank_select[15] = (local_icm_arb_address[__j][__k][4:1] == 4'b1111);
         end

         assign invalid_access_grps = 'b0;
         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[0].b_arb_read[2];
            assign icm_in_arb_write[0] = router[0].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[0].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[2];
            assign router[0].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[0].b_arb_read[3];
            assign icm_in_arb_write[0] = router[0].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[0].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[3];
            assign router[0].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank4
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[4];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[4];
            assign icm_in_arb_read[0] = router[0].b_arb_read[4];
            assign icm_in_arb_write[0] = router[0].b_arb_write[4];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[4];
            assign icm_in_arb_address[0] = router[0].b_arb_address[4];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[4];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[4];
            assign router[0].b_arb_stall[4] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[4] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[4] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[4] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[4].port_enable[1] = icm_out_arb_enable;
            assign bank[4].port_read[1] = icm_out_arb_read;
            assign bank[4].port_write[1] = icm_out_arb_write;
            assign bank[4].port_address[1] = icm_out_arb_address;
            assign bank[4].port_writedata[1] = icm_out_arb_writedata;
            assign bank[4].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[4].port_waitrequest[1];
            assign icm_out_rrp_data = bank[4].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[4].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank5
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[5];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[5];
            assign icm_in_arb_read[0] = router[0].b_arb_read[5];
            assign icm_in_arb_write[0] = router[0].b_arb_write[5];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[5];
            assign icm_in_arb_address[0] = router[0].b_arb_address[5];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[5];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[5];
            assign router[0].b_arb_stall[5] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[5] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[5] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[5] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[5].port_enable[1] = icm_out_arb_enable;
            assign bank[5].port_read[1] = icm_out_arb_read;
            assign bank[5].port_write[1] = icm_out_arb_write;
            assign bank[5].port_address[1] = icm_out_arb_address;
            assign bank[5].port_writedata[1] = icm_out_arb_writedata;
            assign bank[5].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[5].port_waitrequest[1];
            assign icm_out_rrp_data = bank[5].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[5].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank6
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[6];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[6];
            assign icm_in_arb_read[0] = router[0].b_arb_read[6];
            assign icm_in_arb_write[0] = router[0].b_arb_write[6];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[6];
            assign icm_in_arb_address[0] = router[0].b_arb_address[6];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[6];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[6];
            assign router[0].b_arb_stall[6] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[6] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[6] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[6] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[6].port_enable[1] = icm_out_arb_enable;
            assign bank[6].port_read[1] = icm_out_arb_read;
            assign bank[6].port_write[1] = icm_out_arb_write;
            assign bank[6].port_address[1] = icm_out_arb_address;
            assign bank[6].port_writedata[1] = icm_out_arb_writedata;
            assign bank[6].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[6].port_waitrequest[1];
            assign icm_out_rrp_data = bank[6].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[6].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank7
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[7];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[7];
            assign icm_in_arb_read[0] = router[0].b_arb_read[7];
            assign icm_in_arb_write[0] = router[0].b_arb_write[7];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[7];
            assign icm_in_arb_address[0] = router[0].b_arb_address[7];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[7];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[7];
            assign router[0].b_arb_stall[7] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[7] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[7] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[7] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[7].port_enable[1] = icm_out_arb_enable;
            assign bank[7].port_read[1] = icm_out_arb_read;
            assign bank[7].port_write[1] = icm_out_arb_write;
            assign bank[7].port_address[1] = icm_out_arb_address;
            assign bank[7].port_writedata[1] = icm_out_arb_writedata;
            assign bank[7].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[7].port_waitrequest[1];
            assign icm_out_rrp_data = bank[7].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[7].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank8
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[8];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[8];
            assign icm_in_arb_read[0] = router[0].b_arb_read[8];
            assign icm_in_arb_write[0] = router[0].b_arb_write[8];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[8];
            assign icm_in_arb_address[0] = router[0].b_arb_address[8];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[8];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[8];
            assign router[0].b_arb_stall[8] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[8] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[8] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[8] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[8].port_enable[1] = icm_out_arb_enable;
            assign bank[8].port_read[1] = icm_out_arb_read;
            assign bank[8].port_write[1] = icm_out_arb_write;
            assign bank[8].port_address[1] = icm_out_arb_address;
            assign bank[8].port_writedata[1] = icm_out_arb_writedata;
            assign bank[8].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[8].port_waitrequest[1];
            assign icm_out_rrp_data = bank[8].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[8].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank9
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[9];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[9];
            assign icm_in_arb_read[0] = router[0].b_arb_read[9];
            assign icm_in_arb_write[0] = router[0].b_arb_write[9];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[9];
            assign icm_in_arb_address[0] = router[0].b_arb_address[9];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[9];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[9];
            assign router[0].b_arb_stall[9] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[9] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[9] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[9] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[9].port_enable[1] = icm_out_arb_enable;
            assign bank[9].port_read[1] = icm_out_arb_read;
            assign bank[9].port_write[1] = icm_out_arb_write;
            assign bank[9].port_address[1] = icm_out_arb_address;
            assign bank[9].port_writedata[1] = icm_out_arb_writedata;
            assign bank[9].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[9].port_waitrequest[1];
            assign icm_out_rrp_data = bank[9].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[9].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank10
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[10];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[10];
            assign icm_in_arb_read[0] = router[0].b_arb_read[10];
            assign icm_in_arb_write[0] = router[0].b_arb_write[10];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[10];
            assign icm_in_arb_address[0] = router[0].b_arb_address[10];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[10];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[10];
            assign router[0].b_arb_stall[10] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[10] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[10] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[10] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[10].port_enable[1] = icm_out_arb_enable;
            assign bank[10].port_read[1] = icm_out_arb_read;
            assign bank[10].port_write[1] = icm_out_arb_write;
            assign bank[10].port_address[1] = icm_out_arb_address;
            assign bank[10].port_writedata[1] = icm_out_arb_writedata;
            assign bank[10].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[10].port_waitrequest[1];
            assign icm_out_rrp_data = bank[10].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[10].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank11
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[11];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[11];
            assign icm_in_arb_read[0] = router[0].b_arb_read[11];
            assign icm_in_arb_write[0] = router[0].b_arb_write[11];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[11];
            assign icm_in_arb_address[0] = router[0].b_arb_address[11];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[11];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[11];
            assign router[0].b_arb_stall[11] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[11] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[11] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[11] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[11].port_enable[1] = icm_out_arb_enable;
            assign bank[11].port_read[1] = icm_out_arb_read;
            assign bank[11].port_write[1] = icm_out_arb_write;
            assign bank[11].port_address[1] = icm_out_arb_address;
            assign bank[11].port_writedata[1] = icm_out_arb_writedata;
            assign bank[11].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[11].port_waitrequest[1];
            assign icm_out_rrp_data = bank[11].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[11].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank12
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[12];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[12];
            assign icm_in_arb_read[0] = router[0].b_arb_read[12];
            assign icm_in_arb_write[0] = router[0].b_arb_write[12];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[12];
            assign icm_in_arb_address[0] = router[0].b_arb_address[12];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[12];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[12];
            assign router[0].b_arb_stall[12] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[12] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[12] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[12] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[12].port_enable[1] = icm_out_arb_enable;
            assign bank[12].port_read[1] = icm_out_arb_read;
            assign bank[12].port_write[1] = icm_out_arb_write;
            assign bank[12].port_address[1] = icm_out_arb_address;
            assign bank[12].port_writedata[1] = icm_out_arb_writedata;
            assign bank[12].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[12].port_waitrequest[1];
            assign icm_out_rrp_data = bank[12].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[12].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank13
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[13];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[13];
            assign icm_in_arb_read[0] = router[0].b_arb_read[13];
            assign icm_in_arb_write[0] = router[0].b_arb_write[13];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[13];
            assign icm_in_arb_address[0] = router[0].b_arb_address[13];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[13];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[13];
            assign router[0].b_arb_stall[13] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[13] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[13] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[13] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[13].port_enable[1] = icm_out_arb_enable;
            assign bank[13].port_read[1] = icm_out_arb_read;
            assign bank[13].port_write[1] = icm_out_arb_write;
            assign bank[13].port_address[1] = icm_out_arb_address;
            assign bank[13].port_writedata[1] = icm_out_arb_writedata;
            assign bank[13].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[13].port_waitrequest[1];
            assign icm_out_rrp_data = bank[13].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[13].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank14
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[14];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[14];
            assign icm_in_arb_read[0] = router[0].b_arb_read[14];
            assign icm_in_arb_write[0] = router[0].b_arb_write[14];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[14];
            assign icm_in_arb_address[0] = router[0].b_arb_address[14];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[14];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[14];
            assign router[0].b_arb_stall[14] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[14] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[14] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[14] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[14].port_enable[1] = icm_out_arb_enable;
            assign bank[14].port_read[1] = icm_out_arb_read;
            assign bank[14].port_write[1] = icm_out_arb_write;
            assign bank[14].port_address[1] = icm_out_arb_address;
            assign bank[14].port_writedata[1] = icm_out_arb_writedata;
            assign bank[14].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[14].port_waitrequest[1];
            assign icm_out_rrp_data = bank[14].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[14].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank15
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[15];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[15];
            assign icm_in_arb_read[0] = router[0].b_arb_read[15];
            assign icm_in_arb_write[0] = router[0].b_arb_write[15];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[15];
            assign icm_in_arb_address[0] = router[0].b_arb_address[15];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[15];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[15];
            assign router[0].b_arb_stall[15] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[15] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[15] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[15] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[15].port_enable[1] = icm_out_arb_enable;
            assign bank[15].port_read[1] = icm_out_arb_read;
            assign bank[15].port_write[1] = icm_out_arb_write;
            assign bank[15].port_address[1] = icm_out_arb_address;
            assign bank[15].port_writedata[1] = icm_out_arb_writedata;
            assign bank[15].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[15].port_waitrequest[1];
            assign icm_out_rrp_data = bank[15].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[15].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[1].b_arb_read[2];
            assign icm_in_arb_write[0] = router[1].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[1].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[2];
            assign router[1].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank4
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[4];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[4];
            assign icm_in_arb_read[0] = router[1].b_arb_read[4];
            assign icm_in_arb_write[0] = router[1].b_arb_write[4];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[4];
            assign icm_in_arb_address[0] = router[1].b_arb_address[4];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[4];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[4];
            assign router[1].b_arb_stall[4] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[4] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[4] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[4] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[4].port_enable[2] = icm_out_arb_enable;
            assign bank[4].port_read[2] = icm_out_arb_read;
            assign bank[4].port_write[2] = icm_out_arb_write;
            assign bank[4].port_address[2] = icm_out_arb_address;
            assign bank[4].port_writedata[2] = icm_out_arb_writedata;
            assign bank[4].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[4].port_waitrequest[2];
            assign icm_out_rrp_data = bank[4].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[4].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank5
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[5];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[5];
            assign icm_in_arb_read[0] = router[1].b_arb_read[5];
            assign icm_in_arb_write[0] = router[1].b_arb_write[5];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[5];
            assign icm_in_arb_address[0] = router[1].b_arb_address[5];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[5];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[5];
            assign router[1].b_arb_stall[5] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[5] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[5] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[5] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[5].port_enable[2] = icm_out_arb_enable;
            assign bank[5].port_read[2] = icm_out_arb_read;
            assign bank[5].port_write[2] = icm_out_arb_write;
            assign bank[5].port_address[2] = icm_out_arb_address;
            assign bank[5].port_writedata[2] = icm_out_arb_writedata;
            assign bank[5].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[5].port_waitrequest[2];
            assign icm_out_rrp_data = bank[5].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[5].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank6
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[6];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[6];
            assign icm_in_arb_read[0] = router[1].b_arb_read[6];
            assign icm_in_arb_write[0] = router[1].b_arb_write[6];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[6];
            assign icm_in_arb_address[0] = router[1].b_arb_address[6];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[6];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[6];
            assign router[1].b_arb_stall[6] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[6] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[6] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[6] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[6].port_enable[2] = icm_out_arb_enable;
            assign bank[6].port_read[2] = icm_out_arb_read;
            assign bank[6].port_write[2] = icm_out_arb_write;
            assign bank[6].port_address[2] = icm_out_arb_address;
            assign bank[6].port_writedata[2] = icm_out_arb_writedata;
            assign bank[6].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[6].port_waitrequest[2];
            assign icm_out_rrp_data = bank[6].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[6].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank7
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[7];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[7];
            assign icm_in_arb_read[0] = router[1].b_arb_read[7];
            assign icm_in_arb_write[0] = router[1].b_arb_write[7];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[7];
            assign icm_in_arb_address[0] = router[1].b_arb_address[7];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[7];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[7];
            assign router[1].b_arb_stall[7] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[7] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[7] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[7] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[7].port_enable[2] = icm_out_arb_enable;
            assign bank[7].port_read[2] = icm_out_arb_read;
            assign bank[7].port_write[2] = icm_out_arb_write;
            assign bank[7].port_address[2] = icm_out_arb_address;
            assign bank[7].port_writedata[2] = icm_out_arb_writedata;
            assign bank[7].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[7].port_waitrequest[2];
            assign icm_out_rrp_data = bank[7].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[7].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank8
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[8];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[8];
            assign icm_in_arb_read[0] = router[1].b_arb_read[8];
            assign icm_in_arb_write[0] = router[1].b_arb_write[8];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[8];
            assign icm_in_arb_address[0] = router[1].b_arb_address[8];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[8];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[8];
            assign router[1].b_arb_stall[8] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[8] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[8] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[8] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[8].port_enable[2] = icm_out_arb_enable;
            assign bank[8].port_read[2] = icm_out_arb_read;
            assign bank[8].port_write[2] = icm_out_arb_write;
            assign bank[8].port_address[2] = icm_out_arb_address;
            assign bank[8].port_writedata[2] = icm_out_arb_writedata;
            assign bank[8].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[8].port_waitrequest[2];
            assign icm_out_rrp_data = bank[8].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[8].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank9
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[9];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[9];
            assign icm_in_arb_read[0] = router[1].b_arb_read[9];
            assign icm_in_arb_write[0] = router[1].b_arb_write[9];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[9];
            assign icm_in_arb_address[0] = router[1].b_arb_address[9];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[9];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[9];
            assign router[1].b_arb_stall[9] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[9] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[9] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[9] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[9].port_enable[2] = icm_out_arb_enable;
            assign bank[9].port_read[2] = icm_out_arb_read;
            assign bank[9].port_write[2] = icm_out_arb_write;
            assign bank[9].port_address[2] = icm_out_arb_address;
            assign bank[9].port_writedata[2] = icm_out_arb_writedata;
            assign bank[9].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[9].port_waitrequest[2];
            assign icm_out_rrp_data = bank[9].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[9].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank10
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[10];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[10];
            assign icm_in_arb_read[0] = router[1].b_arb_read[10];
            assign icm_in_arb_write[0] = router[1].b_arb_write[10];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[10];
            assign icm_in_arb_address[0] = router[1].b_arb_address[10];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[10];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[10];
            assign router[1].b_arb_stall[10] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[10] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[10] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[10] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[10].port_enable[2] = icm_out_arb_enable;
            assign bank[10].port_read[2] = icm_out_arb_read;
            assign bank[10].port_write[2] = icm_out_arb_write;
            assign bank[10].port_address[2] = icm_out_arb_address;
            assign bank[10].port_writedata[2] = icm_out_arb_writedata;
            assign bank[10].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[10].port_waitrequest[2];
            assign icm_out_rrp_data = bank[10].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[10].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank11
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[11];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[11];
            assign icm_in_arb_read[0] = router[1].b_arb_read[11];
            assign icm_in_arb_write[0] = router[1].b_arb_write[11];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[11];
            assign icm_in_arb_address[0] = router[1].b_arb_address[11];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[11];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[11];
            assign router[1].b_arb_stall[11] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[11] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[11] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[11] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[11].port_enable[2] = icm_out_arb_enable;
            assign bank[11].port_read[2] = icm_out_arb_read;
            assign bank[11].port_write[2] = icm_out_arb_write;
            assign bank[11].port_address[2] = icm_out_arb_address;
            assign bank[11].port_writedata[2] = icm_out_arb_writedata;
            assign bank[11].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[11].port_waitrequest[2];
            assign icm_out_rrp_data = bank[11].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[11].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank12
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[12];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[12];
            assign icm_in_arb_read[0] = router[1].b_arb_read[12];
            assign icm_in_arb_write[0] = router[1].b_arb_write[12];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[12];
            assign icm_in_arb_address[0] = router[1].b_arb_address[12];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[12];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[12];
            assign router[1].b_arb_stall[12] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[12] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[12] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[12] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[12].port_enable[2] = icm_out_arb_enable;
            assign bank[12].port_read[2] = icm_out_arb_read;
            assign bank[12].port_write[2] = icm_out_arb_write;
            assign bank[12].port_address[2] = icm_out_arb_address;
            assign bank[12].port_writedata[2] = icm_out_arb_writedata;
            assign bank[12].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[12].port_waitrequest[2];
            assign icm_out_rrp_data = bank[12].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[12].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank13
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[13];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[13];
            assign icm_in_arb_read[0] = router[1].b_arb_read[13];
            assign icm_in_arb_write[0] = router[1].b_arb_write[13];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[13];
            assign icm_in_arb_address[0] = router[1].b_arb_address[13];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[13];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[13];
            assign router[1].b_arb_stall[13] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[13] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[13] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[13] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[13].port_enable[2] = icm_out_arb_enable;
            assign bank[13].port_read[2] = icm_out_arb_read;
            assign bank[13].port_write[2] = icm_out_arb_write;
            assign bank[13].port_address[2] = icm_out_arb_address;
            assign bank[13].port_writedata[2] = icm_out_arb_writedata;
            assign bank[13].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[13].port_waitrequest[2];
            assign icm_out_rrp_data = bank[13].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[13].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank14
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[14];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[14];
            assign icm_in_arb_read[0] = router[1].b_arb_read[14];
            assign icm_in_arb_write[0] = router[1].b_arb_write[14];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[14];
            assign icm_in_arb_address[0] = router[1].b_arb_address[14];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[14];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[14];
            assign router[1].b_arb_stall[14] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[14] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[14] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[14] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[14].port_enable[2] = icm_out_arb_enable;
            assign bank[14].port_read[2] = icm_out_arb_read;
            assign bank[14].port_write[2] = icm_out_arb_write;
            assign bank[14].port_address[2] = icm_out_arb_address;
            assign bank[14].port_writedata[2] = icm_out_arb_writedata;
            assign bank[14].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[14].port_waitrequest[2];
            assign icm_out_rrp_data = bank[14].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[14].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank15
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[15];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[15];
            assign icm_in_arb_read[0] = router[1].b_arb_read[15];
            assign icm_in_arb_write[0] = router[1].b_arb_write[15];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[15];
            assign icm_in_arb_address[0] = router[1].b_arb_address[15];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[15];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[15];
            assign router[1].b_arb_stall[15] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[15] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[15] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[15] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[15].port_enable[2] = icm_out_arb_enable;
            assign bank[15].port_read[2] = icm_out_arb_read;
            assign bank[15].port_write[2] = icm_out_arb_write;
            assign bank[15].port_address[2] = icm_out_arb_address;
            assign bank[15].port_writedata[2] = icm_out_arb_writedata;
            assign bank[15].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[15].port_waitrequest[2];
            assign icm_out_rrp_data = bank[15].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[15].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[1] = |invalid_access_grps;
   end
   endgenerate

   generate
   begin:local_mem_system_aspace66
      logic local_icm_arb_request [1][4];
      logic local_icm_arb_enable [1][4];
      logic local_icm_arb_read [1][4];
      logic local_icm_arb_write [1][4];
      logic local_icm_arb_burstcount [1][4];
      logic [4:0] local_icm_arb_address [1][4];
      logic [511:0] local_icm_arb_writedata [1][4];
      logic [63:0] local_icm_arb_byteenable [1][4];
      logic local_icm_arb_stall [1][4];
      logic local_icm_wrp_ack [1][4];
      logic local_icm_rrp_datavalid [1][4];
      logic [511:0] local_icm_rrp_data [1][4];
      logic invalid_access_grps;

      for( __k = 0; __k < 1; __k = __k + 1 )
      begin:local_mem_group
         for( __l = 0; __l < 4; __l = __l + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(512),
               .WRITEDATA_W(512),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(64)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace66_enable[__k][__l]),
               .avm_read(local_avm_aspace66_read[__k][__l]),
               .avm_write(local_avm_aspace66_write[__k][__l]),
               .avm_address(local_avm_aspace66_address[__k][__l]),
               .avm_writedata(local_avm_aspace66_writedata[__k][__l]),
               .avm_byteenable(local_avm_aspace66_byteenable[__k][__l]),
               .avm_waitrequest(local_avm_aspace66_waitrequest[__k][__l]),
               .avm_readdata(local_avm_aspace66_readdata[__k][__l]),
               .avm_readdatavalid(local_avm_aspace66_readdatavalid[__k][__l]),
               .avm_burstcount(local_avm_aspace66_burstcount[__k][__l]),
               .avm_writeack(local_avm_aspace66_writeack[__k][__l]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__k][__l]),
               .ic_arb_enable(local_icm_arb_enable[__k][__l]),
               .ic_arb_read(local_icm_arb_read[__k][__l]),
               .ic_arb_write(local_icm_arb_write[__k][__l]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .ic_arb_address(local_icm_arb_address[__k][__l]),
               .ic_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .ic_arb_stall(local_icm_arb_stall[__k][__l]),
               .ic_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .ic_rrp_data(local_icm_rrp_data[__k][__l])
            );

         end

         for( __l = 0; __l < 16; __l = __l + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic port_address [1:4];
            logic [511:0] port_writedata [1:4];
            logic [63:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [511:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(2),
               .WIDTH(512),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __l = 0; __l < 4; __l = __l + 1 )
         begin:router
            logic b_arb_request [16];
            logic b_arb_enable [16];
            logic b_arb_read [16];
            logic b_arb_write [16];
            logic b_arb_burstcount [16];
            logic b_arb_address [16];
            logic [511:0] b_arb_writedata [16];
            logic [63:0] b_arb_byteenable [16];
            logic b_arb_stall [16];
            logic b_wrp_ack [16];
            logic b_rrp_datavalid [16];
            logic [511:0] b_rrp_data [16];
            logic [15:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(512),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(5),
               .BYTEENA_W(64),
               .NUM_BANKS(16)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__k][__l]),
               .m_arb_enable(local_icm_arb_enable[__k][__l]),
               .m_arb_read(local_icm_arb_read[__k][__l]),
               .m_arb_write(local_icm_arb_write[__k][__l]),
               .m_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .m_arb_address(local_icm_arb_address[__k][__l]),
               .m_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .m_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .m_arb_stall(local_icm_arb_stall[__k][__l]),
               .m_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .m_rrp_data(local_icm_rrp_data[__k][__l]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__k][__l][4:1] == 4'b0000);
            assign bank_select[1] = (local_icm_arb_address[__k][__l][4:1] == 4'b0001);
            assign bank_select[2] = (local_icm_arb_address[__k][__l][4:1] == 4'b0010);
            assign bank_select[3] = (local_icm_arb_address[__k][__l][4:1] == 4'b0011);
            assign bank_select[4] = (local_icm_arb_address[__k][__l][4:1] == 4'b0100);
            assign bank_select[5] = (local_icm_arb_address[__k][__l][4:1] == 4'b0101);
            assign bank_select[6] = (local_icm_arb_address[__k][__l][4:1] == 4'b0110);
            assign bank_select[7] = (local_icm_arb_address[__k][__l][4:1] == 4'b0111);
            assign bank_select[8] = (local_icm_arb_address[__k][__l][4:1] == 4'b1000);
            assign bank_select[9] = (local_icm_arb_address[__k][__l][4:1] == 4'b1001);
            assign bank_select[10] = (local_icm_arb_address[__k][__l][4:1] == 4'b1010);
            assign bank_select[11] = (local_icm_arb_address[__k][__l][4:1] == 4'b1011);
            assign bank_select[12] = (local_icm_arb_address[__k][__l][4:1] == 4'b1100);
            assign bank_select[13] = (local_icm_arb_address[__k][__l][4:1] == 4'b1101);
            assign bank_select[14] = (local_icm_arb_address[__k][__l][4:1] == 4'b1110);
            assign bank_select[15] = (local_icm_arb_address[__k][__l][4:1] == 4'b1111);
         end

         assign invalid_access_grps = 'b0;
         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[1].b_arb_read[1];
            assign icm_in_arb_write[0] = router[1].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[1].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[1];
            assign router[1].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[1].b_arb_read[2];
            assign icm_in_arb_write[0] = router[1].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[1].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[2];
            assign router[1].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[1] = icm_out_arb_enable;
            assign bank[2].port_read[1] = icm_out_arb_read;
            assign bank[2].port_write[1] = icm_out_arb_write;
            assign bank[2].port_address[1] = icm_out_arb_address;
            assign bank[2].port_writedata[1] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[1];
            assign icm_out_rrp_data = bank[2].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[1].b_arb_read[3];
            assign icm_in_arb_write[0] = router[1].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[1].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[3];
            assign router[1].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[1] = icm_out_arb_enable;
            assign bank[3].port_read[1] = icm_out_arb_read;
            assign bank[3].port_write[1] = icm_out_arb_write;
            assign bank[3].port_address[1] = icm_out_arb_address;
            assign bank[3].port_writedata[1] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[1];
            assign icm_out_rrp_data = bank[3].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank4
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[4];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[4];
            assign icm_in_arb_read[0] = router[1].b_arb_read[4];
            assign icm_in_arb_write[0] = router[1].b_arb_write[4];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[4];
            assign icm_in_arb_address[0] = router[1].b_arb_address[4];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[4];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[4];
            assign router[1].b_arb_stall[4] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[4] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[4] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[4] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[4].port_enable[1] = icm_out_arb_enable;
            assign bank[4].port_read[1] = icm_out_arb_read;
            assign bank[4].port_write[1] = icm_out_arb_write;
            assign bank[4].port_address[1] = icm_out_arb_address;
            assign bank[4].port_writedata[1] = icm_out_arb_writedata;
            assign bank[4].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[4].port_waitrequest[1];
            assign icm_out_rrp_data = bank[4].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[4].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank5
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[5];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[5];
            assign icm_in_arb_read[0] = router[1].b_arb_read[5];
            assign icm_in_arb_write[0] = router[1].b_arb_write[5];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[5];
            assign icm_in_arb_address[0] = router[1].b_arb_address[5];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[5];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[5];
            assign router[1].b_arb_stall[5] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[5] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[5] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[5] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[5].port_enable[1] = icm_out_arb_enable;
            assign bank[5].port_read[1] = icm_out_arb_read;
            assign bank[5].port_write[1] = icm_out_arb_write;
            assign bank[5].port_address[1] = icm_out_arb_address;
            assign bank[5].port_writedata[1] = icm_out_arb_writedata;
            assign bank[5].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[5].port_waitrequest[1];
            assign icm_out_rrp_data = bank[5].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[5].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank6
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[6];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[6];
            assign icm_in_arb_read[0] = router[1].b_arb_read[6];
            assign icm_in_arb_write[0] = router[1].b_arb_write[6];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[6];
            assign icm_in_arb_address[0] = router[1].b_arb_address[6];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[6];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[6];
            assign router[1].b_arb_stall[6] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[6] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[6] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[6] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[6].port_enable[1] = icm_out_arb_enable;
            assign bank[6].port_read[1] = icm_out_arb_read;
            assign bank[6].port_write[1] = icm_out_arb_write;
            assign bank[6].port_address[1] = icm_out_arb_address;
            assign bank[6].port_writedata[1] = icm_out_arb_writedata;
            assign bank[6].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[6].port_waitrequest[1];
            assign icm_out_rrp_data = bank[6].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[6].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank7
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[7];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[7];
            assign icm_in_arb_read[0] = router[1].b_arb_read[7];
            assign icm_in_arb_write[0] = router[1].b_arb_write[7];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[7];
            assign icm_in_arb_address[0] = router[1].b_arb_address[7];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[7];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[7];
            assign router[1].b_arb_stall[7] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[7] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[7] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[7] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[7].port_enable[1] = icm_out_arb_enable;
            assign bank[7].port_read[1] = icm_out_arb_read;
            assign bank[7].port_write[1] = icm_out_arb_write;
            assign bank[7].port_address[1] = icm_out_arb_address;
            assign bank[7].port_writedata[1] = icm_out_arb_writedata;
            assign bank[7].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[7].port_waitrequest[1];
            assign icm_out_rrp_data = bank[7].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[7].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank8
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[8];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[8];
            assign icm_in_arb_read[0] = router[1].b_arb_read[8];
            assign icm_in_arb_write[0] = router[1].b_arb_write[8];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[8];
            assign icm_in_arb_address[0] = router[1].b_arb_address[8];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[8];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[8];
            assign router[1].b_arb_stall[8] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[8] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[8] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[8] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[8].port_enable[1] = icm_out_arb_enable;
            assign bank[8].port_read[1] = icm_out_arb_read;
            assign bank[8].port_write[1] = icm_out_arb_write;
            assign bank[8].port_address[1] = icm_out_arb_address;
            assign bank[8].port_writedata[1] = icm_out_arb_writedata;
            assign bank[8].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[8].port_waitrequest[1];
            assign icm_out_rrp_data = bank[8].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[8].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank9
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[9];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[9];
            assign icm_in_arb_read[0] = router[1].b_arb_read[9];
            assign icm_in_arb_write[0] = router[1].b_arb_write[9];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[9];
            assign icm_in_arb_address[0] = router[1].b_arb_address[9];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[9];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[9];
            assign router[1].b_arb_stall[9] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[9] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[9] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[9] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[9].port_enable[1] = icm_out_arb_enable;
            assign bank[9].port_read[1] = icm_out_arb_read;
            assign bank[9].port_write[1] = icm_out_arb_write;
            assign bank[9].port_address[1] = icm_out_arb_address;
            assign bank[9].port_writedata[1] = icm_out_arb_writedata;
            assign bank[9].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[9].port_waitrequest[1];
            assign icm_out_rrp_data = bank[9].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[9].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank10
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[10];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[10];
            assign icm_in_arb_read[0] = router[1].b_arb_read[10];
            assign icm_in_arb_write[0] = router[1].b_arb_write[10];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[10];
            assign icm_in_arb_address[0] = router[1].b_arb_address[10];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[10];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[10];
            assign router[1].b_arb_stall[10] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[10] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[10] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[10] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[10].port_enable[1] = icm_out_arb_enable;
            assign bank[10].port_read[1] = icm_out_arb_read;
            assign bank[10].port_write[1] = icm_out_arb_write;
            assign bank[10].port_address[1] = icm_out_arb_address;
            assign bank[10].port_writedata[1] = icm_out_arb_writedata;
            assign bank[10].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[10].port_waitrequest[1];
            assign icm_out_rrp_data = bank[10].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[10].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank11
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[11];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[11];
            assign icm_in_arb_read[0] = router[1].b_arb_read[11];
            assign icm_in_arb_write[0] = router[1].b_arb_write[11];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[11];
            assign icm_in_arb_address[0] = router[1].b_arb_address[11];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[11];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[11];
            assign router[1].b_arb_stall[11] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[11] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[11] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[11] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[11].port_enable[1] = icm_out_arb_enable;
            assign bank[11].port_read[1] = icm_out_arb_read;
            assign bank[11].port_write[1] = icm_out_arb_write;
            assign bank[11].port_address[1] = icm_out_arb_address;
            assign bank[11].port_writedata[1] = icm_out_arb_writedata;
            assign bank[11].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[11].port_waitrequest[1];
            assign icm_out_rrp_data = bank[11].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[11].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank12
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[12];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[12];
            assign icm_in_arb_read[0] = router[1].b_arb_read[12];
            assign icm_in_arb_write[0] = router[1].b_arb_write[12];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[12];
            assign icm_in_arb_address[0] = router[1].b_arb_address[12];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[12];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[12];
            assign router[1].b_arb_stall[12] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[12] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[12] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[12] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[12].port_enable[1] = icm_out_arb_enable;
            assign bank[12].port_read[1] = icm_out_arb_read;
            assign bank[12].port_write[1] = icm_out_arb_write;
            assign bank[12].port_address[1] = icm_out_arb_address;
            assign bank[12].port_writedata[1] = icm_out_arb_writedata;
            assign bank[12].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[12].port_waitrequest[1];
            assign icm_out_rrp_data = bank[12].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[12].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank13
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[13];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[13];
            assign icm_in_arb_read[0] = router[1].b_arb_read[13];
            assign icm_in_arb_write[0] = router[1].b_arb_write[13];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[13];
            assign icm_in_arb_address[0] = router[1].b_arb_address[13];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[13];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[13];
            assign router[1].b_arb_stall[13] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[13] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[13] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[13] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[13].port_enable[1] = icm_out_arb_enable;
            assign bank[13].port_read[1] = icm_out_arb_read;
            assign bank[13].port_write[1] = icm_out_arb_write;
            assign bank[13].port_address[1] = icm_out_arb_address;
            assign bank[13].port_writedata[1] = icm_out_arb_writedata;
            assign bank[13].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[13].port_waitrequest[1];
            assign icm_out_rrp_data = bank[13].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[13].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank14
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[14];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[14];
            assign icm_in_arb_read[0] = router[1].b_arb_read[14];
            assign icm_in_arb_write[0] = router[1].b_arb_write[14];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[14];
            assign icm_in_arb_address[0] = router[1].b_arb_address[14];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[14];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[14];
            assign router[1].b_arb_stall[14] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[14] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[14] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[14] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[14].port_enable[1] = icm_out_arb_enable;
            assign bank[14].port_read[1] = icm_out_arb_read;
            assign bank[14].port_write[1] = icm_out_arb_write;
            assign bank[14].port_address[1] = icm_out_arb_address;
            assign bank[14].port_writedata[1] = icm_out_arb_writedata;
            assign bank[14].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[14].port_waitrequest[1];
            assign icm_out_rrp_data = bank[14].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[14].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank15
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[15];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[15];
            assign icm_in_arb_read[0] = router[1].b_arb_read[15];
            assign icm_in_arb_write[0] = router[1].b_arb_write[15];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[15];
            assign icm_in_arb_address[0] = router[1].b_arb_address[15];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[15];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[15];
            assign router[1].b_arb_stall[15] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[15] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[15] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[15] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[15].port_enable[1] = icm_out_arb_enable;
            assign bank[15].port_read[1] = icm_out_arb_read;
            assign bank[15].port_write[1] = icm_out_arb_write;
            assign bank[15].port_address[1] = icm_out_arb_address;
            assign bank[15].port_writedata[1] = icm_out_arb_writedata;
            assign bank[15].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[15].port_waitrequest[1];
            assign icm_out_rrp_data = bank[15].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[15].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[0].b_arb_read[1];
            assign icm_in_arb_write[0] = router[0].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[0].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[1];
            assign router[0].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[0].b_arb_read[2];
            assign icm_in_arb_write[0] = router[0].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[0].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[2];
            assign router[0].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[2] = icm_out_arb_enable;
            assign bank[2].port_read[2] = icm_out_arb_read;
            assign bank[2].port_write[2] = icm_out_arb_write;
            assign bank[2].port_address[2] = icm_out_arb_address;
            assign bank[2].port_writedata[2] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[2];
            assign icm_out_rrp_data = bank[2].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[0].b_arb_read[3];
            assign icm_in_arb_write[0] = router[0].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[0].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[3];
            assign router[0].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[2] = icm_out_arb_enable;
            assign bank[3].port_read[2] = icm_out_arb_read;
            assign bank[3].port_write[2] = icm_out_arb_write;
            assign bank[3].port_address[2] = icm_out_arb_address;
            assign bank[3].port_writedata[2] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[2];
            assign icm_out_rrp_data = bank[3].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank4
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[4];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[4];
            assign icm_in_arb_read[0] = router[0].b_arb_read[4];
            assign icm_in_arb_write[0] = router[0].b_arb_write[4];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[4];
            assign icm_in_arb_address[0] = router[0].b_arb_address[4];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[4];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[4];
            assign router[0].b_arb_stall[4] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[4] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[4] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[4] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[4].port_enable[2] = icm_out_arb_enable;
            assign bank[4].port_read[2] = icm_out_arb_read;
            assign bank[4].port_write[2] = icm_out_arb_write;
            assign bank[4].port_address[2] = icm_out_arb_address;
            assign bank[4].port_writedata[2] = icm_out_arb_writedata;
            assign bank[4].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[4].port_waitrequest[2];
            assign icm_out_rrp_data = bank[4].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[4].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank5
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[5];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[5];
            assign icm_in_arb_read[0] = router[0].b_arb_read[5];
            assign icm_in_arb_write[0] = router[0].b_arb_write[5];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[5];
            assign icm_in_arb_address[0] = router[0].b_arb_address[5];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[5];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[5];
            assign router[0].b_arb_stall[5] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[5] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[5] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[5] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[5].port_enable[2] = icm_out_arb_enable;
            assign bank[5].port_read[2] = icm_out_arb_read;
            assign bank[5].port_write[2] = icm_out_arb_write;
            assign bank[5].port_address[2] = icm_out_arb_address;
            assign bank[5].port_writedata[2] = icm_out_arb_writedata;
            assign bank[5].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[5].port_waitrequest[2];
            assign icm_out_rrp_data = bank[5].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[5].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank6
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[6];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[6];
            assign icm_in_arb_read[0] = router[0].b_arb_read[6];
            assign icm_in_arb_write[0] = router[0].b_arb_write[6];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[6];
            assign icm_in_arb_address[0] = router[0].b_arb_address[6];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[6];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[6];
            assign router[0].b_arb_stall[6] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[6] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[6] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[6] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[6].port_enable[2] = icm_out_arb_enable;
            assign bank[6].port_read[2] = icm_out_arb_read;
            assign bank[6].port_write[2] = icm_out_arb_write;
            assign bank[6].port_address[2] = icm_out_arb_address;
            assign bank[6].port_writedata[2] = icm_out_arb_writedata;
            assign bank[6].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[6].port_waitrequest[2];
            assign icm_out_rrp_data = bank[6].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[6].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank7
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[7];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[7];
            assign icm_in_arb_read[0] = router[0].b_arb_read[7];
            assign icm_in_arb_write[0] = router[0].b_arb_write[7];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[7];
            assign icm_in_arb_address[0] = router[0].b_arb_address[7];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[7];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[7];
            assign router[0].b_arb_stall[7] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[7] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[7] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[7] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[7].port_enable[2] = icm_out_arb_enable;
            assign bank[7].port_read[2] = icm_out_arb_read;
            assign bank[7].port_write[2] = icm_out_arb_write;
            assign bank[7].port_address[2] = icm_out_arb_address;
            assign bank[7].port_writedata[2] = icm_out_arb_writedata;
            assign bank[7].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[7].port_waitrequest[2];
            assign icm_out_rrp_data = bank[7].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[7].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank8
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[8];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[8];
            assign icm_in_arb_read[0] = router[0].b_arb_read[8];
            assign icm_in_arb_write[0] = router[0].b_arb_write[8];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[8];
            assign icm_in_arb_address[0] = router[0].b_arb_address[8];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[8];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[8];
            assign router[0].b_arb_stall[8] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[8] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[8] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[8] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[8].port_enable[2] = icm_out_arb_enable;
            assign bank[8].port_read[2] = icm_out_arb_read;
            assign bank[8].port_write[2] = icm_out_arb_write;
            assign bank[8].port_address[2] = icm_out_arb_address;
            assign bank[8].port_writedata[2] = icm_out_arb_writedata;
            assign bank[8].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[8].port_waitrequest[2];
            assign icm_out_rrp_data = bank[8].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[8].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank9
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[9];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[9];
            assign icm_in_arb_read[0] = router[0].b_arb_read[9];
            assign icm_in_arb_write[0] = router[0].b_arb_write[9];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[9];
            assign icm_in_arb_address[0] = router[0].b_arb_address[9];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[9];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[9];
            assign router[0].b_arb_stall[9] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[9] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[9] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[9] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[9].port_enable[2] = icm_out_arb_enable;
            assign bank[9].port_read[2] = icm_out_arb_read;
            assign bank[9].port_write[2] = icm_out_arb_write;
            assign bank[9].port_address[2] = icm_out_arb_address;
            assign bank[9].port_writedata[2] = icm_out_arb_writedata;
            assign bank[9].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[9].port_waitrequest[2];
            assign icm_out_rrp_data = bank[9].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[9].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank10
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[10];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[10];
            assign icm_in_arb_read[0] = router[0].b_arb_read[10];
            assign icm_in_arb_write[0] = router[0].b_arb_write[10];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[10];
            assign icm_in_arb_address[0] = router[0].b_arb_address[10];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[10];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[10];
            assign router[0].b_arb_stall[10] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[10] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[10] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[10] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[10].port_enable[2] = icm_out_arb_enable;
            assign bank[10].port_read[2] = icm_out_arb_read;
            assign bank[10].port_write[2] = icm_out_arb_write;
            assign bank[10].port_address[2] = icm_out_arb_address;
            assign bank[10].port_writedata[2] = icm_out_arb_writedata;
            assign bank[10].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[10].port_waitrequest[2];
            assign icm_out_rrp_data = bank[10].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[10].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank11
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[11];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[11];
            assign icm_in_arb_read[0] = router[0].b_arb_read[11];
            assign icm_in_arb_write[0] = router[0].b_arb_write[11];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[11];
            assign icm_in_arb_address[0] = router[0].b_arb_address[11];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[11];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[11];
            assign router[0].b_arb_stall[11] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[11] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[11] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[11] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[11].port_enable[2] = icm_out_arb_enable;
            assign bank[11].port_read[2] = icm_out_arb_read;
            assign bank[11].port_write[2] = icm_out_arb_write;
            assign bank[11].port_address[2] = icm_out_arb_address;
            assign bank[11].port_writedata[2] = icm_out_arb_writedata;
            assign bank[11].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[11].port_waitrequest[2];
            assign icm_out_rrp_data = bank[11].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[11].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank12
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[12];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[12];
            assign icm_in_arb_read[0] = router[0].b_arb_read[12];
            assign icm_in_arb_write[0] = router[0].b_arb_write[12];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[12];
            assign icm_in_arb_address[0] = router[0].b_arb_address[12];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[12];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[12];
            assign router[0].b_arb_stall[12] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[12] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[12] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[12] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[12].port_enable[2] = icm_out_arb_enable;
            assign bank[12].port_read[2] = icm_out_arb_read;
            assign bank[12].port_write[2] = icm_out_arb_write;
            assign bank[12].port_address[2] = icm_out_arb_address;
            assign bank[12].port_writedata[2] = icm_out_arb_writedata;
            assign bank[12].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[12].port_waitrequest[2];
            assign icm_out_rrp_data = bank[12].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[12].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank13
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[13];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[13];
            assign icm_in_arb_read[0] = router[0].b_arb_read[13];
            assign icm_in_arb_write[0] = router[0].b_arb_write[13];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[13];
            assign icm_in_arb_address[0] = router[0].b_arb_address[13];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[13];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[13];
            assign router[0].b_arb_stall[13] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[13] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[13] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[13] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[13].port_enable[2] = icm_out_arb_enable;
            assign bank[13].port_read[2] = icm_out_arb_read;
            assign bank[13].port_write[2] = icm_out_arb_write;
            assign bank[13].port_address[2] = icm_out_arb_address;
            assign bank[13].port_writedata[2] = icm_out_arb_writedata;
            assign bank[13].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[13].port_waitrequest[2];
            assign icm_out_rrp_data = bank[13].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[13].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank14
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[14];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[14];
            assign icm_in_arb_read[0] = router[0].b_arb_read[14];
            assign icm_in_arb_write[0] = router[0].b_arb_write[14];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[14];
            assign icm_in_arb_address[0] = router[0].b_arb_address[14];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[14];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[14];
            assign router[0].b_arb_stall[14] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[14] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[14] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[14] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[14].port_enable[2] = icm_out_arb_enable;
            assign bank[14].port_read[2] = icm_out_arb_read;
            assign bank[14].port_write[2] = icm_out_arb_write;
            assign bank[14].port_address[2] = icm_out_arb_address;
            assign bank[14].port_writedata[2] = icm_out_arb_writedata;
            assign bank[14].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[14].port_waitrequest[2];
            assign icm_out_rrp_data = bank[14].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[14].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank15
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[15];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[15];
            assign icm_in_arb_read[0] = router[0].b_arb_read[15];
            assign icm_in_arb_write[0] = router[0].b_arb_write[15];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[15];
            assign icm_in_arb_address[0] = router[0].b_arb_address[15];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[15];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[15];
            assign router[0].b_arb_stall[15] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[15] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[15] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[15] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[15].port_enable[2] = icm_out_arb_enable;
            assign bank[15].port_read[2] = icm_out_arb_read;
            assign bank[15].port_write[2] = icm_out_arb_write;
            assign bank[15].port_address[2] = icm_out_arb_address;
            assign bank[15].port_writedata[2] = icm_out_arb_writedata;
            assign bank[15].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[15].port_waitrequest[2];
            assign icm_out_rrp_data = bank[15].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[15].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[3] = icm_out_arb_enable;
            assign bank[1].port_read[3] = icm_out_arb_read;
            assign bank[1].port_write[3] = icm_out_arb_write;
            assign bank[1].port_address[3] = icm_out_arb_address;
            assign bank[1].port_writedata[3] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[3];
            assign icm_out_rrp_data = bank[1].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[2].b_arb_read[2];
            assign icm_in_arb_write[0] = router[2].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[2].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[2];
            assign router[2].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[3] = icm_out_arb_enable;
            assign bank[2].port_read[3] = icm_out_arb_read;
            assign bank[2].port_write[3] = icm_out_arb_write;
            assign bank[2].port_address[3] = icm_out_arb_address;
            assign bank[2].port_writedata[3] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[3];
            assign icm_out_rrp_data = bank[2].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[2].b_arb_read[3];
            assign icm_in_arb_write[0] = router[2].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[2].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[3];
            assign router[2].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[3] = icm_out_arb_enable;
            assign bank[3].port_read[3] = icm_out_arb_read;
            assign bank[3].port_write[3] = icm_out_arb_write;
            assign bank[3].port_address[3] = icm_out_arb_address;
            assign bank[3].port_writedata[3] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[3];
            assign icm_out_rrp_data = bank[3].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank4
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[4];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[4];
            assign icm_in_arb_read[0] = router[2].b_arb_read[4];
            assign icm_in_arb_write[0] = router[2].b_arb_write[4];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[4];
            assign icm_in_arb_address[0] = router[2].b_arb_address[4];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[4];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[4];
            assign router[2].b_arb_stall[4] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[4] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[4] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[4] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[4].port_enable[3] = icm_out_arb_enable;
            assign bank[4].port_read[3] = icm_out_arb_read;
            assign bank[4].port_write[3] = icm_out_arb_write;
            assign bank[4].port_address[3] = icm_out_arb_address;
            assign bank[4].port_writedata[3] = icm_out_arb_writedata;
            assign bank[4].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[4].port_waitrequest[3];
            assign icm_out_rrp_data = bank[4].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[4].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank5
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[5];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[5];
            assign icm_in_arb_read[0] = router[2].b_arb_read[5];
            assign icm_in_arb_write[0] = router[2].b_arb_write[5];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[5];
            assign icm_in_arb_address[0] = router[2].b_arb_address[5];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[5];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[5];
            assign router[2].b_arb_stall[5] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[5] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[5] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[5] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[5].port_enable[3] = icm_out_arb_enable;
            assign bank[5].port_read[3] = icm_out_arb_read;
            assign bank[5].port_write[3] = icm_out_arb_write;
            assign bank[5].port_address[3] = icm_out_arb_address;
            assign bank[5].port_writedata[3] = icm_out_arb_writedata;
            assign bank[5].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[5].port_waitrequest[3];
            assign icm_out_rrp_data = bank[5].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[5].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank6
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[6];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[6];
            assign icm_in_arb_read[0] = router[2].b_arb_read[6];
            assign icm_in_arb_write[0] = router[2].b_arb_write[6];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[6];
            assign icm_in_arb_address[0] = router[2].b_arb_address[6];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[6];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[6];
            assign router[2].b_arb_stall[6] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[6] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[6] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[6] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[6].port_enable[3] = icm_out_arb_enable;
            assign bank[6].port_read[3] = icm_out_arb_read;
            assign bank[6].port_write[3] = icm_out_arb_write;
            assign bank[6].port_address[3] = icm_out_arb_address;
            assign bank[6].port_writedata[3] = icm_out_arb_writedata;
            assign bank[6].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[6].port_waitrequest[3];
            assign icm_out_rrp_data = bank[6].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[6].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank7
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[7];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[7];
            assign icm_in_arb_read[0] = router[2].b_arb_read[7];
            assign icm_in_arb_write[0] = router[2].b_arb_write[7];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[7];
            assign icm_in_arb_address[0] = router[2].b_arb_address[7];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[7];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[7];
            assign router[2].b_arb_stall[7] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[7] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[7] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[7] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[7].port_enable[3] = icm_out_arb_enable;
            assign bank[7].port_read[3] = icm_out_arb_read;
            assign bank[7].port_write[3] = icm_out_arb_write;
            assign bank[7].port_address[3] = icm_out_arb_address;
            assign bank[7].port_writedata[3] = icm_out_arb_writedata;
            assign bank[7].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[7].port_waitrequest[3];
            assign icm_out_rrp_data = bank[7].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[7].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank8
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[8];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[8];
            assign icm_in_arb_read[0] = router[2].b_arb_read[8];
            assign icm_in_arb_write[0] = router[2].b_arb_write[8];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[8];
            assign icm_in_arb_address[0] = router[2].b_arb_address[8];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[8];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[8];
            assign router[2].b_arb_stall[8] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[8] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[8] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[8] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[8].port_enable[3] = icm_out_arb_enable;
            assign bank[8].port_read[3] = icm_out_arb_read;
            assign bank[8].port_write[3] = icm_out_arb_write;
            assign bank[8].port_address[3] = icm_out_arb_address;
            assign bank[8].port_writedata[3] = icm_out_arb_writedata;
            assign bank[8].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[8].port_waitrequest[3];
            assign icm_out_rrp_data = bank[8].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[8].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank9
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[9];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[9];
            assign icm_in_arb_read[0] = router[2].b_arb_read[9];
            assign icm_in_arb_write[0] = router[2].b_arb_write[9];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[9];
            assign icm_in_arb_address[0] = router[2].b_arb_address[9];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[9];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[9];
            assign router[2].b_arb_stall[9] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[9] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[9] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[9] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[9].port_enable[3] = icm_out_arb_enable;
            assign bank[9].port_read[3] = icm_out_arb_read;
            assign bank[9].port_write[3] = icm_out_arb_write;
            assign bank[9].port_address[3] = icm_out_arb_address;
            assign bank[9].port_writedata[3] = icm_out_arb_writedata;
            assign bank[9].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[9].port_waitrequest[3];
            assign icm_out_rrp_data = bank[9].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[9].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank10
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[10];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[10];
            assign icm_in_arb_read[0] = router[2].b_arb_read[10];
            assign icm_in_arb_write[0] = router[2].b_arb_write[10];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[10];
            assign icm_in_arb_address[0] = router[2].b_arb_address[10];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[10];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[10];
            assign router[2].b_arb_stall[10] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[10] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[10] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[10] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[10].port_enable[3] = icm_out_arb_enable;
            assign bank[10].port_read[3] = icm_out_arb_read;
            assign bank[10].port_write[3] = icm_out_arb_write;
            assign bank[10].port_address[3] = icm_out_arb_address;
            assign bank[10].port_writedata[3] = icm_out_arb_writedata;
            assign bank[10].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[10].port_waitrequest[3];
            assign icm_out_rrp_data = bank[10].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[10].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank11
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[11];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[11];
            assign icm_in_arb_read[0] = router[2].b_arb_read[11];
            assign icm_in_arb_write[0] = router[2].b_arb_write[11];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[11];
            assign icm_in_arb_address[0] = router[2].b_arb_address[11];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[11];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[11];
            assign router[2].b_arb_stall[11] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[11] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[11] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[11] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[11].port_enable[3] = icm_out_arb_enable;
            assign bank[11].port_read[3] = icm_out_arb_read;
            assign bank[11].port_write[3] = icm_out_arb_write;
            assign bank[11].port_address[3] = icm_out_arb_address;
            assign bank[11].port_writedata[3] = icm_out_arb_writedata;
            assign bank[11].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[11].port_waitrequest[3];
            assign icm_out_rrp_data = bank[11].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[11].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank12
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[12];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[12];
            assign icm_in_arb_read[0] = router[2].b_arb_read[12];
            assign icm_in_arb_write[0] = router[2].b_arb_write[12];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[12];
            assign icm_in_arb_address[0] = router[2].b_arb_address[12];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[12];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[12];
            assign router[2].b_arb_stall[12] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[12] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[12] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[12] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[12].port_enable[3] = icm_out_arb_enable;
            assign bank[12].port_read[3] = icm_out_arb_read;
            assign bank[12].port_write[3] = icm_out_arb_write;
            assign bank[12].port_address[3] = icm_out_arb_address;
            assign bank[12].port_writedata[3] = icm_out_arb_writedata;
            assign bank[12].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[12].port_waitrequest[3];
            assign icm_out_rrp_data = bank[12].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[12].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank13
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[13];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[13];
            assign icm_in_arb_read[0] = router[2].b_arb_read[13];
            assign icm_in_arb_write[0] = router[2].b_arb_write[13];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[13];
            assign icm_in_arb_address[0] = router[2].b_arb_address[13];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[13];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[13];
            assign router[2].b_arb_stall[13] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[13] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[13] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[13] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[13].port_enable[3] = icm_out_arb_enable;
            assign bank[13].port_read[3] = icm_out_arb_read;
            assign bank[13].port_write[3] = icm_out_arb_write;
            assign bank[13].port_address[3] = icm_out_arb_address;
            assign bank[13].port_writedata[3] = icm_out_arb_writedata;
            assign bank[13].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[13].port_waitrequest[3];
            assign icm_out_rrp_data = bank[13].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[13].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank14
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[14];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[14];
            assign icm_in_arb_read[0] = router[2].b_arb_read[14];
            assign icm_in_arb_write[0] = router[2].b_arb_write[14];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[14];
            assign icm_in_arb_address[0] = router[2].b_arb_address[14];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[14];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[14];
            assign router[2].b_arb_stall[14] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[14] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[14] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[14] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[14].port_enable[3] = icm_out_arb_enable;
            assign bank[14].port_read[3] = icm_out_arb_read;
            assign bank[14].port_write[3] = icm_out_arb_write;
            assign bank[14].port_address[3] = icm_out_arb_address;
            assign bank[14].port_writedata[3] = icm_out_arb_writedata;
            assign bank[14].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[14].port_waitrequest[3];
            assign icm_out_rrp_data = bank[14].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[14].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port3bank15
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[15];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[15];
            assign icm_in_arb_read[0] = router[2].b_arb_read[15];
            assign icm_in_arb_write[0] = router[2].b_arb_write[15];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[15];
            assign icm_in_arb_address[0] = router[2].b_arb_address[15];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[15];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[15];
            assign router[2].b_arb_stall[15] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[15] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[15] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[15] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[15].port_enable[3] = icm_out_arb_enable;
            assign bank[15].port_read[3] = icm_out_arb_read;
            assign bank[15].port_write[3] = icm_out_arb_write;
            assign bank[15].port_address[3] = icm_out_arb_address;
            assign bank[15].port_writedata[3] = icm_out_arb_writedata;
            assign bank[15].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[15].port_waitrequest[3];
            assign icm_out_rrp_data = bank[15].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[15].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[3].b_arb_read[1];
            assign icm_in_arb_write[0] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[4] = icm_out_arb_enable;
            assign bank[1].port_read[4] = icm_out_arb_read;
            assign bank[1].port_write[4] = icm_out_arb_write;
            assign bank[1].port_address[4] = icm_out_arb_address;
            assign bank[1].port_writedata[4] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[4];
            assign icm_out_rrp_data = bank[1].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank2
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[2];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[2];
            assign icm_in_arb_read[0] = router[3].b_arb_read[2];
            assign icm_in_arb_write[0] = router[3].b_arb_write[2];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[2];
            assign icm_in_arb_address[0] = router[3].b_arb_address[2];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[2];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[2];
            assign router[3].b_arb_stall[2] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[2] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[2] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[2] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[2].port_enable[4] = icm_out_arb_enable;
            assign bank[2].port_read[4] = icm_out_arb_read;
            assign bank[2].port_write[4] = icm_out_arb_write;
            assign bank[2].port_address[4] = icm_out_arb_address;
            assign bank[2].port_writedata[4] = icm_out_arb_writedata;
            assign bank[2].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[2].port_waitrequest[4];
            assign icm_out_rrp_data = bank[2].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[2].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank3
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[3];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[3];
            assign icm_in_arb_read[0] = router[3].b_arb_read[3];
            assign icm_in_arb_write[0] = router[3].b_arb_write[3];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[3];
            assign icm_in_arb_address[0] = router[3].b_arb_address[3];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[3];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[3];
            assign router[3].b_arb_stall[3] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[3] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[3] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[3] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[3].port_enable[4] = icm_out_arb_enable;
            assign bank[3].port_read[4] = icm_out_arb_read;
            assign bank[3].port_write[4] = icm_out_arb_write;
            assign bank[3].port_address[4] = icm_out_arb_address;
            assign bank[3].port_writedata[4] = icm_out_arb_writedata;
            assign bank[3].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[3].port_waitrequest[4];
            assign icm_out_rrp_data = bank[3].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[3].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank4
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[4];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[4];
            assign icm_in_arb_read[0] = router[3].b_arb_read[4];
            assign icm_in_arb_write[0] = router[3].b_arb_write[4];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[4];
            assign icm_in_arb_address[0] = router[3].b_arb_address[4];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[4];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[4];
            assign router[3].b_arb_stall[4] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[4] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[4] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[4] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[4].port_enable[4] = icm_out_arb_enable;
            assign bank[4].port_read[4] = icm_out_arb_read;
            assign bank[4].port_write[4] = icm_out_arb_write;
            assign bank[4].port_address[4] = icm_out_arb_address;
            assign bank[4].port_writedata[4] = icm_out_arb_writedata;
            assign bank[4].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[4].port_waitrequest[4];
            assign icm_out_rrp_data = bank[4].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[4].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank5
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[5];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[5];
            assign icm_in_arb_read[0] = router[3].b_arb_read[5];
            assign icm_in_arb_write[0] = router[3].b_arb_write[5];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[5];
            assign icm_in_arb_address[0] = router[3].b_arb_address[5];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[5];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[5];
            assign router[3].b_arb_stall[5] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[5] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[5] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[5] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[5].port_enable[4] = icm_out_arb_enable;
            assign bank[5].port_read[4] = icm_out_arb_read;
            assign bank[5].port_write[4] = icm_out_arb_write;
            assign bank[5].port_address[4] = icm_out_arb_address;
            assign bank[5].port_writedata[4] = icm_out_arb_writedata;
            assign bank[5].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[5].port_waitrequest[4];
            assign icm_out_rrp_data = bank[5].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[5].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank6
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[6];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[6];
            assign icm_in_arb_read[0] = router[3].b_arb_read[6];
            assign icm_in_arb_write[0] = router[3].b_arb_write[6];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[6];
            assign icm_in_arb_address[0] = router[3].b_arb_address[6];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[6];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[6];
            assign router[3].b_arb_stall[6] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[6] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[6] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[6] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[6].port_enable[4] = icm_out_arb_enable;
            assign bank[6].port_read[4] = icm_out_arb_read;
            assign bank[6].port_write[4] = icm_out_arb_write;
            assign bank[6].port_address[4] = icm_out_arb_address;
            assign bank[6].port_writedata[4] = icm_out_arb_writedata;
            assign bank[6].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[6].port_waitrequest[4];
            assign icm_out_rrp_data = bank[6].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[6].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank7
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[7];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[7];
            assign icm_in_arb_read[0] = router[3].b_arb_read[7];
            assign icm_in_arb_write[0] = router[3].b_arb_write[7];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[7];
            assign icm_in_arb_address[0] = router[3].b_arb_address[7];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[7];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[7];
            assign router[3].b_arb_stall[7] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[7] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[7] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[7] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[7].port_enable[4] = icm_out_arb_enable;
            assign bank[7].port_read[4] = icm_out_arb_read;
            assign bank[7].port_write[4] = icm_out_arb_write;
            assign bank[7].port_address[4] = icm_out_arb_address;
            assign bank[7].port_writedata[4] = icm_out_arb_writedata;
            assign bank[7].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[7].port_waitrequest[4];
            assign icm_out_rrp_data = bank[7].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[7].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank8
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[8];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[8];
            assign icm_in_arb_read[0] = router[3].b_arb_read[8];
            assign icm_in_arb_write[0] = router[3].b_arb_write[8];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[8];
            assign icm_in_arb_address[0] = router[3].b_arb_address[8];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[8];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[8];
            assign router[3].b_arb_stall[8] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[8] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[8] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[8] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[8].port_enable[4] = icm_out_arb_enable;
            assign bank[8].port_read[4] = icm_out_arb_read;
            assign bank[8].port_write[4] = icm_out_arb_write;
            assign bank[8].port_address[4] = icm_out_arb_address;
            assign bank[8].port_writedata[4] = icm_out_arb_writedata;
            assign bank[8].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[8].port_waitrequest[4];
            assign icm_out_rrp_data = bank[8].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[8].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank9
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[9];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[9];
            assign icm_in_arb_read[0] = router[3].b_arb_read[9];
            assign icm_in_arb_write[0] = router[3].b_arb_write[9];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[9];
            assign icm_in_arb_address[0] = router[3].b_arb_address[9];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[9];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[9];
            assign router[3].b_arb_stall[9] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[9] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[9] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[9] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[9].port_enable[4] = icm_out_arb_enable;
            assign bank[9].port_read[4] = icm_out_arb_read;
            assign bank[9].port_write[4] = icm_out_arb_write;
            assign bank[9].port_address[4] = icm_out_arb_address;
            assign bank[9].port_writedata[4] = icm_out_arb_writedata;
            assign bank[9].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[9].port_waitrequest[4];
            assign icm_out_rrp_data = bank[9].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[9].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank10
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[10];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[10];
            assign icm_in_arb_read[0] = router[3].b_arb_read[10];
            assign icm_in_arb_write[0] = router[3].b_arb_write[10];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[10];
            assign icm_in_arb_address[0] = router[3].b_arb_address[10];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[10];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[10];
            assign router[3].b_arb_stall[10] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[10] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[10] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[10] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[10].port_enable[4] = icm_out_arb_enable;
            assign bank[10].port_read[4] = icm_out_arb_read;
            assign bank[10].port_write[4] = icm_out_arb_write;
            assign bank[10].port_address[4] = icm_out_arb_address;
            assign bank[10].port_writedata[4] = icm_out_arb_writedata;
            assign bank[10].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[10].port_waitrequest[4];
            assign icm_out_rrp_data = bank[10].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[10].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank11
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[11];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[11];
            assign icm_in_arb_read[0] = router[3].b_arb_read[11];
            assign icm_in_arb_write[0] = router[3].b_arb_write[11];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[11];
            assign icm_in_arb_address[0] = router[3].b_arb_address[11];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[11];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[11];
            assign router[3].b_arb_stall[11] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[11] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[11] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[11] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[11].port_enable[4] = icm_out_arb_enable;
            assign bank[11].port_read[4] = icm_out_arb_read;
            assign bank[11].port_write[4] = icm_out_arb_write;
            assign bank[11].port_address[4] = icm_out_arb_address;
            assign bank[11].port_writedata[4] = icm_out_arb_writedata;
            assign bank[11].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[11].port_waitrequest[4];
            assign icm_out_rrp_data = bank[11].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[11].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank12
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[12];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[12];
            assign icm_in_arb_read[0] = router[3].b_arb_read[12];
            assign icm_in_arb_write[0] = router[3].b_arb_write[12];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[12];
            assign icm_in_arb_address[0] = router[3].b_arb_address[12];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[12];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[12];
            assign router[3].b_arb_stall[12] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[12] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[12] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[12] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[12].port_enable[4] = icm_out_arb_enable;
            assign bank[12].port_read[4] = icm_out_arb_read;
            assign bank[12].port_write[4] = icm_out_arb_write;
            assign bank[12].port_address[4] = icm_out_arb_address;
            assign bank[12].port_writedata[4] = icm_out_arb_writedata;
            assign bank[12].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[12].port_waitrequest[4];
            assign icm_out_rrp_data = bank[12].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[12].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank13
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[13];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[13];
            assign icm_in_arb_read[0] = router[3].b_arb_read[13];
            assign icm_in_arb_write[0] = router[3].b_arb_write[13];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[13];
            assign icm_in_arb_address[0] = router[3].b_arb_address[13];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[13];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[13];
            assign router[3].b_arb_stall[13] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[13] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[13] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[13] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[13].port_enable[4] = icm_out_arb_enable;
            assign bank[13].port_read[4] = icm_out_arb_read;
            assign bank[13].port_write[4] = icm_out_arb_write;
            assign bank[13].port_address[4] = icm_out_arb_address;
            assign bank[13].port_writedata[4] = icm_out_arb_writedata;
            assign bank[13].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[13].port_waitrequest[4];
            assign icm_out_rrp_data = bank[13].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[13].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank14
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[14];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[14];
            assign icm_in_arb_read[0] = router[3].b_arb_read[14];
            assign icm_in_arb_write[0] = router[3].b_arb_write[14];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[14];
            assign icm_in_arb_address[0] = router[3].b_arb_address[14];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[14];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[14];
            assign router[3].b_arb_stall[14] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[14] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[14] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[14] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[14].port_enable[4] = icm_out_arb_enable;
            assign bank[14].port_read[4] = icm_out_arb_read;
            assign bank[14].port_write[4] = icm_out_arb_write;
            assign bank[14].port_address[4] = icm_out_arb_address;
            assign bank[14].port_writedata[4] = icm_out_arb_writedata;
            assign bank[14].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[14].port_waitrequest[4];
            assign icm_out_rrp_data = bank[14].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[14].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port4bank15
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[15];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[15];
            assign icm_in_arb_read[0] = router[3].b_arb_read[15];
            assign icm_in_arb_write[0] = router[3].b_arb_write[15];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[15];
            assign icm_in_arb_address[0] = router[3].b_arb_address[15];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[15];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[15];
            assign router[3].b_arb_stall[15] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[15] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[15] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[15] = icm_in_rrp_data[0];
            // INST data_ic of matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
            matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[15].port_enable[4] = icm_out_arb_enable;
            assign bank[15].port_read[4] = icm_out_arb_read;
            assign bank[15].port_write[4] = icm_out_arb_write;
            assign bank[15].port_address[4] = icm_out_arb_address;
            assign bank[15].port_writedata[4] = icm_out_arb_writedata;
            assign bank[15].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[15].port_waitrequest[4];
            assign icm_out_rrp_data = bank[15].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[15].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

      assign lmem_invalid_aspaces[2] = |invalid_access_grps;
   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
/////////////////////////////////////////////////////////////////
module matrix_multi_st_v3_6031e0_4370fa_sys_ic_1019879858988856323
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic m_arb_address [1],
   input logic [511:0] m_arb_writedata [1],
   input logic [63:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [511:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
/////////////////////////////////////////////////////////////////
module matrix_multi_st_v3_6031e0_4370fa_sys_ic_15834266530505810014
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic m_arb_address [1],
   input logic [511:0] m_arb_writedata [1],
   input logic [63:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [511:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
/////////////////////////////////////////////////////////////////
module matrix_multi_st_v3_6031e0_4370fa_sys_ic_13612455053067157268
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic m_arb_address [1],
   input logic [511:0] m_arb_writedata [1],
   input logic [63:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [511:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
/////////////////////////////////////////////////////////////////
module matrix_multi_st_v3_6031e0_4370fa_sys_ic_5770916241578473163
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic m_arb_address [1],
   input logic [511:0] m_arb_writedata [1],
   input logic [63:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [511:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(1),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(1),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cra_ring_wrapper
/////////////////////////////////////////////////////////////////
module cra_ring_wrapper
(
   input logic clock,
   input logic resetn,
   // AVS cra_ring_root_avs
   input logic cra_ring_root_avs_enable,
   input logic cra_ring_root_avs_read,
   input logic cra_ring_root_avs_write,
   input logic [7:0] cra_ring_root_avs_address,
   input logic [63:0] cra_ring_root_avs_writedata,
   input logic [7:0] cra_ring_root_avs_byteenable,
   output logic cra_ring_root_avs_waitrequest,
   output logic [63:0] cra_ring_root_avs_readdata,
   output logic cra_ring_root_avs_readdatavalid,
   // AVM cra_ring_avm_0
   output logic cra_ring_avm_0_enable,
   output logic cra_ring_avm_0_read,
   output logic cra_ring_avm_0_write,
   output logic [4:0] cra_ring_avm_0_address,
   output logic [63:0] cra_ring_avm_0_writedata,
   output logic [7:0] cra_ring_avm_0_byteenable,
   input logic [63:0] cra_ring_avm_0_readdata,
   input logic cra_ring_avm_0_readdatavalid,
   output logic cra_ring_avm_0_burstcount,
   // AVM cra_ring_avm_1
   output logic cra_ring_avm_1_enable,
   output logic cra_ring_avm_1_read,
   output logic cra_ring_avm_1_write,
   output logic [5:0] cra_ring_avm_1_address,
   output logic [63:0] cra_ring_avm_1_writedata,
   output logic [7:0] cra_ring_avm_1_byteenable,
   input logic [63:0] cra_ring_avm_1_readdata,
   input logic cra_ring_avm_1_readdatavalid,
   output logic cra_ring_avm_1_burstcount
);
   logic cra_ring_root_ring_in_wire_read;
   logic cra_ring_root_ring_in_wire_write;
   logic [6:0] cra_ring_root_ring_in_wire_addr;
   logic [63:0] cra_ring_root_ring_in_wire_data;
   logic [7:0] cra_ring_root_ring_in_wire_byteena;
   logic cra_ring_root_ring_in_wire_datavalid;
   logic cra_ring_root_ring_out_wire_read;
   logic cra_ring_root_ring_out_wire_write;
   logic [7:0] cra_ring_root_ring_out_wire_addr;
   logic [63:0] cra_ring_root_ring_out_wire_data;
   logic [7:0] cra_ring_root_ring_out_wire_byteena;
   logic cra_ring_root_ring_out_wire_datavalid;
   logic cra_ring_rom_avm_enable;
   logic cra_ring_rom_avm_read;
   logic cra_ring_rom_avm_write;
   logic [6:0] cra_ring_rom_avm_address;
   logic [63:0] cra_ring_rom_avm_writedata;
   logic [7:0] cra_ring_rom_avm_byteenable;
   logic [63:0] cra_ring_rom_avm_readdata;
   logic cra_ring_rom_avm_readdatavalid;
   logic cra_ring_rom_avm_burstcount;
   logic cra_ring_rom_ring_out_wire_read;
   logic cra_ring_rom_ring_out_wire_write;
   logic [6:0] cra_ring_rom_ring_out_wire_addr;
   logic [63:0] cra_ring_rom_ring_out_wire_data;
   logic [7:0] cra_ring_rom_ring_out_wire_byteena;
   logic cra_ring_rom_ring_out_wire_datavalid;
   logic cra_ring_node_ring_out_wire_0_read;
   logic cra_ring_node_ring_out_wire_0_write;
   logic [6:0] cra_ring_node_ring_out_wire_0_addr;
   logic [63:0] cra_ring_node_ring_out_wire_0_data;
   logic [7:0] cra_ring_node_ring_out_wire_0_byteena;
   logic cra_ring_node_ring_out_wire_0_datavalid;
   logic cra_ring_node_ring_out_wire_1_read;
   logic cra_ring_node_ring_out_wire_1_write;
   logic [6:0] cra_ring_node_ring_out_wire_1_addr;
   logic [63:0] cra_ring_node_ring_out_wire_1_data;
   logic [7:0] cra_ring_node_ring_out_wire_1_byteena;
   logic cra_ring_node_ring_out_wire_1_datavalid;

   // INST cra_root of cra_ring_root
   cra_ring_root
   #(
      .ADDR_W(6),
      .AGENT_PORT_WAITREQUEST_ALLOWANCE(0),
      .ALLOW_HIGH_SPEED_FIFO_USAGE(0),
      .ASYNC_RESET(1),
      .DATA_W(64),
      .ID_W(1),
      .ROM_ENABLE(1),
      .ROM_EXT_W(0),
      .SYNCHRONIZE_RESET(0)
   )
   cra_root
   (
      // AVS avs
      .avs_enable(cra_ring_root_avs_enable),
      .avs_read(cra_ring_root_avs_read),
      .avs_write(cra_ring_root_avs_write),
      .avs_addr(cra_ring_root_avs_address),
      .avs_writedata(cra_ring_root_avs_writedata),
      .avs_byteena(cra_ring_root_avs_byteenable),
      .avs_waitrequest(cra_ring_root_avs_waitrequest),
      .avs_readdata(cra_ring_root_avs_readdata),
      .avs_readdatavalid(cra_ring_root_avs_readdatavalid),
      // AVS ri
      .ri_read(cra_ring_node_ring_out_wire_1_read),
      .ri_write(cra_ring_node_ring_out_wire_1_write),
      .ri_addr(cra_ring_node_ring_out_wire_1_addr),
      .ri_data(cra_ring_node_ring_out_wire_1_data),
      .ri_byteena(cra_ring_node_ring_out_wire_1_byteena),
      .ri_datavalid(cra_ring_node_ring_out_wire_1_datavalid),
      // AVS ro
      .ro_read(cra_ring_root_ring_out_wire_read),
      .ro_write(cra_ring_root_ring_out_wire_write),
      .ro_addr(cra_ring_root_ring_out_wire_addr),
      .ro_data(cra_ring_root_ring_out_wire_data),
      .ro_byteena(cra_ring_root_ring_out_wire_byteena),
      .ro_datavalid(cra_ring_root_ring_out_wire_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST cra_ring_rom of cra_ring_rom
   cra_ring_rom
   #(
      .ASYNC_RESET(1),
      .DATA_W(64),
      .ID_W(1),
      .RING_ADDR_W(6),
      .ROM_EXT_W(0),
      .ROM_W(7),
      .SYNCHRONIZE_RESET(0)
   )
   cra_ring_rom
   (
      // AVM avm
      .avm_enable(cra_ring_rom_avm_enable),
      .avm_read(cra_ring_rom_avm_read),
      .avm_write(cra_ring_rom_avm_write),
      .avm_addr(cra_ring_rom_avm_address),
      .avm_writedata(cra_ring_rom_avm_writedata),
      .avm_byteenable(cra_ring_rom_avm_byteenable),
      .avm_readdata(cra_ring_rom_avm_readdata),
      .avm_readdatavalid(cra_ring_rom_avm_readdatavalid),
      .avm_burstcount(cra_ring_rom_avm_burstcount),
      // AVS ri
      .ri_read(cra_ring_root_ring_out_wire_read),
      .ri_write(cra_ring_root_ring_out_wire_write),
      .ri_addr(cra_ring_root_ring_out_wire_addr),
      .ri_data(cra_ring_root_ring_out_wire_data),
      .ri_byteena(cra_ring_root_ring_out_wire_byteena),
      .ri_datavalid(cra_ring_root_ring_out_wire_datavalid),
      // AVS ro
      .ro_read(cra_ring_rom_ring_out_wire_read),
      .ro_write(cra_ring_rom_ring_out_wire_write),
      .ro_addr(cra_ring_rom_ring_out_wire_addr),
      .ro_data(cra_ring_rom_ring_out_wire_data),
      .ro_byteena(cra_ring_rom_ring_out_wire_byteena),
      .ro_datavalid(cra_ring_rom_ring_out_wire_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST cra_ring_node_avm_wire_0_cra_ring_inst_0 of cra_ring_node
   cra_ring_node
   #(
      .ASYNC_RESET(1),
      .CRA_ADDR_W(5),
      .DATA_W(64),
      .ID(0),
      .ID_W(1),
      .RING_ADDR_W(6),
      .SYNCHRONIZE_RESET(0)
   )
   cra_ring_node_avm_wire_0_cra_ring_inst_0
   (
      // AVM avm
      .avm_enable(cra_ring_avm_0_enable),
      .avm_read(cra_ring_avm_0_read),
      .avm_write(cra_ring_avm_0_write),
      .avm_addr(cra_ring_avm_0_address),
      .avm_writedata(cra_ring_avm_0_writedata),
      .avm_byteena(cra_ring_avm_0_byteenable),
      .avm_readdata(cra_ring_avm_0_readdata),
      .avm_readdatavalid(cra_ring_avm_0_readdatavalid),
      .avm_burstcount(cra_ring_avm_0_burstcount),
      // AVS ri
      .ri_read(cra_ring_rom_ring_out_wire_read),
      .ri_write(cra_ring_rom_ring_out_wire_write),
      .ri_addr(cra_ring_rom_ring_out_wire_addr),
      .ri_data(cra_ring_rom_ring_out_wire_data),
      .ri_byteena(cra_ring_rom_ring_out_wire_byteena),
      .ri_datavalid(cra_ring_rom_ring_out_wire_datavalid),
      // AVS ro
      .ro_read(cra_ring_node_ring_out_wire_0_read),
      .ro_write(cra_ring_node_ring_out_wire_0_write),
      .ro_addr(cra_ring_node_ring_out_wire_0_addr),
      .ro_data(cra_ring_node_ring_out_wire_0_data),
      .ro_byteena(cra_ring_node_ring_out_wire_0_byteena),
      .ro_datavalid(cra_ring_node_ring_out_wire_0_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST cra_ring_node_avm_wire_1_cra_ring_inst_1 of cra_ring_node
   cra_ring_node
   #(
      .ASYNC_RESET(1),
      .CRA_ADDR_W(6),
      .DATA_W(64),
      .ID(1),
      .ID_W(1),
      .RING_ADDR_W(6),
      .SYNCHRONIZE_RESET(0)
   )
   cra_ring_node_avm_wire_1_cra_ring_inst_1
   (
      // AVM avm
      .avm_enable(cra_ring_avm_1_enable),
      .avm_read(cra_ring_avm_1_read),
      .avm_write(cra_ring_avm_1_write),
      .avm_addr(cra_ring_avm_1_address),
      .avm_writedata(cra_ring_avm_1_writedata),
      .avm_byteena(cra_ring_avm_1_byteenable),
      .avm_readdata(cra_ring_avm_1_readdata),
      .avm_readdatavalid(cra_ring_avm_1_readdatavalid),
      .avm_burstcount(cra_ring_avm_1_burstcount),
      // AVS ri
      .ri_read(cra_ring_node_ring_out_wire_0_read),
      .ri_write(cra_ring_node_ring_out_wire_0_write),
      .ri_addr(cra_ring_node_ring_out_wire_0_addr),
      .ri_data(cra_ring_node_ring_out_wire_0_data),
      .ri_byteena(cra_ring_node_ring_out_wire_0_byteena),
      .ri_datavalid(cra_ring_node_ring_out_wire_0_datavalid),
      // AVS ro
      .ro_read(cra_ring_node_ring_out_wire_1_read),
      .ro_write(cra_ring_node_ring_out_wire_1_write),
      .ro_addr(cra_ring_node_ring_out_wire_1_addr),
      .ro_data(cra_ring_node_ring_out_wire_1_data),
      .ro_byteena(cra_ring_node_ring_out_wire_1_byteena),
      .ro_datavalid(cra_ring_node_ring_out_wire_1_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST sys_description_rom of acl_rom_module
   acl_rom_module
   #(
      .ADDRESS_WIDTH(7),
      .ASYNC_RESET(1),
      .DATA_WIDTH(64),
      .FAMILY("Arria 10"),
      .INIT_FILE("sys_description.hex"),
      .SYNCHRONIZE_RESET(0)
   )
   sys_description_rom
   (
      .clk(clock),
      .rst_n(resetn),
      .read(cra_ring_rom_avm_read),
      .readdatavalid(cra_ring_rom_avm_readdatavalid),
      .address(cra_ring_rom_avm_address),
      .readdata(cra_ring_rom_avm_readdata)
   );

endmodule

