// (c) 1992-2021 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
// Generated by Intel(R) FPGA SDK for OpenCL(TM), Version 2022.1.0 Build 96.2 Pro Edition, Copyright (c) 2021 Intel Corporation

/////////////////////////////////////////////////////////////////
// MODULE matrix_multi_para_v1_3f4523_22e528_sys
/////////////////////////////////////////////////////////////////
module matrix_multi_para_v1_3f4523_22e528_sys
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic [63:0] device_exception_bus,
   output logic kernel_irq,
   // AVM avm_mem_gmem0_DDR_port_0_0_rw
   output logic avm_mem_gmem0_DDR_port_0_0_rw_enable,
   output logic avm_mem_gmem0_DDR_port_0_0_rw_read,
   output logic avm_mem_gmem0_DDR_port_0_0_rw_write,
   output logic [31:0] avm_mem_gmem0_DDR_port_0_0_rw_address,
   output logic [511:0] avm_mem_gmem0_DDR_port_0_0_rw_writedata,
   output logic [63:0] avm_mem_gmem0_DDR_port_0_0_rw_byteenable,
   input logic avm_mem_gmem0_DDR_port_0_0_rw_waitrequest,
   input logic [511:0] avm_mem_gmem0_DDR_port_0_0_rw_readdata,
   input logic avm_mem_gmem0_DDR_port_0_0_rw_readdatavalid,
   output logic [4:0] avm_mem_gmem0_DDR_port_0_0_rw_burstcount,
   input logic avm_mem_gmem0_DDR_port_0_0_rw_writeack,
   // AVM avm_mem_gmem0_DDR_port_1_0_rw
   output logic avm_mem_gmem0_DDR_port_1_0_rw_enable,
   output logic avm_mem_gmem0_DDR_port_1_0_rw_read,
   output logic avm_mem_gmem0_DDR_port_1_0_rw_write,
   output logic [31:0] avm_mem_gmem0_DDR_port_1_0_rw_address,
   output logic [511:0] avm_mem_gmem0_DDR_port_1_0_rw_writedata,
   output logic [63:0] avm_mem_gmem0_DDR_port_1_0_rw_byteenable,
   input logic avm_mem_gmem0_DDR_port_1_0_rw_waitrequest,
   input logic [511:0] avm_mem_gmem0_DDR_port_1_0_rw_readdata,
   input logic avm_mem_gmem0_DDR_port_1_0_rw_readdatavalid,
   output logic [4:0] avm_mem_gmem0_DDR_port_1_0_rw_burstcount,
   input logic avm_mem_gmem0_DDR_port_1_0_rw_writeack,
   // AVS cra_ring_root_avs
   input logic cra_ring_root_avs_enable,
   input logic cra_ring_root_avs_read,
   input logic cra_ring_root_avs_write,
   input logic [6:0] cra_ring_root_avs_address,
   input logic [63:0] cra_ring_root_avs_writedata,
   input logic [7:0] cra_ring_root_avs_byteenable,
   output logic cra_ring_root_avs_waitrequest,
   output logic [63:0] cra_ring_root_avs_readdata,
   output logic cra_ring_root_avs_readdatavalid
);
   logic cra_ring_node_avm_wire_0_enable;
   logic cra_ring_node_avm_wire_0_read;
   logic cra_ring_node_avm_wire_0_write;
   logic [5:0] cra_ring_node_avm_wire_0_address;
   logic [63:0] cra_ring_node_avm_wire_0_writedata;
   logic [7:0] cra_ring_node_avm_wire_0_byteenable;
   logic [63:0] cra_ring_node_avm_wire_0_readdata;
   logic cra_ring_node_avm_wire_0_readdatavalid;
   logic cra_ring_node_avm_wire_0_burstcount;
   logic kernel_irqs;
   logic gmem0_DDR_global_avm_enable [4];
   logic gmem0_DDR_global_avm_read [4];
   logic gmem0_DDR_global_avm_write [4];
   logic [32:0] gmem0_DDR_global_avm_address [4];
   logic [511:0] gmem0_DDR_global_avm_writedata [4];
   logic [63:0] gmem0_DDR_global_avm_byteenable [4];
   logic gmem0_DDR_global_avm_waitrequest [4];
   logic [511:0] gmem0_DDR_global_avm_readdata [4];
   logic gmem0_DDR_global_avm_readdatavalid [4];
   logic [4:0] gmem0_DDR_global_avm_burstcount [4];
   logic gmem0_DDR_global_avm_writeack [4];

   // INST k0_ZTS9MMpara_v1_std_ic_inst of k0_ZTS9MMpara_v1_std_ic_partition_wrapper
   k0_ZTS9MMpara_v1_std_ic_partition_wrapper k0_ZTS9MMpara_v1_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_k0_ZTS9MMpara_v1(kernel_irqs),
      // AVS avs_k0_ZTS9MMpara_v1_cra
      .avs_k0_ZTS9MMpara_v1_cra_enable(cra_ring_node_avm_wire_0_enable),
      .avs_k0_ZTS9MMpara_v1_cra_read(cra_ring_node_avm_wire_0_read),
      .avs_k0_ZTS9MMpara_v1_cra_write(cra_ring_node_avm_wire_0_write),
      .avs_k0_ZTS9MMpara_v1_cra_address(cra_ring_node_avm_wire_0_address),
      .avs_k0_ZTS9MMpara_v1_cra_writedata(cra_ring_node_avm_wire_0_writedata),
      .avs_k0_ZTS9MMpara_v1_cra_byteenable(cra_ring_node_avm_wire_0_byteenable),
      .avs_k0_ZTS9MMpara_v1_cra_readdata(cra_ring_node_avm_wire_0_readdata),
      .avs_k0_ZTS9MMpara_v1_cra_readdatavalid(cra_ring_node_avm_wire_0_readdatavalid),
      // AVM k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_enable(gmem0_DDR_global_avm_enable[0]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_read(gmem0_DDR_global_avm_read[0]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_write(gmem0_DDR_global_avm_write[0]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_address(gmem0_DDR_global_avm_address[0]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writedata(gmem0_DDR_global_avm_writedata[0]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_byteenable(gmem0_DDR_global_avm_byteenable[0]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_waitrequest(gmem0_DDR_global_avm_waitrequest[0]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdata(gmem0_DDR_global_avm_readdata[0]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdatavalid(gmem0_DDR_global_avm_readdatavalid[0]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_burstcount(gmem0_DDR_global_avm_burstcount[0]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writeack(gmem0_DDR_global_avm_writeack[0]),
      // AVM k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_enable(gmem0_DDR_global_avm_enable[1]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_read(gmem0_DDR_global_avm_read[1]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_write(gmem0_DDR_global_avm_write[1]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_address(gmem0_DDR_global_avm_address[1]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writedata(gmem0_DDR_global_avm_writedata[1]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_byteenable(gmem0_DDR_global_avm_byteenable[1]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_waitrequest(gmem0_DDR_global_avm_waitrequest[1]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdata(gmem0_DDR_global_avm_readdata[1]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdatavalid(gmem0_DDR_global_avm_readdatavalid[1]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_burstcount(gmem0_DDR_global_avm_burstcount[1]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writeack(gmem0_DDR_global_avm_writeack[1]),
      // AVM k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_enable(gmem0_DDR_global_avm_enable[2]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_read(gmem0_DDR_global_avm_read[2]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_write(gmem0_DDR_global_avm_write[2]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_address(gmem0_DDR_global_avm_address[2]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writedata(gmem0_DDR_global_avm_writedata[2]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_byteenable(gmem0_DDR_global_avm_byteenable[2]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_waitrequest(gmem0_DDR_global_avm_waitrequest[2]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdata(gmem0_DDR_global_avm_readdata[2]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdatavalid(gmem0_DDR_global_avm_readdatavalid[2]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_burstcount(gmem0_DDR_global_avm_burstcount[2]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writeack(gmem0_DDR_global_avm_writeack[2]),
      // AVM k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_enable(gmem0_DDR_global_avm_enable[3]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_read(gmem0_DDR_global_avm_read[3]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_write(gmem0_DDR_global_avm_write[3]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_address(gmem0_DDR_global_avm_address[3]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writedata(gmem0_DDR_global_avm_writedata[3]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_byteenable(gmem0_DDR_global_avm_byteenable[3]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_waitrequest(gmem0_DDR_global_avm_waitrequest[3]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdata(gmem0_DDR_global_avm_readdata[3]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdatavalid(gmem0_DDR_global_avm_readdatavalid[3]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_burstcount(gmem0_DDR_global_avm_burstcount[3]),
      .k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writeack(gmem0_DDR_global_avm_writeack[3])
   );

   assign kernel_irq = |kernel_irqs;
   // INST global_memory_tree0_inst0 of global_memory_tree0_mod
   global_memory_tree0_mod global_memory_tree0_inst0
   (
      .resetn(resetn),
      .clock(clock),
      .clock2x(clock2x),
      // AVM gmem0_DDR_mtree_avm
      .gmem0_DDR_mtree_avm_enable(gmem0_DDR_global_avm_enable),
      .gmem0_DDR_mtree_avm_read(gmem0_DDR_global_avm_read),
      .gmem0_DDR_mtree_avm_write(gmem0_DDR_global_avm_write),
      .gmem0_DDR_mtree_avm_address(gmem0_DDR_global_avm_address),
      .gmem0_DDR_mtree_avm_writedata(gmem0_DDR_global_avm_writedata),
      .gmem0_DDR_mtree_avm_byteenable(gmem0_DDR_global_avm_byteenable),
      .gmem0_DDR_mtree_avm_waitrequest(gmem0_DDR_global_avm_waitrequest),
      .gmem0_DDR_mtree_avm_readdata(gmem0_DDR_global_avm_readdata),
      .gmem0_DDR_mtree_avm_readdatavalid(gmem0_DDR_global_avm_readdatavalid),
      .gmem0_DDR_mtree_avm_burstcount(gmem0_DDR_global_avm_burstcount),
      .gmem0_DDR_mtree_avm_writeack(gmem0_DDR_global_avm_writeack),
      // AVM mtree_mem_gmem0_DDR_port_0_0_rw
      .mtree_mem_gmem0_DDR_port_0_0_rw_enable(avm_mem_gmem0_DDR_port_0_0_rw_enable),
      .mtree_mem_gmem0_DDR_port_0_0_rw_read(avm_mem_gmem0_DDR_port_0_0_rw_read),
      .mtree_mem_gmem0_DDR_port_0_0_rw_write(avm_mem_gmem0_DDR_port_0_0_rw_write),
      .mtree_mem_gmem0_DDR_port_0_0_rw_address(avm_mem_gmem0_DDR_port_0_0_rw_address),
      .mtree_mem_gmem0_DDR_port_0_0_rw_writedata(avm_mem_gmem0_DDR_port_0_0_rw_writedata),
      .mtree_mem_gmem0_DDR_port_0_0_rw_byteenable(avm_mem_gmem0_DDR_port_0_0_rw_byteenable),
      .mtree_mem_gmem0_DDR_port_0_0_rw_waitrequest(avm_mem_gmem0_DDR_port_0_0_rw_waitrequest),
      .mtree_mem_gmem0_DDR_port_0_0_rw_readdata(avm_mem_gmem0_DDR_port_0_0_rw_readdata),
      .mtree_mem_gmem0_DDR_port_0_0_rw_readdatavalid(avm_mem_gmem0_DDR_port_0_0_rw_readdatavalid),
      .mtree_mem_gmem0_DDR_port_0_0_rw_burstcount(avm_mem_gmem0_DDR_port_0_0_rw_burstcount),
      .mtree_mem_gmem0_DDR_port_0_0_rw_writeack(avm_mem_gmem0_DDR_port_0_0_rw_writeack),
      // AVM mtree_mem_gmem0_DDR_port_1_0_rw
      .mtree_mem_gmem0_DDR_port_1_0_rw_enable(avm_mem_gmem0_DDR_port_1_0_rw_enable),
      .mtree_mem_gmem0_DDR_port_1_0_rw_read(avm_mem_gmem0_DDR_port_1_0_rw_read),
      .mtree_mem_gmem0_DDR_port_1_0_rw_write(avm_mem_gmem0_DDR_port_1_0_rw_write),
      .mtree_mem_gmem0_DDR_port_1_0_rw_address(avm_mem_gmem0_DDR_port_1_0_rw_address),
      .mtree_mem_gmem0_DDR_port_1_0_rw_writedata(avm_mem_gmem0_DDR_port_1_0_rw_writedata),
      .mtree_mem_gmem0_DDR_port_1_0_rw_byteenable(avm_mem_gmem0_DDR_port_1_0_rw_byteenable),
      .mtree_mem_gmem0_DDR_port_1_0_rw_waitrequest(avm_mem_gmem0_DDR_port_1_0_rw_waitrequest),
      .mtree_mem_gmem0_DDR_port_1_0_rw_readdata(avm_mem_gmem0_DDR_port_1_0_rw_readdata),
      .mtree_mem_gmem0_DDR_port_1_0_rw_readdatavalid(avm_mem_gmem0_DDR_port_1_0_rw_readdatavalid),
      .mtree_mem_gmem0_DDR_port_1_0_rw_burstcount(avm_mem_gmem0_DDR_port_1_0_rw_burstcount),
      .mtree_mem_gmem0_DDR_port_1_0_rw_writeack(avm_mem_gmem0_DDR_port_1_0_rw_writeack)
   );

   // INST cra_ring_wrapper_inst of cra_ring_wrapper
   cra_ring_wrapper cra_ring_wrapper_inst
   (
      .clock(clock),
      .resetn(resetn),
      // AVS cra_ring_root_avs
      .cra_ring_root_avs_enable(cra_ring_root_avs_enable),
      .cra_ring_root_avs_read(cra_ring_root_avs_read),
      .cra_ring_root_avs_write(cra_ring_root_avs_write),
      .cra_ring_root_avs_address(cra_ring_root_avs_address),
      .cra_ring_root_avs_writedata(cra_ring_root_avs_writedata),
      .cra_ring_root_avs_byteenable(cra_ring_root_avs_byteenable),
      .cra_ring_root_avs_waitrequest(cra_ring_root_avs_waitrequest),
      .cra_ring_root_avs_readdata(cra_ring_root_avs_readdata),
      .cra_ring_root_avs_readdatavalid(cra_ring_root_avs_readdatavalid),
      // AVM cra_ring_avm_0
      .cra_ring_avm_0_enable(cra_ring_node_avm_wire_0_enable),
      .cra_ring_avm_0_read(cra_ring_node_avm_wire_0_read),
      .cra_ring_avm_0_write(cra_ring_node_avm_wire_0_write),
      .cra_ring_avm_0_address(cra_ring_node_avm_wire_0_address),
      .cra_ring_avm_0_writedata(cra_ring_node_avm_wire_0_writedata),
      .cra_ring_avm_0_byteenable(cra_ring_node_avm_wire_0_byteenable),
      .cra_ring_avm_0_readdata(cra_ring_node_avm_wire_0_readdata),
      .cra_ring_avm_0_readdatavalid(cra_ring_node_avm_wire_0_readdatavalid),
      .cra_ring_avm_0_burstcount(cra_ring_node_avm_wire_0_burstcount)
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE k0_ZTS9MMpara_v1_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module k0_ZTS9MMpara_v1_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_k0_ZTS9MMpara_v1,
   // AVS avs_k0_ZTS9MMpara_v1_cra
   input logic avs_k0_ZTS9MMpara_v1_cra_enable,
   input logic avs_k0_ZTS9MMpara_v1_cra_read,
   input logic avs_k0_ZTS9MMpara_v1_cra_write,
   input logic [5:0] avs_k0_ZTS9MMpara_v1_cra_address,
   input logic [63:0] avs_k0_ZTS9MMpara_v1_cra_writedata,
   input logic [7:0] avs_k0_ZTS9MMpara_v1_cra_byteenable,
   output logic [63:0] avs_k0_ZTS9MMpara_v1_cra_readdata,
   output logic avs_k0_ZTS9MMpara_v1_cra_readdatavalid,
   // AVM k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1
   output logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_enable,
   output logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_read,
   output logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_write,
   output logic [32:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_address,
   output logic [511:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writedata,
   output logic [63:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_byteenable,
   input logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_waitrequest,
   input logic [511:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdata,
   input logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdatavalid,
   output logic [4:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_burstcount,
   input logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writeack,
   // AVM k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1
   output logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_enable,
   output logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_read,
   output logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_write,
   output logic [32:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_address,
   output logic [511:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writedata,
   output logic [63:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_byteenable,
   input logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_waitrequest,
   input logic [511:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdata,
   input logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdatavalid,
   output logic [4:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_burstcount,
   input logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writeack,
   // AVM k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1
   output logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_enable,
   output logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_read,
   output logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_write,
   output logic [32:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_address,
   output logic [511:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writedata,
   output logic [63:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_byteenable,
   input logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_waitrequest,
   input logic [511:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdata,
   input logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdatavalid,
   output logic [4:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_burstcount,
   input logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writeack,
   // AVM k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1
   output logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_enable,
   output logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_read,
   output logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_write,
   output logic [32:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_address,
   output logic [511:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writedata,
   output logic [63:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_byteenable,
   input logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_waitrequest,
   input logic [511:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdata,
   input logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdatavalid,
   output logic [4:0] k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_burstcount,
   input logic k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writeack
);
   logic k0_ZTS9MMpara_v1_start;
   logic [0:0] k0_ZTS9MMpara_v1_start_chain;
   logic [0:0] k0_ZTS9MMpara_v1_start_kernel_copy;
   logic [0:0] k0_ZTS9MMpara_v1_start_task_fd;
   logic [0:0] k0_ZTS9MMpara_v1_start_finish_element;
   logic k0_ZTS9MMpara_v1_finish_sig;
   logic [0:0] k0_ZTS9MMpara_v1_finish_kernel_copy;
   logic [0:0] k0_ZTS9MMpara_v1_finish_chain;
   logic [63:0] k0_ZTS9MMpara_v1_global_size [2:0];
   logic [31:0] k0_ZTS9MMpara_v1_num_groups [2:0];
   logic [31:0] k0_ZTS9MMpara_v1_local_size [2:0];
   logic [63:0] k0_ZTS9MMpara_v1_global_offset [2:0];
   logic [31:0] k0_ZTS9MMpara_v1_work_dim;
   logic [31:0] k0_ZTS9MMpara_v1_wg_size;
   logic [0:0] k0_ZTS9MMpara_v1_wg_disp_stall_in;
   logic [0:0] k0_ZTS9MMpara_v1_wg_disp_stall_in_lookahead;
   logic [0:0] k0_ZTS9MMpara_v1_wg_disp_valid_out;
   logic k0_ZTS9MMpara_v1_wg_disp_start_out;
   logic [31:0] k0_ZTS9MMpara_v1_wg_disp_group_id_out [2:0];
   logic [31:0] k0_ZTS9MMpara_v1_wg_disp_global_id_base_out [2:0];
   logic k0_ZTS9MMpara_v1_wg_disp_dispatched_all_groups;
   logic [63:0] k0_ZTS9MMpara_v1_global_id [1][2:0];
   logic [31:0] k0_ZTS9MMpara_v1_local_id [1][2:0];
   logic [31:0] k0_ZTS9MMpara_v1_group_id [1][2:0];
   logic [0:0] k0_ZTS9MMpara_v1_pending_write;
   logic [0:0] k0_ZTS9MMpara_v1_lsu_active;
   logic [0:0] k0_ZTS9MMpara_v1_valid_in;
   logic [0:0] k0_ZTS9MMpara_v1_valid_out;
   logic [0:0] k0_ZTS9MMpara_v1_stall_in;
   logic [0:0] k0_ZTS9MMpara_v1_stall_out;
   logic k0_ZTS9MMpara_v1_cra_pending_write;
   logic k0_ZTS9MMpara_v1_cra_lsu_active;
   logic k0_ZTS9MMpara_v1_cra_valid_in;
   logic [1791:0] k0_ZTS9MMpara_v1_kernel_arguments;

   assign k0_ZTS9MMpara_v1_start_chain[0] = k0_ZTS9MMpara_v1_start;
   assign k0_ZTS9MMpara_v1_finish_chain[0] = 1'b1;
   assign k0_ZTS9MMpara_v1_cra_pending_write = |k0_ZTS9MMpara_v1_pending_write;
   assign k0_ZTS9MMpara_v1_cra_lsu_active = |k0_ZTS9MMpara_v1_lsu_active;
   assign k0_ZTS9MMpara_v1_cra_valid_in = |k0_ZTS9MMpara_v1_valid_in;
   assign k0_ZTS9MMpara_v1_stall_in = 0;
   // INST k0_ZTS9MMpara_v1_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   k0_ZTS9MMpara_v1_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(k0_ZTS9MMpara_v1_start),
      .num_groups(k0_ZTS9MMpara_v1_num_groups),
      .local_size(k0_ZTS9MMpara_v1_local_size),
      .stall_in(k0_ZTS9MMpara_v1_wg_disp_stall_in),
      .stall_in_lookahead(k0_ZTS9MMpara_v1_wg_disp_stall_in_lookahead),
      .valid_out(k0_ZTS9MMpara_v1_wg_disp_valid_out),
      .group_id_out(k0_ZTS9MMpara_v1_wg_disp_group_id_out),
      .global_id_base_out(k0_ZTS9MMpara_v1_wg_disp_global_id_base_out),
      .start_out(k0_ZTS9MMpara_v1_wg_disp_start_out),
      .dispatched_all_groups(k0_ZTS9MMpara_v1_wg_disp_dispatched_all_groups)
   );

   // INST k0_ZTS9MMpara_v1_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(19),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   k0_ZTS9MMpara_v1_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(k0_ZTS9MMpara_v1_start),
      .wg_size(k0_ZTS9MMpara_v1_wg_size),
      .wg_dispatch_valid_out(k0_ZTS9MMpara_v1_wg_disp_valid_out),
      .wg_dispatch_stall_in(k0_ZTS9MMpara_v1_wg_disp_stall_in),
      .dispatched_all_groups(k0_ZTS9MMpara_v1_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(k0_ZTS9MMpara_v1_valid_out),
      .kernel_copy_stall_in(k0_ZTS9MMpara_v1_stall_in),
      .pending_writes(k0_ZTS9MMpara_v1_cra_pending_write),
      .finish(k0_ZTS9MMpara_v1_finish_sig)
   );

   // INST k0_ZTS9MMpara_v1_cra_agent_inst of k0_ZTS9MMpara_v1_function_cra_agent
   k0_ZTS9MMpara_v1_function_cra_agent k0_ZTS9MMpara_v1_cra_agent_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(k0_ZTS9MMpara_v1_start),
      .finish(k0_ZTS9MMpara_v1_finish_sig),
      .global_offset_0(k0_ZTS9MMpara_v1_global_offset[0]),
      .global_offset_1(k0_ZTS9MMpara_v1_global_offset[1]),
      .global_offset_2(k0_ZTS9MMpara_v1_global_offset[2]),
      .work_dim(k0_ZTS9MMpara_v1_work_dim),
      .has_a_lsu_active(k0_ZTS9MMpara_v1_cra_lsu_active),
      .has_a_write_pending(k0_ZTS9MMpara_v1_cra_pending_write),
      .valid_in(k0_ZTS9MMpara_v1_cra_valid_in),
      .global_size_0(k0_ZTS9MMpara_v1_global_size[0]),
      .global_size_1(k0_ZTS9MMpara_v1_global_size[1]),
      .global_size_2(k0_ZTS9MMpara_v1_global_size[2]),
      .num_groups_0(k0_ZTS9MMpara_v1_num_groups[0]),
      .num_groups_1(k0_ZTS9MMpara_v1_num_groups[1]),
      .num_groups_2(k0_ZTS9MMpara_v1_num_groups[2]),
      .local_size_0(k0_ZTS9MMpara_v1_local_size[0]),
      .local_size_1(k0_ZTS9MMpara_v1_local_size[1]),
      .local_size_2(k0_ZTS9MMpara_v1_local_size[2]),
      .workgroup_size(k0_ZTS9MMpara_v1_wg_size),
      .kernel_arguments(k0_ZTS9MMpara_v1_kernel_arguments),
      .cra_irq(cra_irq_k0_ZTS9MMpara_v1),
      // AVS avs_cra
      .avs_cra_enable(avs_k0_ZTS9MMpara_v1_cra_enable),
      .avs_cra_read(avs_k0_ZTS9MMpara_v1_cra_read),
      .avs_cra_write(avs_k0_ZTS9MMpara_v1_cra_write),
      .avs_cra_address(avs_k0_ZTS9MMpara_v1_cra_address),
      .avs_cra_writedata(avs_k0_ZTS9MMpara_v1_cra_writedata),
      .avs_cra_byteenable(avs_k0_ZTS9MMpara_v1_cra_byteenable),
      .avs_cra_readdata(avs_k0_ZTS9MMpara_v1_cra_readdata),
      .avs_cra_readdatavalid(avs_k0_ZTS9MMpara_v1_cra_readdatavalid)
   );

   // INST k0_ZTS9MMpara_v1_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(32),
      .LOCAL_WIDTH_Y(32),
      .LOCAL_WIDTH_Z(32),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(1),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0),
      .USE_GLOBAL_WORK_OFFSET(1)
   )
   k0_ZTS9MMpara_v1_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(k0_ZTS9MMpara_v1_wg_disp_start_out),
      .valid_in(k0_ZTS9MMpara_v1_wg_disp_valid_out[0]),
      .stall_out(k0_ZTS9MMpara_v1_wg_disp_stall_in[0]),
      .stall_out_lookahead(k0_ZTS9MMpara_v1_wg_disp_stall_in_lookahead[0]),
      .stall_in(k0_ZTS9MMpara_v1_stall_out[0]),
      .valid_out(k0_ZTS9MMpara_v1_valid_in[0]),
      .group_id_in(k0_ZTS9MMpara_v1_wg_disp_group_id_out),
      .global_id_base_in(k0_ZTS9MMpara_v1_wg_disp_global_id_base_out),
      .local_size(k0_ZTS9MMpara_v1_local_size),
      .global_size(k0_ZTS9MMpara_v1_global_size),
      .global_work_offset(k0_ZTS9MMpara_v1_global_offset),
      .local_id(k0_ZTS9MMpara_v1_local_id[0]),
      .global_id(k0_ZTS9MMpara_v1_global_id[0]),
      .group_id(k0_ZTS9MMpara_v1_group_id[0])
   );

   // INST k0_ZTS9MMpara_v1_inst_0 of k0_ZTS9MMpara_v1_top_wrapper_0
   k0_ZTS9MMpara_v1_top_wrapper_0 k0_ZTS9MMpara_v1_inst_0
   (
      .start(k0_ZTS9MMpara_v1_start_kernel_copy[0]),
      .kernel_arguments(k0_ZTS9MMpara_v1_kernel_arguments),
      .work_dim(k0_ZTS9MMpara_v1_work_dim),
      .global_offset(k0_ZTS9MMpara_v1_global_offset),
      .kernel_valid_out(k0_ZTS9MMpara_v1_valid_out[0]),
      .has_a_write_pending(k0_ZTS9MMpara_v1_pending_write[0]),
      .has_a_lsu_active(k0_ZTS9MMpara_v1_lsu_active[0]),
      .global_id(k0_ZTS9MMpara_v1_global_id[0]),
      .local_id(k0_ZTS9MMpara_v1_local_id[0]),
      .group_id(k0_ZTS9MMpara_v1_group_id[0]),
      .global_size(k0_ZTS9MMpara_v1_global_size),
      .local_size(k0_ZTS9MMpara_v1_local_size),
      .num_groups(k0_ZTS9MMpara_v1_num_groups),
      .workgroup_size(k0_ZTS9MMpara_v1_wg_size),
      .kernel_stall_out(k0_ZTS9MMpara_v1_stall_out[0]),
      .kernel_valid_in(k0_ZTS9MMpara_v1_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_enable(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_enable),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_read(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_read),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_write(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_write),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_address(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_address),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writedata(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writedata),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_byteenable(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_byteenable),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_waitrequest(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_waitrequest),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdata(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdata),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdatavalid(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdatavalid),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_burstcount(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_burstcount),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writeack(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writeack),
      // AVM avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_enable(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_enable),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_read(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_read),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_write(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_write),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_address(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_address),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writedata(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writedata),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_byteenable(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_byteenable),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_waitrequest(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_waitrequest),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdata(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdata),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdatavalid(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdatavalid),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_burstcount(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_burstcount),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writeack(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writeack),
      // AVM avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_enable(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_enable),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_read(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_read),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_write(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_write),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_address(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_address),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writedata(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writedata),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_byteenable(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_byteenable),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_waitrequest(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_waitrequest),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdata(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdata),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdatavalid(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdatavalid),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_burstcount(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_burstcount),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writeack(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writeack),
      // AVM avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_enable(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_enable),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_read(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_read),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_write(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_write),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_address(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_address),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writedata(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writedata),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_byteenable(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_byteenable),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_waitrequest(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_waitrequest),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdata(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdata),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdatavalid(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdatavalid),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_burstcount(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_burstcount),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writeack(k0_ZTS9MMpara_v1_0_avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writeack)
   );

   // INST k0_ZTS9MMpara_v1_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   k0_ZTS9MMpara_v1_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(k0_ZTS9MMpara_v1_start_chain[0]),
      .start_kernel(k0_ZTS9MMpara_v1_start_kernel_copy[0]),
      .start_finish_detector(k0_ZTS9MMpara_v1_start_task_fd[0]),
      .start_finish_chain_element(k0_ZTS9MMpara_v1_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE k0_ZTS9MMpara_v1_top_wrapper_0
/////////////////////////////////////////////////////////////////
module k0_ZTS9MMpara_v1_top_wrapper_0
(
   input logic start,
   input logic [1791:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [63:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [63:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [63:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1
   output logic avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_enable,
   output logic avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_read,
   output logic avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_write,
   output logic [32:0] avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_address,
   output logic [511:0] avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writedata,
   output logic [63:0] avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_byteenable,
   input logic avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_waitrequest,
   input logic [511:0] avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdata,
   input logic avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdatavalid,
   output logic [4:0] avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_burstcount,
   input logic avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writeack,
   // AVM avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1
   output logic avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_enable,
   output logic avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_read,
   output logic avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_write,
   output logic [32:0] avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_address,
   output logic [511:0] avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writedata,
   output logic [63:0] avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_byteenable,
   input logic avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_waitrequest,
   input logic [511:0] avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdata,
   input logic avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdatavalid,
   output logic [4:0] avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_burstcount,
   input logic avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writeack,
   // AVM avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1
   output logic avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_enable,
   output logic avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_read,
   output logic avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_write,
   output logic [32:0] avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_address,
   output logic [511:0] avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writedata,
   output logic [63:0] avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_byteenable,
   input logic avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_waitrequest,
   input logic [511:0] avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdata,
   input logic avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdatavalid,
   output logic [4:0] avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_burstcount,
   input logic avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writeack,
   // AVM avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1
   output logic avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_enable,
   output logic avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_read,
   output logic avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_write,
   output logic [32:0] avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_address,
   output logic [511:0] avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writedata,
   output logic [63:0] avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_byteenable,
   input logic avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_waitrequest,
   input logic [511:0] avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdata,
   input logic avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdatavalid,
   output logic [4:0] avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_burstcount,
   input logic avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writeack
);
   logic lmem_invalid_single_bit;

   // INST kernel of k0_ZTS9MMpara_v1_function_wrapper
   k0_ZTS9MMpara_v1_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_enable(avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_enable),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_read(avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_read),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_write(avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_write),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_address(avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_address),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writedata(avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writedata),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_byteenable(avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_byteenable),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_waitrequest(avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_waitrequest),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdata(avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdata),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdatavalid(avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_readdatavalid),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_burstcount(avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_burstcount),
      .avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writeack(avm_unnamed_k0_ZTS9MMpara_v113_k0_ZTS9MMpara_v1_writeack),
      // AVM avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_enable(avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_enable),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_read(avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_read),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_write(avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_write),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_address(avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_address),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writedata(avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writedata),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_byteenable(avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_byteenable),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_waitrequest(avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_waitrequest),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdata(avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdata),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdatavalid(avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_readdatavalid),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_burstcount(avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_burstcount),
      .avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writeack(avm_unnamed_k0_ZTS9MMpara_v114_k0_ZTS9MMpara_v1_writeack),
      // AVM avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_enable(avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_enable),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_read(avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_read),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_write(avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_write),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_address(avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_address),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writedata(avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writedata),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_byteenable(avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_byteenable),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_waitrequest(avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_waitrequest),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdata(avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdata),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdatavalid(avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_readdatavalid),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_burstcount(avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_burstcount),
      .avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writeack(avm_unnamed_k0_ZTS9MMpara_v15_k0_ZTS9MMpara_v1_writeack),
      // AVM avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_enable(avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_enable),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_read(avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_read),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_write(avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_write),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_address(avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_address),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writedata(avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writedata),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_byteenable(avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_byteenable),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_waitrequest(avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_waitrequest),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdata(avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdata),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdatavalid(avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_readdatavalid),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_burstcount(avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_burstcount),
      .avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writeack(avm_unnamed_k0_ZTS9MMpara_v16_k0_ZTS9MMpara_v1_writeack)
   );

   assign lmem_invalid_single_bit = 'b0;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE global_memory_tree0_mod
/////////////////////////////////////////////////////////////////
module global_memory_tree0_mod
(
   input logic resetn,
   input logic clock,
   input logic clock2x,
   // AVM gmem0_DDR_mtree_avm
   input logic gmem0_DDR_mtree_avm_enable [4],
   input logic gmem0_DDR_mtree_avm_read [4],
   input logic gmem0_DDR_mtree_avm_write [4],
   input logic [32:0] gmem0_DDR_mtree_avm_address [4],
   input logic [511:0] gmem0_DDR_mtree_avm_writedata [4],
   input logic [63:0] gmem0_DDR_mtree_avm_byteenable [4],
   output logic gmem0_DDR_mtree_avm_waitrequest [4],
   output logic [511:0] gmem0_DDR_mtree_avm_readdata [4],
   output logic gmem0_DDR_mtree_avm_readdatavalid [4],
   input logic [4:0] gmem0_DDR_mtree_avm_burstcount [4],
   output logic gmem0_DDR_mtree_avm_writeack [4],
   // AVM mtree_mem_gmem0_DDR_port_0_0_rw
   output logic mtree_mem_gmem0_DDR_port_0_0_rw_enable,
   output logic mtree_mem_gmem0_DDR_port_0_0_rw_read,
   output logic mtree_mem_gmem0_DDR_port_0_0_rw_write,
   output logic [31:0] mtree_mem_gmem0_DDR_port_0_0_rw_address,
   output logic [511:0] mtree_mem_gmem0_DDR_port_0_0_rw_writedata,
   output logic [63:0] mtree_mem_gmem0_DDR_port_0_0_rw_byteenable,
   input logic mtree_mem_gmem0_DDR_port_0_0_rw_waitrequest,
   input logic [511:0] mtree_mem_gmem0_DDR_port_0_0_rw_readdata,
   input logic mtree_mem_gmem0_DDR_port_0_0_rw_readdatavalid,
   output logic [4:0] mtree_mem_gmem0_DDR_port_0_0_rw_burstcount,
   input logic mtree_mem_gmem0_DDR_port_0_0_rw_writeack,
   // AVM mtree_mem_gmem0_DDR_port_1_0_rw
   output logic mtree_mem_gmem0_DDR_port_1_0_rw_enable,
   output logic mtree_mem_gmem0_DDR_port_1_0_rw_read,
   output logic mtree_mem_gmem0_DDR_port_1_0_rw_write,
   output logic [31:0] mtree_mem_gmem0_DDR_port_1_0_rw_address,
   output logic [511:0] mtree_mem_gmem0_DDR_port_1_0_rw_writedata,
   output logic [63:0] mtree_mem_gmem0_DDR_port_1_0_rw_byteenable,
   input logic mtree_mem_gmem0_DDR_port_1_0_rw_waitrequest,
   input logic [511:0] mtree_mem_gmem0_DDR_port_1_0_rw_readdata,
   input logic mtree_mem_gmem0_DDR_port_1_0_rw_readdatavalid,
   output logic [4:0] mtree_mem_gmem0_DDR_port_1_0_rw_burstcount,
   input logic mtree_mem_gmem0_DDR_port_1_0_rw_writeack
);
   genvar __i;
   generate
   begin:gmem0_DDR_
      logic gmem0_DDR_icm_in_arb_request [4];
      logic gmem0_DDR_icm_in_arb_enable [4];
      logic gmem0_DDR_icm_in_arb_read [4];
      logic gmem0_DDR_icm_in_arb_write [4];
      logic [4:0] gmem0_DDR_icm_in_arb_burstcount [4];
      logic [26:0] gmem0_DDR_icm_in_arb_address [4];
      logic [511:0] gmem0_DDR_icm_in_arb_writedata [4];
      logic [63:0] gmem0_DDR_icm_in_arb_byteenable [4];
      logic gmem0_DDR_icm_in_arb_stall [4];
      logic gmem0_DDR_icm_in_wrp_ack [4];
      logic gmem0_DDR_icm_in_rrp_datavalid [4];
      logic [511:0] gmem0_DDR_icm_in_rrp_data [4];
      logic gmem0_DDR_icm_preroute_arb_request [4];
      logic gmem0_DDR_icm_preroute_arb_enable [4];
      logic gmem0_DDR_icm_preroute_arb_read [4];
      logic gmem0_DDR_icm_preroute_arb_write [4];
      logic [4:0] gmem0_DDR_icm_preroute_arb_burstcount [4];
      logic [26:0] gmem0_DDR_icm_preroute_arb_address [4];
      logic [511:0] gmem0_DDR_icm_preroute_arb_writedata [4];
      logic [63:0] gmem0_DDR_icm_preroute_arb_byteenable [4];
      logic gmem0_DDR_icm_preroute_arb_stall [4];
      logic gmem0_DDR_icm_preroute_wrp_ack [4];
      logic gmem0_DDR_icm_preroute_rrp_datavalid [4];
      logic [511:0] gmem0_DDR_icm_preroute_rrp_data [4];
      logic icm_groupgmem0_DDR_router_0_arb_request [1];
      logic icm_groupgmem0_DDR_router_0_arb_enable [1];
      logic icm_groupgmem0_DDR_router_0_arb_read [1];
      logic icm_groupgmem0_DDR_router_0_arb_write [1];
      logic [4:0] icm_groupgmem0_DDR_router_0_arb_burstcount [1];
      logic [26:0] icm_groupgmem0_DDR_router_0_arb_address [1];
      logic [511:0] icm_groupgmem0_DDR_router_0_arb_writedata [1];
      logic [63:0] icm_groupgmem0_DDR_router_0_arb_byteenable [1];
      logic icm_groupgmem0_DDR_router_0_arb_stall [1];
      logic icm_groupgmem0_DDR_router_0_wrp_ack [1];
      logic icm_groupgmem0_DDR_router_0_rrp_datavalid [1];
      logic [511:0] icm_groupgmem0_DDR_router_0_rrp_data [1];
      logic icm_groupgmem0_DDR_router_1_arb_request [1];
      logic icm_groupgmem0_DDR_router_1_arb_enable [1];
      logic icm_groupgmem0_DDR_router_1_arb_read [1];
      logic icm_groupgmem0_DDR_router_1_arb_write [1];
      logic [4:0] icm_groupgmem0_DDR_router_1_arb_burstcount [1];
      logic [26:0] icm_groupgmem0_DDR_router_1_arb_address [1];
      logic [511:0] icm_groupgmem0_DDR_router_1_arb_writedata [1];
      logic [63:0] icm_groupgmem0_DDR_router_1_arb_byteenable [1];
      logic icm_groupgmem0_DDR_router_1_arb_stall [1];
      logic icm_groupgmem0_DDR_router_1_wrp_ack [1];
      logic icm_groupgmem0_DDR_router_1_rrp_datavalid [1];
      logic [511:0] icm_groupgmem0_DDR_router_1_rrp_data [1];
      logic icm_groupgmem0_DDR_router_2_arb_request [1];
      logic icm_groupgmem0_DDR_router_2_arb_enable [1];
      logic icm_groupgmem0_DDR_router_2_arb_read [1];
      logic icm_groupgmem0_DDR_router_2_arb_write [1];
      logic [4:0] icm_groupgmem0_DDR_router_2_arb_burstcount [1];
      logic [26:0] icm_groupgmem0_DDR_router_2_arb_address [1];
      logic [511:0] icm_groupgmem0_DDR_router_2_arb_writedata [1];
      logic [63:0] icm_groupgmem0_DDR_router_2_arb_byteenable [1];
      logic icm_groupgmem0_DDR_router_2_arb_stall [1];
      logic icm_groupgmem0_DDR_router_2_wrp_ack [1];
      logic icm_groupgmem0_DDR_router_2_rrp_datavalid [1];
      logic [511:0] icm_groupgmem0_DDR_router_2_rrp_data [1];
      logic icm_groupgmem0_DDR_router_3_arb_request [1];
      logic icm_groupgmem0_DDR_router_3_arb_enable [1];
      logic icm_groupgmem0_DDR_router_3_arb_read [1];
      logic icm_groupgmem0_DDR_router_3_arb_write [1];
      logic [4:0] icm_groupgmem0_DDR_router_3_arb_burstcount [1];
      logic [26:0] icm_groupgmem0_DDR_router_3_arb_address [1];
      logic [511:0] icm_groupgmem0_DDR_router_3_arb_writedata [1];
      logic [63:0] icm_groupgmem0_DDR_router_3_arb_byteenable [1];
      logic icm_groupgmem0_DDR_router_3_arb_stall [1];
      logic icm_groupgmem0_DDR_router_3_wrp_ack [1];
      logic icm_groupgmem0_DDR_router_3_rrp_datavalid [1];
      logic [511:0] icm_groupgmem0_DDR_router_3_rrp_data [1];
      logic icm_out_0_rw_arb_request [2];
      logic icm_out_0_rw_arb_enable [2];
      logic icm_out_0_rw_arb_read [2];
      logic icm_out_0_rw_arb_write [2];
      logic [4:0] icm_out_0_rw_arb_burstcount [2];
      logic [25:0] icm_out_0_rw_arb_address [2];
      logic [511:0] icm_out_0_rw_arb_writedata [2];
      logic [63:0] icm_out_0_rw_arb_byteenable [2];
      logic [1:0] icm_out_0_rw_arb_id [2];
      logic icm_out_0_rw_arb_stall [2];
      logic icm_out_0_rw_wrp_ack [2];
      logic icm_out_0_rw_rrp_datavalid [2];
      logic [511:0] icm_out_0_rw_rrp_data [2];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_request [4];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_enable [4];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_read [4];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_write [4];
      logic [4:0] icm_routedgmem0_DDR_port_0_0_rw_arb_burstcount [4];
      logic [25:0] icm_routedgmem0_DDR_port_0_0_rw_arb_address [4];
      logic [511:0] icm_routedgmem0_DDR_port_0_0_rw_arb_writedata [4];
      logic [63:0] icm_routedgmem0_DDR_port_0_0_rw_arb_byteenable [4];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_stall [4];
      logic icm_routedgmem0_DDR_port_0_0_rw_wrp_ack [4];
      logic icm_routedgmem0_DDR_port_0_0_rw_rrp_datavalid [4];
      logic [511:0] icm_routedgmem0_DDR_port_0_0_rw_rrp_data [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_arb_request [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_arb_enable [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_arb_read [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_arb_write [4];
      logic [4:0] icm_routedgmem0_DDR_port_1_0_rw_arb_burstcount [4];
      logic [25:0] icm_routedgmem0_DDR_port_1_0_rw_arb_address [4];
      logic [511:0] icm_routedgmem0_DDR_port_1_0_rw_arb_writedata [4];
      logic [63:0] icm_routedgmem0_DDR_port_1_0_rw_arb_byteenable [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_arb_stall [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_wrp_ack [4];
      logic icm_routedgmem0_DDR_port_1_0_rw_rrp_datavalid [4];
      logic [511:0] icm_routedgmem0_DDR_port_1_0_rw_rrp_data [4];

      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:t
         // INST gmem0_DDR_avm_to_ic of acl_avm_to_ic
         acl_avm_to_ic
         #(
            .DATA_W(512),
            .WRITEDATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(33),
            .BYTEENA_W(64)
         )
         gmem0_DDR_avm_to_ic
         (
            // AVM avm
            .avm_enable(gmem0_DDR_mtree_avm_enable[__i]),
            .avm_read(gmem0_DDR_mtree_avm_read[__i]),
            .avm_write(gmem0_DDR_mtree_avm_write[__i]),
            .avm_address(gmem0_DDR_mtree_avm_address[__i]),
            .avm_writedata(gmem0_DDR_mtree_avm_writedata[__i]),
            .avm_byteenable(gmem0_DDR_mtree_avm_byteenable[__i]),
            .avm_waitrequest(gmem0_DDR_mtree_avm_waitrequest[__i]),
            .avm_readdata(gmem0_DDR_mtree_avm_readdata[__i]),
            .avm_readdatavalid(gmem0_DDR_mtree_avm_readdatavalid[__i]),
            .avm_burstcount(gmem0_DDR_mtree_avm_burstcount[__i]),
            .avm_writeack(gmem0_DDR_mtree_avm_writeack[__i]),
            // ICM ic
            .ic_arb_request(gmem0_DDR_icm_in_arb_request[__i]),
            .ic_arb_enable(gmem0_DDR_icm_in_arb_enable[__i]),
            .ic_arb_read(gmem0_DDR_icm_in_arb_read[__i]),
            .ic_arb_write(gmem0_DDR_icm_in_arb_write[__i]),
            .ic_arb_burstcount(gmem0_DDR_icm_in_arb_burstcount[__i]),
            .ic_arb_address(gmem0_DDR_icm_in_arb_address[__i]),
            .ic_arb_writedata(gmem0_DDR_icm_in_arb_writedata[__i]),
            .ic_arb_byteenable(gmem0_DDR_icm_in_arb_byteenable[__i]),
            .ic_arb_stall(gmem0_DDR_icm_in_arb_stall[__i]),
            .ic_wrp_ack(gmem0_DDR_icm_in_wrp_ack[__i]),
            .ic_rrp_datavalid(gmem0_DDR_icm_in_rrp_datavalid[__i]),
            .ic_rrp_data(gmem0_DDR_icm_in_rrp_data[__i])
         );

      end

      assign icm_groupgmem0_DDR_router_0_arb_request[0] = gmem0_DDR_icm_in_arb_request[1];
      assign icm_groupgmem0_DDR_router_0_arb_enable[0] = gmem0_DDR_icm_in_arb_enable[1];
      assign icm_groupgmem0_DDR_router_0_arb_read[0] = gmem0_DDR_icm_in_arb_read[1];
      assign icm_groupgmem0_DDR_router_0_arb_write[0] = gmem0_DDR_icm_in_arb_write[1];
      assign icm_groupgmem0_DDR_router_0_arb_burstcount[0] = gmem0_DDR_icm_in_arb_burstcount[1];
      assign icm_groupgmem0_DDR_router_0_arb_address[0] = gmem0_DDR_icm_in_arb_address[1];
      assign icm_groupgmem0_DDR_router_0_arb_writedata[0] = gmem0_DDR_icm_in_arb_writedata[1];
      assign icm_groupgmem0_DDR_router_0_arb_byteenable[0] = gmem0_DDR_icm_in_arb_byteenable[1];
      assign gmem0_DDR_icm_in_arb_stall[1] = icm_groupgmem0_DDR_router_0_arb_stall[0];
      assign gmem0_DDR_icm_in_wrp_ack[1] = icm_groupgmem0_DDR_router_0_wrp_ack[0];
      assign gmem0_DDR_icm_in_rrp_datavalid[1] = icm_groupgmem0_DDR_router_0_rrp_datavalid[0];
      assign gmem0_DDR_icm_in_rrp_data[1] = icm_groupgmem0_DDR_router_0_rrp_data[0];
      // INST global_ic_preroutegmem0_DDR_router_0 of matrix_multi_para_v1_3f4523_22e528_sys_ic_1054805194251292569
      matrix_multi_para_v1_3f4523_22e528_sys_ic_1054805194251292569 global_ic_preroutegmem0_DDR_router_0
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_DDR_router_0_arb_request),
         .m_arb_enable(icm_groupgmem0_DDR_router_0_arb_enable),
         .m_arb_read(icm_groupgmem0_DDR_router_0_arb_read),
         .m_arb_write(icm_groupgmem0_DDR_router_0_arb_write),
         .m_arb_burstcount(icm_groupgmem0_DDR_router_0_arb_burstcount),
         .m_arb_address(icm_groupgmem0_DDR_router_0_arb_address),
         .m_arb_writedata(icm_groupgmem0_DDR_router_0_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_DDR_router_0_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_DDR_router_0_arb_stall),
         .m_wrp_ack(icm_groupgmem0_DDR_router_0_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_DDR_router_0_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_DDR_router_0_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_DDR_icm_preroute_arb_request[0]),
         .mout_arb_enable(gmem0_DDR_icm_preroute_arb_enable[0]),
         .mout_arb_read(gmem0_DDR_icm_preroute_arb_read[0]),
         .mout_arb_write(gmem0_DDR_icm_preroute_arb_write[0]),
         .mout_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[0]),
         .mout_arb_address(gmem0_DDR_icm_preroute_arb_address[0]),
         .mout_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[0]),
         .mout_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[0]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_DDR_icm_preroute_arb_stall[0]),
         .mout_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[0]),
         .mout_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[0]),
         .mout_rrp_data(gmem0_DDR_icm_preroute_rrp_data[0])
      );

      assign icm_groupgmem0_DDR_router_1_arb_request[0] = gmem0_DDR_icm_in_arb_request[0];
      assign icm_groupgmem0_DDR_router_1_arb_enable[0] = gmem0_DDR_icm_in_arb_enable[0];
      assign icm_groupgmem0_DDR_router_1_arb_read[0] = gmem0_DDR_icm_in_arb_read[0];
      assign icm_groupgmem0_DDR_router_1_arb_write[0] = gmem0_DDR_icm_in_arb_write[0];
      assign icm_groupgmem0_DDR_router_1_arb_burstcount[0] = gmem0_DDR_icm_in_arb_burstcount[0];
      assign icm_groupgmem0_DDR_router_1_arb_address[0] = gmem0_DDR_icm_in_arb_address[0];
      assign icm_groupgmem0_DDR_router_1_arb_writedata[0] = gmem0_DDR_icm_in_arb_writedata[0];
      assign icm_groupgmem0_DDR_router_1_arb_byteenable[0] = gmem0_DDR_icm_in_arb_byteenable[0];
      assign gmem0_DDR_icm_in_arb_stall[0] = icm_groupgmem0_DDR_router_1_arb_stall[0];
      assign gmem0_DDR_icm_in_wrp_ack[0] = icm_groupgmem0_DDR_router_1_wrp_ack[0];
      assign gmem0_DDR_icm_in_rrp_datavalid[0] = icm_groupgmem0_DDR_router_1_rrp_datavalid[0];
      assign gmem0_DDR_icm_in_rrp_data[0] = icm_groupgmem0_DDR_router_1_rrp_data[0];
      // INST global_ic_preroutegmem0_DDR_router_1 of matrix_multi_para_v1_3f4523_22e528_sys_ic_1054805194251292569
      matrix_multi_para_v1_3f4523_22e528_sys_ic_1054805194251292569 global_ic_preroutegmem0_DDR_router_1
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_DDR_router_1_arb_request),
         .m_arb_enable(icm_groupgmem0_DDR_router_1_arb_enable),
         .m_arb_read(icm_groupgmem0_DDR_router_1_arb_read),
         .m_arb_write(icm_groupgmem0_DDR_router_1_arb_write),
         .m_arb_burstcount(icm_groupgmem0_DDR_router_1_arb_burstcount),
         .m_arb_address(icm_groupgmem0_DDR_router_1_arb_address),
         .m_arb_writedata(icm_groupgmem0_DDR_router_1_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_DDR_router_1_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_DDR_router_1_arb_stall),
         .m_wrp_ack(icm_groupgmem0_DDR_router_1_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_DDR_router_1_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_DDR_router_1_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_DDR_icm_preroute_arb_request[1]),
         .mout_arb_enable(gmem0_DDR_icm_preroute_arb_enable[1]),
         .mout_arb_read(gmem0_DDR_icm_preroute_arb_read[1]),
         .mout_arb_write(gmem0_DDR_icm_preroute_arb_write[1]),
         .mout_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[1]),
         .mout_arb_address(gmem0_DDR_icm_preroute_arb_address[1]),
         .mout_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[1]),
         .mout_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[1]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_DDR_icm_preroute_arb_stall[1]),
         .mout_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[1]),
         .mout_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[1]),
         .mout_rrp_data(gmem0_DDR_icm_preroute_rrp_data[1])
      );

      assign icm_groupgmem0_DDR_router_2_arb_request[0] = gmem0_DDR_icm_in_arb_request[3];
      assign icm_groupgmem0_DDR_router_2_arb_enable[0] = gmem0_DDR_icm_in_arb_enable[3];
      assign icm_groupgmem0_DDR_router_2_arb_read[0] = gmem0_DDR_icm_in_arb_read[3];
      assign icm_groupgmem0_DDR_router_2_arb_write[0] = gmem0_DDR_icm_in_arb_write[3];
      assign icm_groupgmem0_DDR_router_2_arb_burstcount[0] = gmem0_DDR_icm_in_arb_burstcount[3];
      assign icm_groupgmem0_DDR_router_2_arb_address[0] = gmem0_DDR_icm_in_arb_address[3];
      assign icm_groupgmem0_DDR_router_2_arb_writedata[0] = gmem0_DDR_icm_in_arb_writedata[3];
      assign icm_groupgmem0_DDR_router_2_arb_byteenable[0] = gmem0_DDR_icm_in_arb_byteenable[3];
      assign gmem0_DDR_icm_in_arb_stall[3] = icm_groupgmem0_DDR_router_2_arb_stall[0];
      assign gmem0_DDR_icm_in_wrp_ack[3] = icm_groupgmem0_DDR_router_2_wrp_ack[0];
      assign gmem0_DDR_icm_in_rrp_datavalid[3] = icm_groupgmem0_DDR_router_2_rrp_datavalid[0];
      assign gmem0_DDR_icm_in_rrp_data[3] = icm_groupgmem0_DDR_router_2_rrp_data[0];
      // INST global_ic_preroutegmem0_DDR_router_2 of matrix_multi_para_v1_3f4523_22e528_sys_ic_12630885444112708235
      matrix_multi_para_v1_3f4523_22e528_sys_ic_12630885444112708235 global_ic_preroutegmem0_DDR_router_2
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_DDR_router_2_arb_request),
         .m_arb_enable(icm_groupgmem0_DDR_router_2_arb_enable),
         .m_arb_read(icm_groupgmem0_DDR_router_2_arb_read),
         .m_arb_write(icm_groupgmem0_DDR_router_2_arb_write),
         .m_arb_burstcount(icm_groupgmem0_DDR_router_2_arb_burstcount),
         .m_arb_address(icm_groupgmem0_DDR_router_2_arb_address),
         .m_arb_writedata(icm_groupgmem0_DDR_router_2_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_DDR_router_2_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_DDR_router_2_arb_stall),
         .m_wrp_ack(icm_groupgmem0_DDR_router_2_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_DDR_router_2_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_DDR_router_2_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_DDR_icm_preroute_arb_request[2]),
         .mout_arb_enable(gmem0_DDR_icm_preroute_arb_enable[2]),
         .mout_arb_read(gmem0_DDR_icm_preroute_arb_read[2]),
         .mout_arb_write(gmem0_DDR_icm_preroute_arb_write[2]),
         .mout_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[2]),
         .mout_arb_address(gmem0_DDR_icm_preroute_arb_address[2]),
         .mout_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[2]),
         .mout_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[2]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_DDR_icm_preroute_arb_stall[2]),
         .mout_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[2]),
         .mout_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[2]),
         .mout_rrp_data(gmem0_DDR_icm_preroute_rrp_data[2])
      );

      assign icm_groupgmem0_DDR_router_3_arb_request[0] = gmem0_DDR_icm_in_arb_request[2];
      assign icm_groupgmem0_DDR_router_3_arb_enable[0] = gmem0_DDR_icm_in_arb_enable[2];
      assign icm_groupgmem0_DDR_router_3_arb_read[0] = gmem0_DDR_icm_in_arb_read[2];
      assign icm_groupgmem0_DDR_router_3_arb_write[0] = gmem0_DDR_icm_in_arb_write[2];
      assign icm_groupgmem0_DDR_router_3_arb_burstcount[0] = gmem0_DDR_icm_in_arb_burstcount[2];
      assign icm_groupgmem0_DDR_router_3_arb_address[0] = gmem0_DDR_icm_in_arb_address[2];
      assign icm_groupgmem0_DDR_router_3_arb_writedata[0] = gmem0_DDR_icm_in_arb_writedata[2];
      assign icm_groupgmem0_DDR_router_3_arb_byteenable[0] = gmem0_DDR_icm_in_arb_byteenable[2];
      assign gmem0_DDR_icm_in_arb_stall[2] = icm_groupgmem0_DDR_router_3_arb_stall[0];
      assign gmem0_DDR_icm_in_wrp_ack[2] = icm_groupgmem0_DDR_router_3_wrp_ack[0];
      assign gmem0_DDR_icm_in_rrp_datavalid[2] = icm_groupgmem0_DDR_router_3_rrp_datavalid[0];
      assign gmem0_DDR_icm_in_rrp_data[2] = icm_groupgmem0_DDR_router_3_rrp_data[0];
      // INST global_ic_preroutegmem0_DDR_router_3 of matrix_multi_para_v1_3f4523_22e528_sys_ic_1054805194251292569
      matrix_multi_para_v1_3f4523_22e528_sys_ic_1054805194251292569 global_ic_preroutegmem0_DDR_router_3
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_DDR_router_3_arb_request),
         .m_arb_enable(icm_groupgmem0_DDR_router_3_arb_enable),
         .m_arb_read(icm_groupgmem0_DDR_router_3_arb_read),
         .m_arb_write(icm_groupgmem0_DDR_router_3_arb_write),
         .m_arb_burstcount(icm_groupgmem0_DDR_router_3_arb_burstcount),
         .m_arb_address(icm_groupgmem0_DDR_router_3_arb_address),
         .m_arb_writedata(icm_groupgmem0_DDR_router_3_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_DDR_router_3_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_DDR_router_3_arb_stall),
         .m_wrp_ack(icm_groupgmem0_DDR_router_3_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_DDR_router_3_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_DDR_router_3_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_DDR_icm_preroute_arb_request[3]),
         .mout_arb_enable(gmem0_DDR_icm_preroute_arb_enable[3]),
         .mout_arb_read(gmem0_DDR_icm_preroute_arb_read[3]),
         .mout_arb_write(gmem0_DDR_icm_preroute_arb_write[3]),
         .mout_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[3]),
         .mout_arb_address(gmem0_DDR_icm_preroute_arb_address[3]),
         .mout_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[3]),
         .mout_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[3]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_DDR_icm_preroute_arb_stall[3]),
         .mout_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[3]),
         .mout_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[3]),
         .mout_rrp_data(gmem0_DDR_icm_preroute_rrp_data[3])
      );

      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:router
         logic b_arb_request [2];
         logic b_arb_enable [2];
         logic b_arb_read [2];
         logic b_arb_write [2];
         logic [4:0] b_arb_burstcount [2];
         logic [25:0] b_arb_address [2];
         logic [511:0] b_arb_writedata [2];
         logic [63:0] b_arb_byteenable [2];
         logic b_arb_stall [2];
         logic b_wrp_ack [2];
         logic b_rrp_datavalid [2];
         logic [511:0] b_rrp_data [2];
         logic [1:0] bank_select;

         // INST router of acl_ic_mem_router_reorder
         acl_ic_mem_router_reorder
         #(
            .BANK_SEL_BIT(4),
            .READ_DATA_FIFO_DEPTH(126),
            .WRITE_ACK_FIFO_DEPTH(126),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0),
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .NUM_BANKS(2)
         )
         router
         (
            .clock(clock),
            .resetn(resetn),
            .bank_select(bank_select),
            // ICM m
            .m_arb_request(gmem0_DDR_icm_preroute_arb_request[__i]),
            .m_arb_enable(gmem0_DDR_icm_preroute_arb_enable[__i]),
            .m_arb_read(gmem0_DDR_icm_preroute_arb_read[__i]),
            .m_arb_write(gmem0_DDR_icm_preroute_arb_write[__i]),
            .m_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[__i]),
            .m_arb_address(gmem0_DDR_icm_preroute_arb_address[__i]),
            .m_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[__i]),
            .m_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[__i]),
            .m_arb_stall(gmem0_DDR_icm_preroute_arb_stall[__i]),
            .m_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[__i]),
            .m_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[__i]),
            .m_rrp_data(gmem0_DDR_icm_preroute_rrp_data[__i]),
            // ICM b
            .b_arb_request(b_arb_request),
            .b_arb_enable(b_arb_enable),
            .b_arb_read(b_arb_read),
            .b_arb_write(b_arb_write),
            .b_arb_burstcount(b_arb_burstcount),
            .b_arb_address(b_arb_address),
            .b_arb_writedata(b_arb_writedata),
            .b_arb_byteenable(b_arb_byteenable),
            .b_arb_stall(b_arb_stall),
            .b_wrp_ack(b_wrp_ack),
            .b_rrp_datavalid(b_rrp_datavalid),
            .b_rrp_data(b_rrp_data)
         );

         assign bank_select[0] = (gmem0_DDR_icm_preroute_arb_address[__i][26] == 1'b0);
         assign bank_select[1] = (gmem0_DDR_icm_preroute_arb_address[__i][26] == 1'b1);
      end

      // INST global_icgmem0_DDR_port_0_0_rw of matrix_multi_para_v1_3f4523_22e528_sys_ic_15157590448535444496
      matrix_multi_para_v1_3f4523_22e528_sys_ic_15157590448535444496 global_icgmem0_DDR_port_0_0_rw
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_routedgmem0_DDR_port_0_0_rw_arb_request),
         .m_arb_enable(icm_routedgmem0_DDR_port_0_0_rw_arb_enable),
         .m_arb_read(icm_routedgmem0_DDR_port_0_0_rw_arb_read),
         .m_arb_write(icm_routedgmem0_DDR_port_0_0_rw_arb_write),
         .m_arb_burstcount(icm_routedgmem0_DDR_port_0_0_rw_arb_burstcount),
         .m_arb_address(icm_routedgmem0_DDR_port_0_0_rw_arb_address),
         .m_arb_writedata(icm_routedgmem0_DDR_port_0_0_rw_arb_writedata),
         .m_arb_byteenable(icm_routedgmem0_DDR_port_0_0_rw_arb_byteenable),
         .m_arb_stall(icm_routedgmem0_DDR_port_0_0_rw_arb_stall),
         .m_wrp_ack(icm_routedgmem0_DDR_port_0_0_rw_wrp_ack),
         .m_rrp_datavalid(icm_routedgmem0_DDR_port_0_0_rw_rrp_datavalid),
         .m_rrp_data(icm_routedgmem0_DDR_port_0_0_rw_rrp_data),
         // ICM mout
         .mout_arb_request(icm_out_0_rw_arb_request[0]),
         .mout_arb_enable(icm_out_0_rw_arb_enable[0]),
         .mout_arb_read(icm_out_0_rw_arb_read[0]),
         .mout_arb_write(icm_out_0_rw_arb_write[0]),
         .mout_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .mout_arb_address(icm_out_0_rw_arb_address[0]),
         .mout_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .mout_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .mout_arb_id(icm_out_0_rw_arb_id[0]),
         .mout_arb_stall(icm_out_0_rw_arb_stall[0]),
         .mout_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .mout_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .mout_rrp_data(icm_out_0_rw_rrp_data[0])
      );

      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:mgmem0_DDR_port_0_0_rw
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_request[__i] = router[__i].b_arb_request[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_enable[__i] = router[__i].b_arb_enable[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_read[__i] = router[__i].b_arb_read[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_write[__i] = router[__i].b_arb_write[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_burstcount[__i] = router[__i].b_arb_burstcount[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_address[__i] = router[__i].b_arb_address[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_writedata[__i] = router[__i].b_arb_writedata[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_byteenable[__i] = router[__i].b_arb_byteenable[0];
         assign router[__i].b_arb_stall[0] = icm_routedgmem0_DDR_port_0_0_rw_arb_stall[__i];
         assign router[__i].b_wrp_ack[0] = icm_routedgmem0_DDR_port_0_0_rw_wrp_ack[__i];
         assign router[__i].b_rrp_datavalid[0] = icm_routedgmem0_DDR_port_0_0_rw_rrp_datavalid[__i];
         assign router[__i].b_rrp_data[0] = icm_routedgmem0_DDR_port_0_0_rw_rrp_data[__i];
      end

      // INST global_out_ic_to_avmgmem0_DDR_port_0_0_rw of acl_ic_to_avm
      acl_ic_to_avm
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(32),
         .BYTEENA_W(64),
         .LATENCY(0),
         .USE_WRITE_ACK(0),
         .NO_IDLE_STALL(0),
         .ENABLE_WAITREQUEST_ALLOWANCE(0),
         .ID_W(2),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      global_out_ic_to_avmgmem0_DDR_port_0_0_rw
      (
         // ICM ic
         .ic_arb_request(icm_out_0_rw_arb_request[0]),
         .ic_arb_enable(icm_out_0_rw_arb_enable[0]),
         .ic_arb_read(icm_out_0_rw_arb_read[0]),
         .ic_arb_write(icm_out_0_rw_arb_write[0]),
         .ic_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .ic_arb_address(icm_out_0_rw_arb_address[0]),
         .ic_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .ic_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .ic_arb_id(icm_out_0_rw_arb_id[0]),
         .ic_arb_stall(icm_out_0_rw_arb_stall[0]),
         .ic_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .ic_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .ic_rrp_data(icm_out_0_rw_rrp_data[0]),
         // AVM avm
         .avm_enable(mtree_mem_gmem0_DDR_port_0_0_rw_enable),
         .avm_read(mtree_mem_gmem0_DDR_port_0_0_rw_read),
         .avm_write(mtree_mem_gmem0_DDR_port_0_0_rw_write),
         .avm_address(mtree_mem_gmem0_DDR_port_0_0_rw_address),
         .avm_writedata(mtree_mem_gmem0_DDR_port_0_0_rw_writedata),
         .avm_byteenable(mtree_mem_gmem0_DDR_port_0_0_rw_byteenable),
         .avm_waitrequest(mtree_mem_gmem0_DDR_port_0_0_rw_waitrequest),
         .avm_readdata(mtree_mem_gmem0_DDR_port_0_0_rw_readdata),
         .avm_readdatavalid(mtree_mem_gmem0_DDR_port_0_0_rw_readdatavalid),
         .avm_burstcount(mtree_mem_gmem0_DDR_port_0_0_rw_burstcount),
         .avm_writeack(mtree_mem_gmem0_DDR_port_0_0_rw_writeack),
         .clock(),
         .resetn()
      );

      // INST global_icgmem0_DDR_port_1_0_rw of matrix_multi_para_v1_3f4523_22e528_sys_ic_15157590448535444496
      matrix_multi_para_v1_3f4523_22e528_sys_ic_15157590448535444496 global_icgmem0_DDR_port_1_0_rw
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_routedgmem0_DDR_port_1_0_rw_arb_request),
         .m_arb_enable(icm_routedgmem0_DDR_port_1_0_rw_arb_enable),
         .m_arb_read(icm_routedgmem0_DDR_port_1_0_rw_arb_read),
         .m_arb_write(icm_routedgmem0_DDR_port_1_0_rw_arb_write),
         .m_arb_burstcount(icm_routedgmem0_DDR_port_1_0_rw_arb_burstcount),
         .m_arb_address(icm_routedgmem0_DDR_port_1_0_rw_arb_address),
         .m_arb_writedata(icm_routedgmem0_DDR_port_1_0_rw_arb_writedata),
         .m_arb_byteenable(icm_routedgmem0_DDR_port_1_0_rw_arb_byteenable),
         .m_arb_stall(icm_routedgmem0_DDR_port_1_0_rw_arb_stall),
         .m_wrp_ack(icm_routedgmem0_DDR_port_1_0_rw_wrp_ack),
         .m_rrp_datavalid(icm_routedgmem0_DDR_port_1_0_rw_rrp_datavalid),
         .m_rrp_data(icm_routedgmem0_DDR_port_1_0_rw_rrp_data),
         // ICM mout
         .mout_arb_request(icm_out_0_rw_arb_request[1]),
         .mout_arb_enable(icm_out_0_rw_arb_enable[1]),
         .mout_arb_read(icm_out_0_rw_arb_read[1]),
         .mout_arb_write(icm_out_0_rw_arb_write[1]),
         .mout_arb_burstcount(icm_out_0_rw_arb_burstcount[1]),
         .mout_arb_address(icm_out_0_rw_arb_address[1]),
         .mout_arb_writedata(icm_out_0_rw_arb_writedata[1]),
         .mout_arb_byteenable(icm_out_0_rw_arb_byteenable[1]),
         .mout_arb_id(icm_out_0_rw_arb_id[1]),
         .mout_arb_stall(icm_out_0_rw_arb_stall[1]),
         .mout_wrp_ack(icm_out_0_rw_wrp_ack[1]),
         .mout_rrp_datavalid(icm_out_0_rw_rrp_datavalid[1]),
         .mout_rrp_data(icm_out_0_rw_rrp_data[1])
      );

      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:mgmem0_DDR_port_1_0_rw
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_request[__i] = router[__i].b_arb_request[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_enable[__i] = router[__i].b_arb_enable[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_read[__i] = router[__i].b_arb_read[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_write[__i] = router[__i].b_arb_write[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_burstcount[__i] = router[__i].b_arb_burstcount[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_address[__i] = router[__i].b_arb_address[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_writedata[__i] = router[__i].b_arb_writedata[1];
         assign icm_routedgmem0_DDR_port_1_0_rw_arb_byteenable[__i] = router[__i].b_arb_byteenable[1];
         assign router[__i].b_arb_stall[1] = icm_routedgmem0_DDR_port_1_0_rw_arb_stall[__i];
         assign router[__i].b_wrp_ack[1] = icm_routedgmem0_DDR_port_1_0_rw_wrp_ack[__i];
         assign router[__i].b_rrp_datavalid[1] = icm_routedgmem0_DDR_port_1_0_rw_rrp_datavalid[__i];
         assign router[__i].b_rrp_data[1] = icm_routedgmem0_DDR_port_1_0_rw_rrp_data[__i];
      end

      // INST global_out_ic_to_avmgmem0_DDR_port_1_0_rw of acl_ic_to_avm
      acl_ic_to_avm
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(32),
         .BYTEENA_W(64),
         .LATENCY(0),
         .USE_WRITE_ACK(0),
         .NO_IDLE_STALL(0),
         .ENABLE_WAITREQUEST_ALLOWANCE(0),
         .ID_W(2),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      global_out_ic_to_avmgmem0_DDR_port_1_0_rw
      (
         // ICM ic
         .ic_arb_request(icm_out_0_rw_arb_request[1]),
         .ic_arb_enable(icm_out_0_rw_arb_enable[1]),
         .ic_arb_read(icm_out_0_rw_arb_read[1]),
         .ic_arb_write(icm_out_0_rw_arb_write[1]),
         .ic_arb_burstcount(icm_out_0_rw_arb_burstcount[1]),
         .ic_arb_address(icm_out_0_rw_arb_address[1]),
         .ic_arb_writedata(icm_out_0_rw_arb_writedata[1]),
         .ic_arb_byteenable(icm_out_0_rw_arb_byteenable[1]),
         .ic_arb_id(icm_out_0_rw_arb_id[1]),
         .ic_arb_stall(icm_out_0_rw_arb_stall[1]),
         .ic_wrp_ack(icm_out_0_rw_wrp_ack[1]),
         .ic_rrp_datavalid(icm_out_0_rw_rrp_datavalid[1]),
         .ic_rrp_data(icm_out_0_rw_rrp_data[1]),
         // AVM avm
         .avm_enable(mtree_mem_gmem0_DDR_port_1_0_rw_enable),
         .avm_read(mtree_mem_gmem0_DDR_port_1_0_rw_read),
         .avm_write(mtree_mem_gmem0_DDR_port_1_0_rw_write),
         .avm_address(mtree_mem_gmem0_DDR_port_1_0_rw_address),
         .avm_writedata(mtree_mem_gmem0_DDR_port_1_0_rw_writedata),
         .avm_byteenable(mtree_mem_gmem0_DDR_port_1_0_rw_byteenable),
         .avm_waitrequest(mtree_mem_gmem0_DDR_port_1_0_rw_waitrequest),
         .avm_readdata(mtree_mem_gmem0_DDR_port_1_0_rw_readdata),
         .avm_readdatavalid(mtree_mem_gmem0_DDR_port_1_0_rw_readdatavalid),
         .avm_burstcount(mtree_mem_gmem0_DDR_port_1_0_rw_burstcount),
         .avm_writeack(mtree_mem_gmem0_DDR_port_1_0_rw_writeack),
         .clock(),
         .resetn()
      );

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE matrix_multi_para_v1_3f4523_22e528_sys_ic_1054805194251292569
/////////////////////////////////////////////////////////////////
module matrix_multi_para_v1_3f4523_22e528_sys_ic_1054805194251292569
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic [4:0] m_arb_burstcount [1],
   input logic [26:0] m_arb_address [1],
   input logic [511:0] m_arb_writedata [1],
   input logic [63:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [511:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [26:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(128),
         .RRP_FIFO_DEPTH(128),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE matrix_multi_para_v1_3f4523_22e528_sys_ic_12630885444112708235
/////////////////////////////////////////////////////////////////
module matrix_multi_para_v1_3f4523_22e528_sys_ic_12630885444112708235
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic [4:0] m_arb_burstcount [1],
   input logic [26:0] m_arb_address [1],
   input logic [511:0] m_arb_writedata [1],
   input logic [63:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [511:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [26:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(27),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(27),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(128),
         .RRP_FIFO_DEPTH(128),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE matrix_multi_para_v1_3f4523_22e528_sys_ic_15157590448535444496
/////////////////////////////////////////////////////////////////
module matrix_multi_para_v1_3f4523_22e528_sys_ic_15157590448535444496
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [4],
   input logic m_arb_enable [4],
   input logic m_arb_read [4],
   input logic m_arb_write [4],
   input logic [4:0] m_arb_burstcount [4],
   input logic [25:0] m_arb_address [4],
   input logic [511:0] m_arb_writedata [4],
   input logic [63:0] m_arb_byteenable [4],
   output logic m_arb_stall [4],
   output logic m_wrp_ack [4],
   output logic m_rrp_datavalid [4],
   output logic [511:0] m_rrp_data [4],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [25:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_host_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2),
            .NUM_READ_HOSTS(4),
            .NUM_WRITE_HOSTS(4),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(26),
         .BYTEENA_W(64),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(26),
         .BYTEENA_W(64),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(26),
         .BYTEENA_W(64),
         .ID_W(2),
         .NUM_READ_HOSTS(4),
         .NUM_WRITE_HOSTS(4),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(128),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
      assign m[3].wrp_intf.ack = s.wrp_intf.ack;
      assign m[3].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
      assign m[3].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[3].rrp_intf.data = s.rrp_intf.data;
      assign m[3].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 6; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:sp
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2)
         ) out_intf();

         // INST sp of acl_arb_staging_reg
         acl_arb_staging_reg
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(26),
            .BYTEENA_W(64),
            .ID_W(2),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         sp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = dp[0].out_intf.req.request;
   assign mout_arb_enable = dp[0].out_intf.req.enable;
   assign mout_arb_read = dp[0].out_intf.req.read;
   assign mout_arb_write = dp[0].out_intf.req.write;
   assign mout_arb_burstcount = dp[0].out_intf.req.burstcount;
   assign mout_arb_address = dp[0].out_intf.req.address;
   assign mout_arb_writedata = dp[0].out_intf.req.writedata;
   assign mout_arb_byteenable = dp[0].out_intf.req.byteenable;
   assign mout_arb_id = dp[0].out_intf.req.id;
   assign dp[0].out_intf.stall = mout_arb_stall;
   assign dp[0].in_intf.req = sp[0].out_intf.req;
   assign sp[0].out_intf.stall = dp[0].in_intf.stall;
   assign sp[0].in_intf.req = s.out_arb_intf.req;
   assign s.out_arb_intf.stall = sp[0].in_intf.stall;
   assign s.in_arb_intf.req = dp[1].out_intf.req;
   assign dp[1].out_intf.stall = s.in_arb_intf.stall;
   assign dp[1].in_intf.req = a[2].mout_intf.req;
   assign a[2].mout_intf.stall = dp[1].in_intf.stall;
   assign a[2].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[2].m0_intf.stall;
   assign a[2].m1_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = a[2].m1_intf.stall;
   assign a[0].m0_intf.req = dp[2].out_intf.req;
   assign dp[2].out_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = dp[3].out_intf.req;
   assign dp[3].out_intf.stall = a[0].m1_intf.stall;
   assign a[1].m0_intf.req = dp[4].out_intf.req;
   assign dp[4].out_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = dp[5].out_intf.req;
   assign dp[5].out_intf.stall = a[1].m1_intf.stall;
   assign dp[2].in_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = dp[2].in_intf.stall;
   assign dp[3].in_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = dp[3].in_intf.stall;
   assign dp[4].in_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = dp[4].in_intf.stall;
   assign dp[5].in_intf.req = m[3].arb_intf.req;
   assign m[3].arb_intf.stall = dp[5].in_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cra_ring_wrapper
/////////////////////////////////////////////////////////////////
module cra_ring_wrapper
(
   input logic clock,
   input logic resetn,
   // AVS cra_ring_root_avs
   input logic cra_ring_root_avs_enable,
   input logic cra_ring_root_avs_read,
   input logic cra_ring_root_avs_write,
   input logic [6:0] cra_ring_root_avs_address,
   input logic [63:0] cra_ring_root_avs_writedata,
   input logic [7:0] cra_ring_root_avs_byteenable,
   output logic cra_ring_root_avs_waitrequest,
   output logic [63:0] cra_ring_root_avs_readdata,
   output logic cra_ring_root_avs_readdatavalid,
   // AVM cra_ring_avm_0
   output logic cra_ring_avm_0_enable,
   output logic cra_ring_avm_0_read,
   output logic cra_ring_avm_0_write,
   output logic [5:0] cra_ring_avm_0_address,
   output logic [63:0] cra_ring_avm_0_writedata,
   output logic [7:0] cra_ring_avm_0_byteenable,
   input logic [63:0] cra_ring_avm_0_readdata,
   input logic cra_ring_avm_0_readdatavalid,
   output logic cra_ring_avm_0_burstcount
);
   logic cra_ring_root_ring_in_wire_read;
   logic cra_ring_root_ring_in_wire_write;
   logic [5:0] cra_ring_root_ring_in_wire_addr;
   logic [63:0] cra_ring_root_ring_in_wire_data;
   logic [7:0] cra_ring_root_ring_in_wire_byteena;
   logic cra_ring_root_ring_in_wire_datavalid;
   logic cra_ring_root_ring_out_wire_read;
   logic cra_ring_root_ring_out_wire_write;
   logic [6:0] cra_ring_root_ring_out_wire_addr;
   logic [63:0] cra_ring_root_ring_out_wire_data;
   logic [7:0] cra_ring_root_ring_out_wire_byteena;
   logic cra_ring_root_ring_out_wire_datavalid;
   logic cra_ring_rom_avm_enable;
   logic cra_ring_rom_avm_read;
   logic cra_ring_rom_avm_write;
   logic [5:0] cra_ring_rom_avm_address;
   logic [63:0] cra_ring_rom_avm_writedata;
   logic [7:0] cra_ring_rom_avm_byteenable;
   logic [63:0] cra_ring_rom_avm_readdata;
   logic cra_ring_rom_avm_readdatavalid;
   logic cra_ring_rom_avm_burstcount;
   logic cra_ring_rom_ring_out_wire_read;
   logic cra_ring_rom_ring_out_wire_write;
   logic [5:0] cra_ring_rom_ring_out_wire_addr;
   logic [63:0] cra_ring_rom_ring_out_wire_data;
   logic [7:0] cra_ring_rom_ring_out_wire_byteena;
   logic cra_ring_rom_ring_out_wire_datavalid;
   logic cra_ring_node_ring_out_wire_0_read;
   logic cra_ring_node_ring_out_wire_0_write;
   logic [5:0] cra_ring_node_ring_out_wire_0_addr;
   logic [63:0] cra_ring_node_ring_out_wire_0_data;
   logic [7:0] cra_ring_node_ring_out_wire_0_byteena;
   logic cra_ring_node_ring_out_wire_0_datavalid;

   // INST cra_root of cra_ring_root
   cra_ring_root
   #(
      .ADDR_W(6),
      .AGENT_PORT_WAITREQUEST_ALLOWANCE(0),
      .ALLOW_HIGH_SPEED_FIFO_USAGE(0),
      .ASYNC_RESET(1),
      .DATA_W(64),
      .ID_W(0),
      .ROM_ENABLE(1),
      .ROM_EXT_W(0),
      .SYNCHRONIZE_RESET(0)
   )
   cra_root
   (
      // AVS avs
      .avs_enable(cra_ring_root_avs_enable),
      .avs_read(cra_ring_root_avs_read),
      .avs_write(cra_ring_root_avs_write),
      .avs_addr(cra_ring_root_avs_address),
      .avs_writedata(cra_ring_root_avs_writedata),
      .avs_byteena(cra_ring_root_avs_byteenable),
      .avs_waitrequest(cra_ring_root_avs_waitrequest),
      .avs_readdata(cra_ring_root_avs_readdata),
      .avs_readdatavalid(cra_ring_root_avs_readdatavalid),
      // AVS ri
      .ri_read(cra_ring_node_ring_out_wire_0_read),
      .ri_write(cra_ring_node_ring_out_wire_0_write),
      .ri_addr(cra_ring_node_ring_out_wire_0_addr),
      .ri_data(cra_ring_node_ring_out_wire_0_data),
      .ri_byteena(cra_ring_node_ring_out_wire_0_byteena),
      .ri_datavalid(cra_ring_node_ring_out_wire_0_datavalid),
      // AVS ro
      .ro_read(cra_ring_root_ring_out_wire_read),
      .ro_write(cra_ring_root_ring_out_wire_write),
      .ro_addr(cra_ring_root_ring_out_wire_addr),
      .ro_data(cra_ring_root_ring_out_wire_data),
      .ro_byteena(cra_ring_root_ring_out_wire_byteena),
      .ro_datavalid(cra_ring_root_ring_out_wire_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST cra_ring_rom of cra_ring_rom
   cra_ring_rom
   #(
      .ASYNC_RESET(1),
      .DATA_W(64),
      .ID_W(0),
      .RING_ADDR_W(6),
      .ROM_EXT_W(0),
      .ROM_W(6),
      .SYNCHRONIZE_RESET(0)
   )
   cra_ring_rom
   (
      // AVM avm
      .avm_enable(cra_ring_rom_avm_enable),
      .avm_read(cra_ring_rom_avm_read),
      .avm_write(cra_ring_rom_avm_write),
      .avm_addr(cra_ring_rom_avm_address),
      .avm_writedata(cra_ring_rom_avm_writedata),
      .avm_byteenable(cra_ring_rom_avm_byteenable),
      .avm_readdata(cra_ring_rom_avm_readdata),
      .avm_readdatavalid(cra_ring_rom_avm_readdatavalid),
      .avm_burstcount(cra_ring_rom_avm_burstcount),
      // AVS ri
      .ri_read(cra_ring_root_ring_out_wire_read),
      .ri_write(cra_ring_root_ring_out_wire_write),
      .ri_addr(cra_ring_root_ring_out_wire_addr),
      .ri_data(cra_ring_root_ring_out_wire_data),
      .ri_byteena(cra_ring_root_ring_out_wire_byteena),
      .ri_datavalid(cra_ring_root_ring_out_wire_datavalid),
      // AVS ro
      .ro_read(cra_ring_rom_ring_out_wire_read),
      .ro_write(cra_ring_rom_ring_out_wire_write),
      .ro_addr(cra_ring_rom_ring_out_wire_addr),
      .ro_data(cra_ring_rom_ring_out_wire_data),
      .ro_byteena(cra_ring_rom_ring_out_wire_byteena),
      .ro_datavalid(cra_ring_rom_ring_out_wire_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST cra_ring_node_avm_wire_0_cra_ring_inst_0 of cra_ring_node
   cra_ring_node
   #(
      .ASYNC_RESET(1),
      .CRA_ADDR_W(6),
      .DATA_W(64),
      .ID(0),
      .ID_W(0),
      .RING_ADDR_W(6),
      .SYNCHRONIZE_RESET(0)
   )
   cra_ring_node_avm_wire_0_cra_ring_inst_0
   (
      // AVM avm
      .avm_enable(cra_ring_avm_0_enable),
      .avm_read(cra_ring_avm_0_read),
      .avm_write(cra_ring_avm_0_write),
      .avm_addr(cra_ring_avm_0_address),
      .avm_writedata(cra_ring_avm_0_writedata),
      .avm_byteena(cra_ring_avm_0_byteenable),
      .avm_readdata(cra_ring_avm_0_readdata),
      .avm_readdatavalid(cra_ring_avm_0_readdatavalid),
      .avm_burstcount(cra_ring_avm_0_burstcount),
      // AVS ri
      .ri_read(cra_ring_rom_ring_out_wire_read),
      .ri_write(cra_ring_rom_ring_out_wire_write),
      .ri_addr(cra_ring_rom_ring_out_wire_addr),
      .ri_data(cra_ring_rom_ring_out_wire_data),
      .ri_byteena(cra_ring_rom_ring_out_wire_byteena),
      .ri_datavalid(cra_ring_rom_ring_out_wire_datavalid),
      // AVS ro
      .ro_read(cra_ring_node_ring_out_wire_0_read),
      .ro_write(cra_ring_node_ring_out_wire_0_write),
      .ro_addr(cra_ring_node_ring_out_wire_0_addr),
      .ro_data(cra_ring_node_ring_out_wire_0_data),
      .ro_byteena(cra_ring_node_ring_out_wire_0_byteena),
      .ro_datavalid(cra_ring_node_ring_out_wire_0_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST sys_description_rom of acl_rom_module
   acl_rom_module
   #(
      .ADDRESS_WIDTH(6),
      .ASYNC_RESET(1),
      .DATA_WIDTH(64),
      .FAMILY("Arria 10"),
      .INIT_FILE("sys_description.hex"),
      .SYNCHRONIZE_RESET(0)
   )
   sys_description_rom
   (
      .clk(clock),
      .rst_n(resetn),
      .read(cra_ring_rom_avm_read),
      .readdatavalid(cra_ring_rom_avm_readdatavalid),
      .address(cra_ring_rom_avm_address),
      .readdata(cra_ring_rom_avm_readdata)
   );

endmodule

